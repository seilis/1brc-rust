<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="2446690573"><g><title>[ld-linux-x86-64.so.2] (449,476 samples, 0.02%)</title><rect x="0.0000%" y="485" width="0.0184%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="449476"/><text x="0.2500%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (387,688 samples, 0.02%)</title><rect x="0.0025%" y="469" width="0.0158%" height="15" fill="rgb(217,0,24)" fg:x="61788" fg:w="387688"/><text x="0.2525%" y="479.50"></text></g><g><title>_dl_catch_exception (387,688 samples, 0.02%)</title><rect x="0.0025%" y="453" width="0.0158%" height="15" fill="rgb(221,193,54)" fg:x="61788" fg:w="387688"/><text x="0.2525%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (387,688 samples, 0.02%)</title><rect x="0.0025%" y="437" width="0.0158%" height="15" fill="rgb(248,212,6)" fg:x="61788" fg:w="387688"/><text x="0.2525%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (387,688 samples, 0.02%)</title><rect x="0.0025%" y="421" width="0.0158%" height="15" fill="rgb(208,68,35)" fg:x="61788" fg:w="387688"/><text x="0.2525%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (387,688 samples, 0.02%)</title><rect x="0.0025%" y="405" width="0.0158%" height="15" fill="rgb(232,128,0)" fg:x="61788" fg:w="387688"/><text x="0.2525%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (387,688 samples, 0.02%)</title><rect x="0.0025%" y="389" width="0.0158%" height="15" fill="rgb(207,160,47)" fg:x="61788" fg:w="387688"/><text x="0.2525%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (455,548 samples, 0.02%)</title><rect x="0.0000%" y="501" width="0.0186%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="455548"/><text x="0.2500%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (456,143 samples, 0.02%)</title><rect x="0.0000%" y="517" width="0.0186%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="456143"/><text x="0.2500%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (456,144 samples, 0.02%)</title><rect x="0.0000%" y="533" width="0.0186%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="456144"/><text x="0.2500%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (8,656,448 samples, 0.35%)</title><rect x="4.4348%" y="165" width="0.3538%" height="15" fill="rgb(250,228,42)" fg:x="108506993" fg:w="8656448"/><text x="4.6848%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (8,656,448 samples, 0.35%)</title><rect x="4.4348%" y="149" width="0.3538%" height="15" fill="rgb(240,193,28)" fg:x="108506993" fg:w="8656448"/><text x="4.6848%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (8,656,448 samples, 0.35%)</title><rect x="4.4348%" y="133" width="0.3538%" height="15" fill="rgb(216,20,37)" fg:x="108506993" fg:w="8656448"/><text x="4.6848%" y="143.50"></text></g><g><title>core::cmp::Ord::min (8,623,660 samples, 0.35%)</title><rect x="15.0379%" y="117" width="0.3525%" height="15" fill="rgb(206,188,39)" fg:x="367930938" fg:w="8623660"/><text x="15.2879%" y="127.50"></text></g><g><title>core::cmp::min_by (8,623,660 samples, 0.35%)</title><rect x="15.0379%" y="101" width="0.3525%" height="15" fill="rgb(217,207,13)" fg:x="367930938" fg:w="8623660"/><text x="15.2879%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (12,958,570 samples, 0.53%)</title><rect x="15.3904%" y="117" width="0.5296%" height="15" fill="rgb(231,73,38)" fg:x="376554598" fg:w="12958570"/><text x="15.6404%" y="127.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (531,677,262 samples, 21.73%)</title><rect x="2.8460%" y="213" width="21.7305%" height="15" fill="rgb(225,20,46)" fg:x="69632063" fg:w="531677262"/><text x="3.0960%" y="223.50">&lt;core::str::iter::SplitInclusive&lt;P..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (531,677,262 samples, 21.73%)</title><rect x="2.8460%" y="197" width="21.7305%" height="15" fill="rgb(210,31,41)" fg:x="69632063" fg:w="531677262"/><text x="3.0960%" y="207.50">core::str::iter::SplitInternal&lt;P&gt;:..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (531,677,262 samples, 21.73%)</title><rect x="2.8460%" y="181" width="21.7305%" height="15" fill="rgb(221,200,47)" fg:x="69632063" fg:w="531677262"/><text x="3.0960%" y="191.50">&lt;core::str::pattern::CharSearcher ..</text></g><g><title>core::slice::memchr::memchr (484,145,884 samples, 19.79%)</title><rect x="4.7886%" y="165" width="19.7878%" height="15" fill="rgb(226,26,5)" fg:x="117163441" fg:w="484145884"/><text x="5.0386%" y="175.50">core::slice::memchr::memchr</text></g><g><title>core::slice::memchr::memchr_aligned (479,817,228 samples, 19.61%)</title><rect x="4.9656%" y="149" width="19.6109%" height="15" fill="rgb(249,33,26)" fg:x="121492097" fg:w="479817228"/><text x="5.2156%" y="159.50">core::slice::memchr::memchr_ali..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (337,171,079 samples, 13.78%)</title><rect x="10.7957%" y="133" width="13.7807%" height="15" fill="rgb(235,183,28)" fg:x="264138246" fg:w="337171079"/><text x="11.0457%" y="143.50">core::slice::memchr::..</text></g><g><title>core::slice::memchr::memchr_naive (211,796,157 samples, 8.66%)</title><rect x="15.9200%" y="117" width="8.6564%" height="15" fill="rgb(221,5,38)" fg:x="389513168" fg:w="211796157"/><text x="16.1700%" y="127.50">core::slice:..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (670,034,990 samples, 27.39%)</title><rect x="2.8460%" y="245" width="27.3854%" height="15" fill="rgb(247,18,42)" fg:x="69632063" fg:w="670034990"/><text x="3.0960%" y="255.50">&lt;core::str::iter::Lines as core::iter::trait..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (670,034,990 samples, 27.39%)</title><rect x="2.8460%" y="229" width="27.3854%" height="15" fill="rgb(241,131,45)" fg:x="69632063" fg:w="670034990"/><text x="3.0960%" y="239.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core..</text></g><g><title>core::option::Option&lt;T&gt;::map (138,357,728 samples, 5.65%)</title><rect x="24.5764%" y="213" width="5.6549%" height="15" fill="rgb(249,31,29)" fg:x="601309325" fg:w="138357728"/><text x="24.8264%" y="223.50">core::o..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (138,357,728 samples, 5.65%)</title><rect x="24.5764%" y="197" width="5.6549%" height="15" fill="rgb(225,111,53)" fg:x="601309325" fg:w="138357728"/><text x="24.8264%" y="207.50">core::o..</text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (138,357,728 samples, 5.65%)</title><rect x="24.5764%" y="181" width="5.6549%" height="15" fill="rgb(238,160,17)" fg:x="601309325" fg:w="138357728"/><text x="24.8264%" y="191.50">&lt;core::..</text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (138,357,728 samples, 5.65%)</title><rect x="24.5764%" y="165" width="5.6549%" height="15" fill="rgb(214,148,48)" fg:x="601309325" fg:w="138357728"/><text x="24.8264%" y="175.50">&lt;core::..</text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (73,501,558 samples, 3.00%)</title><rect x="27.2272%" y="149" width="3.0041%" height="15" fill="rgb(232,36,49)" fg:x="666165495" fg:w="73501558"/><text x="27.4772%" y="159.50">cor..</text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (73,501,558 samples, 3.00%)</title><rect x="27.2272%" y="133" width="3.0041%" height="15" fill="rgb(209,103,24)" fg:x="666165495" fg:w="73501558"/><text x="27.4772%" y="143.50">&lt;ch..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (73,501,558 samples, 3.00%)</title><rect x="27.2272%" y="117" width="3.0041%" height="15" fill="rgb(229,88,8)" fg:x="666165495" fg:w="73501558"/><text x="27.4772%" y="127.50">&lt;&amp;s..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (73,501,558 samples, 3.00%)</title><rect x="27.2272%" y="101" width="3.0041%" height="15" fill="rgb(213,181,19)" fg:x="666165495" fg:w="73501558"/><text x="27.4772%" y="111.50">&lt;&amp;s..</text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (73,501,558 samples, 3.00%)</title><rect x="27.2272%" y="85" width="3.0041%" height="15" fill="rgb(254,191,54)" fg:x="666165495" fg:w="73501558"/><text x="27.4772%" y="95.50">cor..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,332,277 samples, 0.18%)</title><rect x="30.0543%" y="69" width="0.1771%" height="15" fill="rgb(241,83,37)" fg:x="735334776" fg:w="4332277"/><text x="30.3043%" y="79.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (4,332,277 samples, 0.18%)</title><rect x="30.0543%" y="53" width="0.1771%" height="15" fill="rgb(233,36,39)" fg:x="735334776" fg:w="4332277"/><text x="30.3043%" y="63.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,332,277 samples, 0.18%)</title><rect x="30.0543%" y="37" width="0.1771%" height="15" fill="rgb(226,3,54)" fg:x="735334776" fg:w="4332277"/><text x="30.3043%" y="47.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (12,954,549 samples, 0.53%)</title><rect x="32.8806%" y="165" width="0.5295%" height="15" fill="rgb(245,192,40)" fg:x="804486120" fg:w="12954549"/><text x="33.1306%" y="175.50"></text></g><g><title>onebrc::process_raw_stations::_{{closure}} (12,954,549 samples, 0.53%)</title><rect x="32.8806%" y="149" width="0.5295%" height="15" fill="rgb(238,167,29)" fg:x="804486120" fg:w="12954549"/><text x="33.1306%" y="159.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (536,157,415 samples, 21.91%)</title><rect x="30.2313%" y="245" width="21.9136%" height="15" fill="rgb(232,182,51)" fg:x="739667053" fg:w="536157415"/><text x="30.4813%" y="255.50">&lt;core::str::iter::Split&lt;P&gt; as core:..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (536,157,415 samples, 21.91%)</title><rect x="30.2313%" y="229" width="21.9136%" height="15" fill="rgb(231,60,39)" fg:x="739667053" fg:w="536157415"/><text x="30.4813%" y="239.50">core::str::iter::SplitInternal&lt;P&gt;::..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (527,539,113 samples, 21.56%)</title><rect x="30.5836%" y="213" width="21.5613%" height="15" fill="rgb(208,69,12)" fg:x="748285355" fg:w="527539113"/><text x="30.8336%" y="223.50">&lt;core::str::pattern::CharPredicate..</text></g><g><title>core::str::pattern::Searcher::next_match (527,539,113 samples, 21.56%)</title><rect x="30.5836%" y="197" width="21.5613%" height="15" fill="rgb(235,93,37)" fg:x="748285355" fg:w="527539113"/><text x="30.8336%" y="207.50">core::str::pattern::Searcher::next..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (471,338,348 samples, 19.26%)</title><rect x="32.8806%" y="181" width="19.2643%" height="15" fill="rgb(213,116,39)" fg:x="804486120" fg:w="471338348"/><text x="33.1306%" y="191.50">&lt;core::str::pattern::MultiChar..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (458,383,799 samples, 18.73%)</title><rect x="33.4101%" y="165" width="18.7348%" height="15" fill="rgb(222,207,29)" fg:x="817440669" fg:w="458383799"/><text x="33.6601%" y="175.50">&lt;core::str::iter::CharIndices..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (449,720,439 samples, 18.38%)</title><rect x="33.7641%" y="149" width="18.3808%" height="15" fill="rgb(206,96,30)" fg:x="826104029" fg:w="449720439"/><text x="34.0141%" y="159.50">&lt;core::str::iter::Chars as co..</text></g><g><title>core::str::validations::next_code_point (449,720,439 samples, 18.38%)</title><rect x="33.7641%" y="133" width="18.3808%" height="15" fill="rgb(218,138,4)" fg:x="826104029" fg:w="449720439"/><text x="34.0141%" y="143.50">core::str::validations::next_..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (125,371,847 samples, 5.12%)</title><rect x="47.0208%" y="117" width="5.1241%" height="15" fill="rgb(250,191,14)" fg:x="1150452621" fg:w="125371847"/><text x="47.2708%" y="127.50">&lt;core:..</text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (38,878,087 samples, 1.59%)</title><rect x="69.1080%" y="197" width="1.5890%" height="15" fill="rgb(239,60,40)" fg:x="1690859614" fg:w="38878087"/><text x="69.3580%" y="207.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (30,255,834 samples, 1.24%)</title><rect x="69.4604%" y="181" width="1.2366%" height="15" fill="rgb(206,27,48)" fg:x="1699481867" fg:w="30255834"/><text x="69.7104%" y="191.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (17,254,919 samples, 0.71%)</title><rect x="76.1761%" y="133" width="0.7052%" height="15" fill="rgb(225,35,8)" fg:x="1863792623" fg:w="17254919"/><text x="76.4261%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (8,613,054 samples, 0.35%)</title><rect x="76.5293%" y="117" width="0.3520%" height="15" fill="rgb(250,213,24)" fg:x="1872434488" fg:w="8613054"/><text x="76.7793%" y="127.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (120,990,335 samples, 4.95%)</title><rect x="75.8225%" y="165" width="4.9451%" height="15" fill="rgb(247,123,22)" fg:x="1855141375" fg:w="120990335"/><text x="76.0725%" y="175.50">core::..</text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (120,990,335 samples, 4.95%)</title><rect x="75.8225%" y="149" width="4.9451%" height="15" fill="rgb(231,138,38)" fg:x="1855141375" fg:w="120990335"/><text x="76.0725%" y="159.50">&lt;[u8] ..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (95,084,168 samples, 3.89%)</title><rect x="76.8813%" y="133" width="3.8862%" height="15" fill="rgb(231,145,46)" fg:x="1881047542" fg:w="95084168"/><text x="77.1313%" y="143.50">core..</text></g><g><title>core::str::&lt;impl str&gt;::parse (704,625,417 samples, 28.80%)</title><rect x="52.1449%" y="245" width="28.7991%" height="15" fill="rgb(251,118,11)" fg:x="1275824468" fg:w="704625417"/><text x="52.3949%" y="255.50">core::str::&lt;impl str&gt;::parse</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (704,625,417 samples, 28.80%)</title><rect x="52.1449%" y="229" width="28.7991%" height="15" fill="rgb(217,147,25)" fg:x="1275824468" fg:w="704625417"/><text x="52.3949%" y="239.50">core::num::dec2flt::&lt;impl core::str::traits::F..</text></g><g><title>core::num::dec2flt::dec2flt (557,675,334 samples, 22.79%)</title><rect x="58.1510%" y="213" width="22.7930%" height="15" fill="rgb(247,81,37)" fg:x="1422774551" fg:w="557675334"/><text x="58.4010%" y="223.50">core::num::dec2flt::dec2flt</text></g><g><title>core::num::dec2flt::parse::parse_number (250,712,184 samples, 10.25%)</title><rect x="70.6970%" y="197" width="10.2470%" height="15" fill="rgb(209,12,38)" fg:x="1729737701" fg:w="250712184"/><text x="70.9470%" y="207.50">core::num::dec2..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (151,256,044 samples, 6.18%)</title><rect x="74.7620%" y="181" width="6.1821%" height="15" fill="rgb(227,1,9)" fg:x="1829193841" fg:w="151256044"/><text x="75.0120%" y="191.50">core::nu..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (4,318,175 samples, 0.18%)</title><rect x="80.7675%" y="165" width="0.1765%" height="15" fill="rgb(248,47,43)" fg:x="1976131710" fg:w="4318175"/><text x="81.0175%" y="175.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (12,954,513 samples, 0.53%)</title><rect x="80.9440%" y="245" width="0.5295%" height="15" fill="rgb(221,10,30)" fg:x="1980449885" fg:w="12954513"/><text x="81.1940%" y="255.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (12,954,513 samples, 0.53%)</title><rect x="80.9440%" y="229" width="0.5295%" height="15" fill="rgb(210,229,1)" fg:x="1980449885" fg:w="12954513"/><text x="81.1940%" y="239.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (12,954,513 samples, 0.53%)</title><rect x="80.9440%" y="213" width="0.5295%" height="15" fill="rgb(222,148,37)" fg:x="1980449885" fg:w="12954513"/><text x="81.1940%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (12,954,513 samples, 0.53%)</title><rect x="80.9440%" y="197" width="0.5295%" height="15" fill="rgb(234,67,33)" fg:x="1980449885" fg:w="12954513"/><text x="81.1940%" y="207.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (12,954,513 samples, 0.53%)</title><rect x="80.9440%" y="181" width="0.5295%" height="15" fill="rgb(247,98,35)" fg:x="1980449885" fg:w="12954513"/><text x="81.1940%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (12,954,513 samples, 0.53%)</title><rect x="80.9440%" y="165" width="0.5295%" height="15" fill="rgb(247,138,52)" fg:x="1980449885" fg:w="12954513"/><text x="81.1940%" y="175.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (12,954,513 samples, 0.53%)</title><rect x="80.9440%" y="149" width="0.5295%" height="15" fill="rgb(213,79,30)" fg:x="1980449885" fg:w="12954513"/><text x="81.1940%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (12,954,513 samples, 0.53%)</title><rect x="80.9440%" y="133" width="0.5295%" height="15" fill="rgb(246,177,23)" fg:x="1980449885" fg:w="12954513"/><text x="81.1940%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21,641,553 samples, 0.88%)</title><rect x="82.8880%" y="149" width="0.8845%" height="15" fill="rgb(230,62,27)" fg:x="2028013849" fg:w="21641553"/><text x="83.1380%" y="159.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (4,328,281 samples, 0.18%)</title><rect x="83.7726%" y="133" width="0.1769%" height="15" fill="rgb(216,154,8)" fg:x="2049655402" fg:w="4328281"/><text x="84.0226%" y="143.50"></text></g><g><title>fxhash::hash (64,878,126 samples, 2.65%)</title><rect x="81.4735%" y="245" width="2.6517%" height="15" fill="rgb(244,35,45)" fg:x="1993404398" fg:w="64878126"/><text x="81.7235%" y="255.50">fx..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (64,878,126 samples, 2.65%)</title><rect x="81.4735%" y="229" width="2.6517%" height="15" fill="rgb(251,115,12)" fg:x="1993404398" fg:w="64878126"/><text x="81.7235%" y="239.50">co..</text></g><g><title>core::hash::Hasher::write_str (64,878,126 samples, 2.65%)</title><rect x="81.4735%" y="213" width="2.6517%" height="15" fill="rgb(240,54,50)" fg:x="1993404398" fg:w="64878126"/><text x="81.7235%" y="223.50">co..</text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (64,878,126 samples, 2.65%)</title><rect x="81.4735%" y="197" width="2.6517%" height="15" fill="rgb(233,84,52)" fg:x="1993404398" fg:w="64878126"/><text x="81.7235%" y="207.50">&lt;f..</text></g><g><title>fxhash::write (64,878,126 samples, 2.65%)</title><rect x="81.4735%" y="181" width="2.6517%" height="15" fill="rgb(207,117,47)" fg:x="1993404398" fg:w="64878126"/><text x="81.7235%" y="191.50">fx..</text></g><g><title>fxhash::write64 (64,878,126 samples, 2.65%)</title><rect x="81.4735%" y="165" width="2.6517%" height="15" fill="rgb(249,43,39)" fg:x="1993404398" fg:w="64878126"/><text x="81.7235%" y="175.50">fx..</text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (8,627,122 samples, 0.35%)</title><rect x="83.7726%" y="149" width="0.3526%" height="15" fill="rgb(209,38,44)" fg:x="2049655402" fg:w="8627122"/><text x="84.0226%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,298,841 samples, 0.18%)</title><rect x="83.9495%" y="133" width="0.1757%" height="15" fill="rgb(236,212,23)" fg:x="2053983683" fg:w="4298841"/><text x="84.1995%" y="143.50"></text></g><g><title>onebrc::Station::add_measurement (95,155,104 samples, 3.89%)</title><rect x="84.1252%" y="245" width="3.8891%" height="15" fill="rgb(242,79,21)" fg:x="2058282524" fg:w="95155104"/><text x="84.3752%" y="255.50">oneb..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (21,590,467 samples, 0.88%)</title><rect x="88.7220%" y="149" width="0.8824%" height="15" fill="rgb(211,96,35)" fg:x="2170751770" fg:w="21590467"/><text x="88.9720%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (21,590,467 samples, 0.88%)</title><rect x="88.7220%" y="133" width="0.8824%" height="15" fill="rgb(253,215,40)" fg:x="2170751770" fg:w="21590467"/><text x="88.9720%" y="143.50"></text></g><g><title>core::intrinsics::likely (64,809,336 samples, 2.65%)</title><rect x="89.6044%" y="149" width="2.6489%" height="15" fill="rgb(211,81,21)" fg:x="2192342237" fg:w="64809336"/><text x="89.8544%" y="159.50">co..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (8,660,171 samples, 0.35%)</title><rect x="92.2533%" y="133" width="0.3540%" height="15" fill="rgb(208,190,38)" fg:x="2257151573" fg:w="8660171"/><text x="92.5033%" y="143.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (8,660,171 samples, 0.35%)</title><rect x="92.2533%" y="117" width="0.3540%" height="15" fill="rgb(235,213,38)" fg:x="2257151573" fg:w="8660171"/><text x="92.5033%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,660,171 samples, 0.35%)</title><rect x="92.2533%" y="101" width="0.3540%" height="15" fill="rgb(237,122,38)" fg:x="2257151573" fg:w="8660171"/><text x="92.5033%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (8,660,171 samples, 0.35%)</title><rect x="92.2533%" y="85" width="0.3540%" height="15" fill="rgb(244,218,35)" fg:x="2257151573" fg:w="8660171"/><text x="92.5033%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (30,275,716 samples, 1.24%)</title><rect x="92.2533%" y="149" width="1.2374%" height="15" fill="rgb(240,68,47)" fg:x="2257151573" fg:w="30275716"/><text x="92.5033%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (21,615,545 samples, 0.88%)</title><rect x="92.6072%" y="133" width="0.8835%" height="15" fill="rgb(210,16,53)" fg:x="2265811744" fg:w="21615545"/><text x="92.8572%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (21,615,545 samples, 0.88%)</title><rect x="92.6072%" y="117" width="0.8835%" height="15" fill="rgb(235,124,12)" fg:x="2265811744" fg:w="21615545"/><text x="92.8572%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (21,615,545 samples, 0.88%)</title><rect x="92.6072%" y="101" width="0.8835%" height="15" fill="rgb(224,169,11)" fg:x="2265811744" fg:w="21615545"/><text x="92.8572%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (4,329,713 samples, 0.18%)</title><rect x="93.4907%" y="149" width="0.1770%" height="15" fill="rgb(250,166,2)" fg:x="2287427289" fg:w="4329713"/><text x="93.7407%" y="159.50"></text></g><g><title>hashbrown::raw::h2 (60,542,890 samples, 2.47%)</title><rect x="93.6676%" y="149" width="2.4745%" height="15" fill="rgb(242,216,29)" fg:x="2291757002" fg:w="60542890"/><text x="93.9176%" y="159.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8,667,356 samples, 0.35%)</title><rect x="96.1421%" y="149" width="0.3542%" height="15" fill="rgb(230,116,27)" fg:x="2352299892" fg:w="8667356"/><text x="96.3921%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8,667,356 samples, 0.35%)</title><rect x="96.1421%" y="133" width="0.3542%" height="15" fill="rgb(228,99,48)" fg:x="2352299892" fg:w="8667356"/><text x="96.3921%" y="143.50"></text></g><g><title>onebrc::process_raw_stations (2,373,478,914 samples, 97.01%)</title><rect x="0.0186%" y="261" width="97.0077%" height="15" fill="rgb(253,11,6)" fg:x="456144" fg:w="2373478914"/><text x="0.2686%" y="271.50">onebrc::process_raw_stations</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (220,497,430 samples, 9.01%)</title><rect x="88.0143%" y="245" width="9.0121%" height="15" fill="rgb(247,143,39)" fg:x="2153437628" fg:w="220497430"/><text x="88.2643%" y="255.50">std::collecti..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (220,497,430 samples, 9.01%)</title><rect x="88.0143%" y="229" width="9.0121%" height="15" fill="rgb(236,97,10)" fg:x="2153437628" fg:w="220497430"/><text x="88.2643%" y="239.50">hashbrown::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (220,497,430 samples, 9.01%)</title><rect x="88.0143%" y="213" width="9.0121%" height="15" fill="rgb(233,208,19)" fg:x="2153437628" fg:w="220497430"/><text x="88.2643%" y="223.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (216,174,144 samples, 8.84%)</title><rect x="88.1910%" y="197" width="8.8354%" height="15" fill="rgb(216,164,2)" fg:x="2157760914" fg:w="216174144"/><text x="88.4410%" y="207.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (216,174,144 samples, 8.84%)</title><rect x="88.1910%" y="181" width="8.8354%" height="15" fill="rgb(220,129,5)" fg:x="2157760914" fg:w="216174144"/><text x="88.4410%" y="191.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (216,174,144 samples, 8.84%)</title><rect x="88.1910%" y="165" width="8.8354%" height="15" fill="rgb(242,17,10)" fg:x="2157760914" fg:w="216174144"/><text x="88.4410%" y="175.50">hashbrown::r..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (12,967,810 samples, 0.53%)</title><rect x="96.4964%" y="149" width="0.5300%" height="15" fill="rgb(242,107,0)" fg:x="2360967248" fg:w="12967810"/><text x="96.7464%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (12,967,810 samples, 0.53%)</title><rect x="96.4964%" y="133" width="0.5300%" height="15" fill="rgb(251,28,31)" fg:x="2360967248" fg:w="12967810"/><text x="96.7464%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12,967,810 samples, 0.53%)</title><rect x="96.4964%" y="117" width="0.5300%" height="15" fill="rgb(233,223,10)" fg:x="2360967248" fg:w="12967810"/><text x="96.7464%" y="127.50"></text></g><g><title>all (2,446,690,573 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="2446690573"/><text x="0.2500%" y="575.50"></text></g><g><title>onebrc (2,446,690,573 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="2446690573"/><text x="0.2500%" y="559.50">onebrc</text></g><g><title>_start (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="533" width="99.9814%" height="15" fill="rgb(244,5,23)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="543.50">_start</text></g><g><title>__libc_start_main (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="517" width="99.9814%" height="15" fill="rgb(226,81,46)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="527.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="501" width="99.9814%" height="15" fill="rgb(247,70,30)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="511.50">[libc.so.6]</text></g><g><title>main (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="485" width="99.9814%" height="15" fill="rgb(212,68,19)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="469" width="99.9814%" height="15" fill="rgb(240,187,13)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="453" width="99.9814%" height="15" fill="rgb(223,113,26)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="437" width="99.9814%" height="15" fill="rgb(206,192,2)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="421" width="99.9814%" height="15" fill="rgb(241,108,4)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="431.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="405" width="99.9814%" height="15" fill="rgb(247,173,49)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="415.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="389" width="99.9814%" height="15" fill="rgb(224,114,35)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="399.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="373" width="99.9814%" height="15" fill="rgb(245,159,27)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="383.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="357" width="99.9814%" height="15" fill="rgb(245,172,44)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="367.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="341" width="99.9814%" height="15" fill="rgb(236,23,11)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="351.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="325" width="99.9814%" height="15" fill="rgb(205,117,38)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="335.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="309" width="99.9814%" height="15" fill="rgb(237,72,25)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="319.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="293" width="99.9814%" height="15" fill="rgb(244,70,9)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="303.50">core::ops::function::FnOnce::call_once</text></g><g><title>onebrc::main (2,446,234,429 samples, 99.98%)</title><rect x="0.0186%" y="277" width="99.9814%" height="15" fill="rgb(217,125,39)" fg:x="456144" fg:w="2446234429"/><text x="0.2686%" y="287.50">onebrc::main</text></g><g><title>std::fs::read_to_string (72,755,515 samples, 2.97%)</title><rect x="97.0264%" y="261" width="2.9736%" height="15" fill="rgb(235,36,10)" fg:x="2373935058" fg:w="72755515"/><text x="97.2764%" y="271.50">std..</text></g><g><title>std::fs::read_to_string::inner (72,755,515 samples, 2.97%)</title><rect x="97.0264%" y="245" width="2.9736%" height="15" fill="rgb(251,123,47)" fg:x="2373935058" fg:w="72755515"/><text x="97.2764%" y="255.50">std..</text></g><g><title>std::io::default_read_to_string (72,755,515 samples, 2.97%)</title><rect x="97.0264%" y="229" width="2.9736%" height="15" fill="rgb(221,13,13)" fg:x="2373935058" fg:w="72755515"/><text x="97.2764%" y="239.50">std..</text></g><g><title>std::io::append_to_string (72,755,515 samples, 2.97%)</title><rect x="97.0264%" y="213" width="2.9736%" height="15" fill="rgb(238,131,9)" fg:x="2373935058" fg:w="72755515"/><text x="97.2764%" y="223.50">std..</text></g><g><title>core::str::converts::from_utf8 (72,755,515 samples, 2.97%)</title><rect x="97.0264%" y="197" width="2.9736%" height="15" fill="rgb(211,50,8)" fg:x="2373935058" fg:w="72755515"/><text x="97.2764%" y="207.50">cor..</text></g><g><title>core::str::validations::run_utf8_validation (72,755,515 samples, 2.97%)</title><rect x="97.0264%" y="181" width="2.9736%" height="15" fill="rgb(245,182,24)" fg:x="2373935058" fg:w="72755515"/><text x="97.2764%" y="191.50">cor..</text></g></svg></svg>