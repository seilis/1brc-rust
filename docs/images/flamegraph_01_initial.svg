<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="4169635677"><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8,542,686 samples, 0.20%)</title><rect x="0.2054%" y="789" width="0.2049%" height="15" fill="rgb(227,0,7)" fg:x="8564372" fg:w="8542686"/><text x="0.4554%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,320,152 samples, 0.10%)</title><rect x="0.3067%" y="773" width="0.1036%" height="15" fill="rgb(217,0,24)" fg:x="12786906" fg:w="4320152"/><text x="0.5567%" y="783.50"></text></g><g><title>core::cmp::min (4,073,290 samples, 0.10%)</title><rect x="0.4103%" y="789" width="0.0977%" height="15" fill="rgb(221,193,54)" fg:x="17107058" fg:w="4073290"/><text x="0.6603%" y="799.50"></text></g><g><title>core::cmp::Ord::min (4,073,290 samples, 0.10%)</title><rect x="0.4103%" y="773" width="0.0977%" height="15" fill="rgb(248,212,6)" fg:x="17107058" fg:w="4073290"/><text x="0.6603%" y="783.50"></text></g><g><title>core::cmp::min_by (4,073,290 samples, 0.10%)</title><rect x="0.4103%" y="757" width="0.0977%" height="15" fill="rgb(208,68,35)" fg:x="17107058" fg:w="4073290"/><text x="0.6603%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (55,074,855 samples, 1.32%)</title><rect x="0.0000%" y="805" width="1.3209%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="55074855"/><text x="0.2500%" y="815.50"></text></g><g><title>core::hash::sip::u8to64_le (33,894,507 samples, 0.81%)</title><rect x="0.5080%" y="789" width="0.8129%" height="15" fill="rgb(207,160,47)" fg:x="21180348" fg:w="33894507"/><text x="0.7580%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,293,248 samples, 0.10%)</title><rect x="1.2179%" y="773" width="0.1030%" height="15" fill="rgb(228,23,34)" fg:x="50781607" fg:w="4293248"/><text x="1.4679%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12,633,822 samples, 0.30%)</title><rect x="1.3209%" y="789" width="0.3030%" height="15" fill="rgb(218,30,26)" fg:x="55074855" fg:w="12633822"/><text x="1.5709%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,038,858 samples, 0.10%)</title><rect x="1.5270%" y="773" width="0.0969%" height="15" fill="rgb(220,122,19)" fg:x="63669819" fg:w="4038858"/><text x="1.7770%" y="783.50"></text></g><g><title>[libc.so.6] (29,974,781 samples, 0.72%)</title><rect x="1.6239%" y="789" width="0.7189%" height="15" fill="rgb(250,228,42)" fg:x="67708677" fg:w="29974781"/><text x="1.8739%" y="799.50"></text></g><g><title>__rdl_alloc (4,019,952 samples, 0.10%)</title><rect x="2.3427%" y="789" width="0.0964%" height="15" fill="rgb(240,193,28)" fg:x="97683458" fg:w="4019952"/><text x="2.5927%" y="799.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4,019,952 samples, 0.10%)</title><rect x="2.3427%" y="773" width="0.0964%" height="15" fill="rgb(216,20,37)" fg:x="97683458" fg:w="4019952"/><text x="2.5927%" y="783.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,602,116 samples, 0.09%)</title><rect x="2.4391%" y="773" width="0.0864%" height="15" fill="rgb(206,188,39)" fg:x="101703410" fg:w="3602116"/><text x="2.6891%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,602,116 samples, 0.09%)</title><rect x="2.4391%" y="757" width="0.0864%" height="15" fill="rgb(217,207,13)" fg:x="101703410" fg:w="3602116"/><text x="2.6891%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,602,116 samples, 0.09%)</title><rect x="2.4391%" y="741" width="0.0864%" height="15" fill="rgb(231,73,38)" fg:x="101703410" fg:w="3602116"/><text x="2.6891%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,602,116 samples, 0.09%)</title><rect x="2.4391%" y="725" width="0.0864%" height="15" fill="rgb(225,20,46)" fg:x="101703410" fg:w="3602116"/><text x="2.6891%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,602,116 samples, 0.09%)</title><rect x="2.4391%" y="709" width="0.0864%" height="15" fill="rgb(210,31,41)" fg:x="101703410" fg:w="3602116"/><text x="2.6891%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7,815,565 samples, 0.19%)</title><rect x="2.4391%" y="789" width="0.1874%" height="15" fill="rgb(221,200,47)" fg:x="101703410" fg:w="7815565"/><text x="2.6891%" y="799.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4,213,449 samples, 0.10%)</title><rect x="2.5255%" y="773" width="0.1011%" height="15" fill="rgb(226,26,5)" fg:x="105305526" fg:w="4213449"/><text x="2.7755%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4,192,087 samples, 0.10%)</title><rect x="3.1384%" y="773" width="0.1005%" height="15" fill="rgb(249,33,26)" fg:x="130859927" fg:w="4192087"/><text x="3.3884%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,192,087 samples, 0.10%)</title><rect x="3.1384%" y="757" width="0.1005%" height="15" fill="rgb(235,183,28)" fg:x="130859927" fg:w="4192087"/><text x="3.3884%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,192,087 samples, 0.10%)</title><rect x="3.1384%" y="741" width="0.1005%" height="15" fill="rgb(221,5,38)" fg:x="130859927" fg:w="4192087"/><text x="3.3884%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,192,087 samples, 0.10%)</title><rect x="3.1384%" y="725" width="0.1005%" height="15" fill="rgb(247,18,42)" fg:x="130859927" fg:w="4192087"/><text x="3.3884%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,192,087 samples, 0.10%)</title><rect x="3.1384%" y="709" width="0.1005%" height="15" fill="rgb(241,131,45)" fg:x="130859927" fg:w="4192087"/><text x="3.3884%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,192,087 samples, 0.10%)</title><rect x="3.1384%" y="693" width="0.1005%" height="15" fill="rgb(249,31,29)" fg:x="130859927" fg:w="4192087"/><text x="3.3884%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (4,192,087 samples, 0.10%)</title><rect x="3.1384%" y="677" width="0.1005%" height="15" fill="rgb(225,111,53)" fg:x="130859927" fg:w="4192087"/><text x="3.3884%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3,886,118 samples, 0.09%)</title><rect x="3.3362%" y="741" width="0.0932%" height="15" fill="rgb(238,160,17)" fg:x="139109042" fg:w="3886118"/><text x="3.5862%" y="751.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3,886,118 samples, 0.09%)</title><rect x="3.3362%" y="725" width="0.0932%" height="15" fill="rgb(214,148,48)" fg:x="139109042" fg:w="3886118"/><text x="3.5862%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (12,418,743 samples, 0.30%)</title><rect x="3.4294%" y="741" width="0.2978%" height="15" fill="rgb(232,36,49)" fg:x="142995160" fg:w="12418743"/><text x="3.6794%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (12,418,743 samples, 0.30%)</title><rect x="3.4294%" y="725" width="0.2978%" height="15" fill="rgb(209,103,24)" fg:x="142995160" fg:w="12418743"/><text x="3.6794%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (12,418,743 samples, 0.30%)</title><rect x="3.4294%" y="709" width="0.2978%" height="15" fill="rgb(229,88,8)" fg:x="142995160" fg:w="12418743"/><text x="3.6794%" y="719.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (12,418,743 samples, 0.30%)</title><rect x="3.4294%" y="693" width="0.2978%" height="15" fill="rgb(213,181,19)" fg:x="142995160" fg:w="12418743"/><text x="3.6794%" y="703.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (12,418,743 samples, 0.30%)</title><rect x="3.4294%" y="677" width="0.2978%" height="15" fill="rgb(254,191,54)" fg:x="142995160" fg:w="12418743"/><text x="3.6794%" y="687.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12,418,743 samples, 0.30%)</title><rect x="3.4294%" y="661" width="0.2978%" height="15" fill="rgb(241,83,37)" fg:x="142995160" fg:w="12418743"/><text x="3.6794%" y="671.50"></text></g><g><title>hashbrown::raw::h2 (4,185,069 samples, 0.10%)</title><rect x="3.7273%" y="741" width="0.1004%" height="15" fill="rgb(233,36,39)" fg:x="155413903" fg:w="4185069"/><text x="3.9773%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (62,462,032 samples, 1.50%)</title><rect x="2.6266%" y="789" width="1.4980%" height="15" fill="rgb(226,3,54)" fg:x="109518975" fg:w="62462032"/><text x="2.8766%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (36,928,993 samples, 0.89%)</title><rect x="3.2389%" y="773" width="0.8857%" height="15" fill="rgb(245,192,40)" fg:x="135052014" fg:w="36928993"/><text x="3.4889%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (36,928,993 samples, 0.89%)</title><rect x="3.2389%" y="757" width="0.8857%" height="15" fill="rgb(238,167,29)" fg:x="135052014" fg:w="36928993"/><text x="3.4889%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (12,382,035 samples, 0.30%)</title><rect x="3.8276%" y="741" width="0.2970%" height="15" fill="rgb(232,182,51)" fg:x="159598972" fg:w="12382035"/><text x="4.0776%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12,382,035 samples, 0.30%)</title><rect x="3.8276%" y="725" width="0.2970%" height="15" fill="rgb(231,60,39)" fg:x="159598972" fg:w="12382035"/><text x="4.0776%" y="735.50"></text></g><g><title>malloc (3,878,222 samples, 0.09%)</title><rect x="4.1246%" y="789" width="0.0930%" height="15" fill="rgb(208,69,12)" fg:x="171981007" fg:w="3878222"/><text x="4.3746%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (8,652,857 samples, 0.21%)</title><rect x="4.4237%" y="677" width="0.2075%" height="15" fill="rgb(235,93,37)" fg:x="184451890" fg:w="8652857"/><text x="4.6737%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (8,652,857 samples, 0.21%)</title><rect x="4.4237%" y="661" width="0.2075%" height="15" fill="rgb(213,116,39)" fg:x="184451890" fg:w="8652857"/><text x="4.6737%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (8,652,857 samples, 0.21%)</title><rect x="4.4237%" y="645" width="0.2075%" height="15" fill="rgb(222,207,29)" fg:x="184451890" fg:w="8652857"/><text x="4.6737%" y="655.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (20,869,693 samples, 0.50%)</title><rect x="4.4237%" y="725" width="0.5005%" height="15" fill="rgb(206,96,30)" fg:x="184451890" fg:w="20869693"/><text x="4.6737%" y="735.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (20,869,693 samples, 0.50%)</title><rect x="4.4237%" y="709" width="0.5005%" height="15" fill="rgb(218,138,4)" fg:x="184451890" fg:w="20869693"/><text x="4.6737%" y="719.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (20,869,693 samples, 0.50%)</title><rect x="4.4237%" y="693" width="0.5005%" height="15" fill="rgb(250,191,14)" fg:x="184451890" fg:w="20869693"/><text x="4.6737%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (12,216,836 samples, 0.29%)</title><rect x="4.6312%" y="677" width="0.2930%" height="15" fill="rgb(239,60,40)" fg:x="193104747" fg:w="12216836"/><text x="4.8812%" y="687.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (25,192,474 samples, 0.60%)</title><rect x="4.4237%" y="757" width="0.6042%" height="15" fill="rgb(206,27,48)" fg:x="184451890" fg:w="25192474"/><text x="4.6737%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,192,474 samples, 0.60%)</title><rect x="4.4237%" y="741" width="0.6042%" height="15" fill="rgb(225,35,8)" fg:x="184451890" fg:w="25192474"/><text x="4.6737%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4,322,781 samples, 0.10%)</title><rect x="4.9242%" y="725" width="0.1037%" height="15" fill="rgb(250,213,24)" fg:x="205321583" fg:w="4322781"/><text x="5.1742%" y="735.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,322,781 samples, 0.10%)</title><rect x="4.9242%" y="709" width="0.1037%" height="15" fill="rgb(247,123,22)" fg:x="205321583" fg:w="4322781"/><text x="5.1742%" y="719.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (4,322,781 samples, 0.10%)</title><rect x="4.9242%" y="693" width="0.1037%" height="15" fill="rgb(231,138,38)" fg:x="205321583" fg:w="4322781"/><text x="5.1742%" y="703.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (4,322,781 samples, 0.10%)</title><rect x="4.9242%" y="677" width="0.1037%" height="15" fill="rgb(231,145,46)" fg:x="205321583" fg:w="4322781"/><text x="5.1742%" y="687.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,322,781 samples, 0.10%)</title><rect x="4.9242%" y="661" width="0.1037%" height="15" fill="rgb(251,118,11)" fg:x="205321583" fg:w="4322781"/><text x="5.1742%" y="671.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,322,781 samples, 0.10%)</title><rect x="4.9242%" y="645" width="0.1037%" height="15" fill="rgb(217,147,25)" fg:x="205321583" fg:w="4322781"/><text x="5.1742%" y="655.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (4,322,781 samples, 0.10%)</title><rect x="4.9242%" y="629" width="0.1037%" height="15" fill="rgb(247,81,37)" fg:x="205321583" fg:w="4322781"/><text x="5.1742%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (4,322,781 samples, 0.10%)</title><rect x="4.9242%" y="613" width="0.1037%" height="15" fill="rgb(209,12,38)" fg:x="205321583" fg:w="4322781"/><text x="5.1742%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (4,322,781 samples, 0.10%)</title><rect x="4.9242%" y="597" width="0.1037%" height="15" fill="rgb(227,1,9)" fg:x="205321583" fg:w="4322781"/><text x="5.1742%" y="607.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (69,937,129 samples, 1.68%)</title><rect x="5.0279%" y="757" width="1.6773%" height="15" fill="rgb(248,47,43)" fg:x="209644364" fg:w="69937129"/><text x="5.2779%" y="767.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (69,937,129 samples, 1.68%)</title><rect x="5.0279%" y="741" width="1.6773%" height="15" fill="rgb(221,10,30)" fg:x="209644364" fg:w="69937129"/><text x="5.2779%" y="751.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (69,937,129 samples, 1.68%)</title><rect x="5.0279%" y="725" width="1.6773%" height="15" fill="rgb(210,229,1)" fg:x="209644364" fg:w="69937129"/><text x="5.2779%" y="735.50"></text></g><g><title>core::str::pattern::Searcher::next_match (69,937,129 samples, 1.68%)</title><rect x="5.0279%" y="709" width="1.6773%" height="15" fill="rgb(222,148,37)" fg:x="209644364" fg:w="69937129"/><text x="5.2779%" y="719.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (69,937,129 samples, 1.68%)</title><rect x="5.0279%" y="693" width="1.6773%" height="15" fill="rgb(234,67,33)" fg:x="209644364" fg:w="69937129"/><text x="5.2779%" y="703.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (69,937,129 samples, 1.68%)</title><rect x="5.0279%" y="677" width="1.6773%" height="15" fill="rgb(247,98,35)" fg:x="209644364" fg:w="69937129"/><text x="5.2779%" y="687.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (52,764,196 samples, 1.27%)</title><rect x="5.4397%" y="661" width="1.2654%" height="15" fill="rgb(247,138,52)" fg:x="226817297" fg:w="52764196"/><text x="5.6897%" y="671.50"></text></g><g><title>core::str::validations::next_code_point (52,764,196 samples, 1.27%)</title><rect x="5.4397%" y="645" width="1.2654%" height="15" fill="rgb(213,79,30)" fg:x="226817297" fg:w="52764196"/><text x="5.6897%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19,792,538 samples, 0.47%)</title><rect x="6.2305%" y="629" width="0.4747%" height="15" fill="rgb(246,177,23)" fg:x="259788955" fg:w="19792538"/><text x="6.4805%" y="639.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (16,076,619 samples, 0.39%)</title><rect x="6.3196%" y="613" width="0.3856%" height="15" fill="rgb(230,62,27)" fg:x="263504874" fg:w="16076619"/><text x="6.5696%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,151,847 samples, 0.10%)</title><rect x="6.7052%" y="629" width="0.0996%" height="15" fill="rgb(216,154,8)" fg:x="279581493" fg:w="4151847"/><text x="6.9552%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,151,847 samples, 0.10%)</title><rect x="6.7052%" y="613" width="0.0996%" height="15" fill="rgb(244,35,45)" fg:x="279581493" fg:w="4151847"/><text x="6.9552%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,151,847 samples, 0.10%)</title><rect x="6.7052%" y="597" width="0.0996%" height="15" fill="rgb(251,115,12)" fg:x="279581493" fg:w="4151847"/><text x="6.9552%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,151,847 samples, 0.10%)</title><rect x="6.7052%" y="581" width="0.0996%" height="15" fill="rgb(240,54,50)" fg:x="279581493" fg:w="4151847"/><text x="6.9552%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,151,847 samples, 0.10%)</title><rect x="6.7052%" y="565" width="0.0996%" height="15" fill="rgb(233,84,52)" fg:x="279581493" fg:w="4151847"/><text x="6.9552%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,151,847 samples, 0.10%)</title><rect x="6.7052%" y="549" width="0.0996%" height="15" fill="rgb(207,117,47)" fg:x="279581493" fg:w="4151847"/><text x="6.9552%" y="559.50"></text></g><g><title>alloc::alloc::alloc (4,151,847 samples, 0.10%)</title><rect x="6.7052%" y="533" width="0.0996%" height="15" fill="rgb(249,43,39)" fg:x="279581493" fg:w="4151847"/><text x="6.9552%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (16,611,751 samples, 0.40%)</title><rect x="6.7052%" y="709" width="0.3984%" height="15" fill="rgb(209,38,44)" fg:x="279581493" fg:w="16611751"/><text x="6.9552%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16,611,751 samples, 0.40%)</title><rect x="6.7052%" y="693" width="0.3984%" height="15" fill="rgb(236,212,23)" fg:x="279581493" fg:w="16611751"/><text x="6.9552%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16,611,751 samples, 0.40%)</title><rect x="6.7052%" y="677" width="0.3984%" height="15" fill="rgb(242,79,21)" fg:x="279581493" fg:w="16611751"/><text x="6.9552%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (16,611,751 samples, 0.40%)</title><rect x="6.7052%" y="661" width="0.3984%" height="15" fill="rgb(211,96,35)" fg:x="279581493" fg:w="16611751"/><text x="6.9552%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16,611,751 samples, 0.40%)</title><rect x="6.7052%" y="645" width="0.3984%" height="15" fill="rgb(253,215,40)" fg:x="279581493" fg:w="16611751"/><text x="6.9552%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12,459,904 samples, 0.30%)</title><rect x="6.8048%" y="629" width="0.2988%" height="15" fill="rgb(211,81,21)" fg:x="283733340" fg:w="12459904"/><text x="7.0548%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12,459,904 samples, 0.30%)</title><rect x="6.8048%" y="613" width="0.2988%" height="15" fill="rgb(208,190,38)" fg:x="283733340" fg:w="12459904"/><text x="7.0548%" y="623.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (24,851,820 samples, 0.60%)</title><rect x="6.7052%" y="757" width="0.5960%" height="15" fill="rgb(235,213,38)" fg:x="279581493" fg:w="24851820"/><text x="6.9552%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (24,851,820 samples, 0.60%)</title><rect x="6.7052%" y="741" width="0.5960%" height="15" fill="rgb(237,122,38)" fg:x="279581493" fg:w="24851820"/><text x="6.9552%" y="751.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (24,851,820 samples, 0.60%)</title><rect x="6.7052%" y="725" width="0.5960%" height="15" fill="rgb(244,218,35)" fg:x="279581493" fg:w="24851820"/><text x="6.9552%" y="735.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (8,240,069 samples, 0.20%)</title><rect x="7.1036%" y="709" width="0.1976%" height="15" fill="rgb(240,68,47)" fg:x="296193244" fg:w="8240069"/><text x="7.3536%" y="719.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (8,496,607 samples, 0.20%)</title><rect x="7.3012%" y="757" width="0.2038%" height="15" fill="rgb(210,16,53)" fg:x="304433313" fg:w="8496607"/><text x="7.5512%" y="767.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (4,313,404 samples, 0.10%)</title><rect x="7.5050%" y="757" width="0.1034%" height="15" fill="rgb(235,124,12)" fg:x="312929920" fg:w="4313404"/><text x="7.7550%" y="767.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (4,313,404 samples, 0.10%)</title><rect x="7.5050%" y="741" width="0.1034%" height="15" fill="rgb(224,169,11)" fg:x="312929920" fg:w="4313404"/><text x="7.7550%" y="751.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (4,313,404 samples, 0.10%)</title><rect x="7.5050%" y="725" width="0.1034%" height="15" fill="rgb(250,166,2)" fg:x="312929920" fg:w="4313404"/><text x="7.7550%" y="735.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (4,313,404 samples, 0.10%)</title><rect x="7.5050%" y="709" width="0.1034%" height="15" fill="rgb(242,216,29)" fg:x="312929920" fg:w="4313404"/><text x="7.7550%" y="719.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (4,313,404 samples, 0.10%)</title><rect x="7.5050%" y="693" width="0.1034%" height="15" fill="rgb(230,116,27)" fg:x="312929920" fg:w="4313404"/><text x="7.7550%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (4,313,404 samples, 0.10%)</title><rect x="7.5050%" y="677" width="0.1034%" height="15" fill="rgb(228,99,48)" fg:x="312929920" fg:w="4313404"/><text x="7.7550%" y="687.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (4,313,404 samples, 0.10%)</title><rect x="7.5050%" y="661" width="0.1034%" height="15" fill="rgb(253,11,6)" fg:x="312929920" fg:w="4313404"/><text x="7.7550%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4,313,404 samples, 0.10%)</title><rect x="7.5050%" y="645" width="0.1034%" height="15" fill="rgb(247,143,39)" fg:x="312929920" fg:w="4313404"/><text x="7.7550%" y="655.50"></text></g><g><title>onebrc::Station::add_measurement (4,235,996 samples, 0.10%)</title><rect x="7.6084%" y="757" width="0.1016%" height="15" fill="rgb(236,97,10)" fg:x="317243324" fg:w="4235996"/><text x="7.8584%" y="767.50"></text></g><g><title>[[stack]] (270,687,029 samples, 6.49%)</title><rect x="1.3209%" y="805" width="6.4919%" height="15" fill="rgb(233,208,19)" fg:x="55074855" fg:w="270687029"/><text x="1.5709%" y="815.50">[[stack]]</text></g><g><title>onebrc::main (149,902,655 samples, 3.60%)</title><rect x="4.2176%" y="789" width="3.5951%" height="15" fill="rgb(216,164,2)" fg:x="175859229" fg:w="149902655"/><text x="4.4676%" y="799.50">oneb..</text></g><g><title>onebrc::process_raw_stations (149,902,655 samples, 3.60%)</title><rect x="4.2176%" y="773" width="3.5951%" height="15" fill="rgb(220,129,5)" fg:x="175859229" fg:w="149902655"/><text x="4.4676%" y="783.50">oneb..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4,282,564 samples, 0.10%)</title><rect x="7.7100%" y="757" width="0.1027%" height="15" fill="rgb(242,17,10)" fg:x="321479320" fg:w="4282564"/><text x="7.9600%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,395,810 samples, 0.20%)</title><rect x="7.8127%" y="789" width="0.2014%" height="15" fill="rgb(242,107,0)" fg:x="325761884" fg:w="8395810"/><text x="8.0627%" y="799.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (12,456,632 samples, 0.30%)</title><rect x="8.6960%" y="741" width="0.2987%" height="15" fill="rgb(251,28,31)" fg:x="362593106" fg:w="12456632"/><text x="8.9460%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12,456,632 samples, 0.30%)</title><rect x="8.6960%" y="725" width="0.2987%" height="15" fill="rgb(233,223,10)" fg:x="362593106" fg:w="12456632"/><text x="8.9460%" y="735.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,182,789 samples, 0.20%)</title><rect x="8.7985%" y="709" width="0.1962%" height="15" fill="rgb(215,21,27)" fg:x="366866949" fg:w="8182789"/><text x="9.0485%" y="719.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (8,182,789 samples, 0.20%)</title><rect x="8.7985%" y="693" width="0.1962%" height="15" fill="rgb(232,23,21)" fg:x="366866949" fg:w="8182789"/><text x="9.0485%" y="703.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (8,182,789 samples, 0.20%)</title><rect x="8.7985%" y="677" width="0.1962%" height="15" fill="rgb(244,5,23)" fg:x="366866949" fg:w="8182789"/><text x="9.0485%" y="687.50"></text></g><g><title>core::slice::memchr::memchr (3,931,488 samples, 0.09%)</title><rect x="8.9005%" y="661" width="0.0943%" height="15" fill="rgb(226,81,46)" fg:x="371118250" fg:w="3931488"/><text x="9.1505%" y="671.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (19,751,325 samples, 0.47%)</title><rect x="8.9948%" y="741" width="0.4737%" height="15" fill="rgb(247,70,30)" fg:x="375049738" fg:w="19751325"/><text x="9.2448%" y="751.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (19,751,325 samples, 0.47%)</title><rect x="8.9948%" y="725" width="0.4737%" height="15" fill="rgb(212,68,19)" fg:x="375049738" fg:w="19751325"/><text x="9.2448%" y="735.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (19,751,325 samples, 0.47%)</title><rect x="8.9948%" y="709" width="0.4737%" height="15" fill="rgb(240,187,13)" fg:x="375049738" fg:w="19751325"/><text x="9.2448%" y="719.50"></text></g><g><title>core::str::pattern::Searcher::next_match (19,751,325 samples, 0.47%)</title><rect x="8.9948%" y="693" width="0.4737%" height="15" fill="rgb(223,113,26)" fg:x="375049738" fg:w="19751325"/><text x="9.2448%" y="703.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (19,751,325 samples, 0.47%)</title><rect x="8.9948%" y="677" width="0.4737%" height="15" fill="rgb(206,192,2)" fg:x="375049738" fg:w="19751325"/><text x="9.2448%" y="687.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (19,751,325 samples, 0.47%)</title><rect x="8.9948%" y="661" width="0.4737%" height="15" fill="rgb(241,108,4)" fg:x="375049738" fg:w="19751325"/><text x="9.2448%" y="671.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (19,751,325 samples, 0.47%)</title><rect x="8.9948%" y="645" width="0.4737%" height="15" fill="rgb(247,173,49)" fg:x="375049738" fg:w="19751325"/><text x="9.2448%" y="655.50"></text></g><g><title>core::str::validations::next_code_point (19,751,325 samples, 0.47%)</title><rect x="8.9948%" y="629" width="0.4737%" height="15" fill="rgb(224,114,35)" fg:x="375049738" fg:w="19751325"/><text x="9.2448%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,516,721 samples, 0.18%)</title><rect x="9.2882%" y="613" width="0.1803%" height="15" fill="rgb(245,159,27)" fg:x="387284342" fg:w="7516721"/><text x="9.5382%" y="623.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7,516,721 samples, 0.18%)</title><rect x="9.2882%" y="597" width="0.1803%" height="15" fill="rgb(245,172,44)" fg:x="387284342" fg:w="7516721"/><text x="9.5382%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8,592,433 samples, 0.21%)</title><rect x="9.4685%" y="613" width="0.2061%" height="15" fill="rgb(236,23,11)" fg:x="394801063" fg:w="8592433"/><text x="9.7185%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8,592,433 samples, 0.21%)</title><rect x="9.4685%" y="597" width="0.2061%" height="15" fill="rgb(205,117,38)" fg:x="394801063" fg:w="8592433"/><text x="9.7185%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (8,592,433 samples, 0.21%)</title><rect x="9.4685%" y="581" width="0.2061%" height="15" fill="rgb(237,72,25)" fg:x="394801063" fg:w="8592433"/><text x="9.7185%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (8,592,433 samples, 0.21%)</title><rect x="9.4685%" y="565" width="0.2061%" height="15" fill="rgb(244,70,9)" fg:x="394801063" fg:w="8592433"/><text x="9.7185%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8,592,433 samples, 0.21%)</title><rect x="9.4685%" y="549" width="0.2061%" height="15" fill="rgb(217,125,39)" fg:x="394801063" fg:w="8592433"/><text x="9.7185%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8,592,433 samples, 0.21%)</title><rect x="9.4685%" y="533" width="0.2061%" height="15" fill="rgb(235,36,10)" fg:x="394801063" fg:w="8592433"/><text x="9.7185%" y="543.50"></text></g><g><title>alloc::alloc::alloc (8,592,433 samples, 0.21%)</title><rect x="9.4685%" y="517" width="0.2061%" height="15" fill="rgb(251,123,47)" fg:x="394801063" fg:w="8592433"/><text x="9.7185%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (16,455,838 samples, 0.39%)</title><rect x="9.4685%" y="693" width="0.3947%" height="15" fill="rgb(221,13,13)" fg:x="394801063" fg:w="16455838"/><text x="9.7185%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16,455,838 samples, 0.39%)</title><rect x="9.4685%" y="677" width="0.3947%" height="15" fill="rgb(238,131,9)" fg:x="394801063" fg:w="16455838"/><text x="9.7185%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16,455,838 samples, 0.39%)</title><rect x="9.4685%" y="661" width="0.3947%" height="15" fill="rgb(211,50,8)" fg:x="394801063" fg:w="16455838"/><text x="9.7185%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (16,455,838 samples, 0.39%)</title><rect x="9.4685%" y="645" width="0.3947%" height="15" fill="rgb(245,182,24)" fg:x="394801063" fg:w="16455838"/><text x="9.7185%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16,455,838 samples, 0.39%)</title><rect x="9.4685%" y="629" width="0.3947%" height="15" fill="rgb(242,14,37)" fg:x="394801063" fg:w="16455838"/><text x="9.7185%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7,863,405 samples, 0.19%)</title><rect x="9.6746%" y="613" width="0.1886%" height="15" fill="rgb(246,228,12)" fg:x="403393496" fg:w="7863405"/><text x="9.9246%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7,863,405 samples, 0.19%)</title><rect x="9.6746%" y="597" width="0.1886%" height="15" fill="rgb(213,55,15)" fg:x="403393496" fg:w="7863405"/><text x="9.9246%" y="607.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (24,663,723 samples, 0.59%)</title><rect x="9.4685%" y="741" width="0.5915%" height="15" fill="rgb(209,9,3)" fg:x="394801063" fg:w="24663723"/><text x="9.7185%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (24,663,723 samples, 0.59%)</title><rect x="9.4685%" y="725" width="0.5915%" height="15" fill="rgb(230,59,30)" fg:x="394801063" fg:w="24663723"/><text x="9.7185%" y="735.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (24,663,723 samples, 0.59%)</title><rect x="9.4685%" y="709" width="0.5915%" height="15" fill="rgb(209,121,21)" fg:x="394801063" fg:w="24663723"/><text x="9.7185%" y="719.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (8,207,885 samples, 0.20%)</title><rect x="9.8631%" y="693" width="0.1968%" height="15" fill="rgb(220,109,13)" fg:x="411256901" fg:w="8207885"/><text x="10.1131%" y="703.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (8,085,870 samples, 0.19%)</title><rect x="10.0600%" y="741" width="0.1939%" height="15" fill="rgb(232,18,1)" fg:x="419464786" fg:w="8085870"/><text x="10.3100%" y="751.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (4,092,027 samples, 0.10%)</title><rect x="10.2539%" y="741" width="0.0981%" height="15" fill="rgb(215,41,42)" fg:x="427550656" fg:w="4092027"/><text x="10.5039%" y="751.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (4,092,027 samples, 0.10%)</title><rect x="10.2539%" y="725" width="0.0981%" height="15" fill="rgb(224,123,36)" fg:x="427550656" fg:w="4092027"/><text x="10.5039%" y="735.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (4,092,027 samples, 0.10%)</title><rect x="10.2539%" y="709" width="0.0981%" height="15" fill="rgb(240,125,3)" fg:x="427550656" fg:w="4092027"/><text x="10.5039%" y="719.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (4,092,027 samples, 0.10%)</title><rect x="10.2539%" y="693" width="0.0981%" height="15" fill="rgb(205,98,50)" fg:x="427550656" fg:w="4092027"/><text x="10.5039%" y="703.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (4,092,027 samples, 0.10%)</title><rect x="10.2539%" y="677" width="0.0981%" height="15" fill="rgb(205,185,37)" fg:x="427550656" fg:w="4092027"/><text x="10.5039%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (4,092,027 samples, 0.10%)</title><rect x="10.2539%" y="661" width="0.0981%" height="15" fill="rgb(238,207,15)" fg:x="427550656" fg:w="4092027"/><text x="10.5039%" y="671.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (4,092,027 samples, 0.10%)</title><rect x="10.2539%" y="645" width="0.0981%" height="15" fill="rgb(213,199,42)" fg:x="427550656" fg:w="4092027"/><text x="10.5039%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4,092,027 samples, 0.10%)</title><rect x="10.2539%" y="629" width="0.0981%" height="15" fill="rgb(235,201,11)" fg:x="427550656" fg:w="4092027"/><text x="10.5039%" y="639.50"></text></g><g><title>[libc.so.6] (101,668,947 samples, 2.44%)</title><rect x="8.0141%" y="789" width="2.4383%" height="15" fill="rgb(207,46,11)" fg:x="334157694" fg:w="101668947"/><text x="8.2641%" y="799.50">[l..</text></g><g><title>onebrc::main (73,233,535 samples, 1.76%)</title><rect x="8.6960%" y="773" width="1.7564%" height="15" fill="rgb(241,35,35)" fg:x="362593106" fg:w="73233535"/><text x="8.9460%" y="783.50"></text></g><g><title>onebrc::process_raw_stations (73,233,535 samples, 1.76%)</title><rect x="8.6960%" y="757" width="1.7564%" height="15" fill="rgb(243,32,47)" fg:x="362593106" fg:w="73233535"/><text x="8.9460%" y="767.50"></text></g><g><title>onebrc::Station::add_measurement (4,183,958 samples, 0.10%)</title><rect x="10.3520%" y="741" width="0.1003%" height="15" fill="rgb(247,202,23)" fg:x="431642683" fg:w="4183958"/><text x="10.6020%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,318,499 samples, 0.10%)</title><rect x="10.8490%" y="709" width="0.1036%" height="15" fill="rgb(219,102,11)" fg:x="452363690" fg:w="4318499"/><text x="11.0990%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (16,757,392 samples, 0.40%)</title><rect x="10.7455%" y="725" width="0.4019%" height="15" fill="rgb(243,110,44)" fg:x="448050160" fg:w="16757392"/><text x="10.9955%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8,125,363 samples, 0.19%)</title><rect x="10.9526%" y="709" width="0.1949%" height="15" fill="rgb(222,74,54)" fg:x="456682189" fg:w="8125363"/><text x="11.2026%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8,345,059 samples, 0.20%)</title><rect x="11.1474%" y="709" width="0.2001%" height="15" fill="rgb(216,99,12)" fg:x="464807552" fg:w="8345059"/><text x="11.3974%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (37,316,432 samples, 0.89%)</title><rect x="10.5467%" y="773" width="0.8950%" height="15" fill="rgb(226,22,26)" fg:x="439759672" fg:w="37316432"/><text x="10.7967%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (37,316,432 samples, 0.89%)</title><rect x="10.5467%" y="757" width="0.8950%" height="15" fill="rgb(217,163,10)" fg:x="439759672" fg:w="37316432"/><text x="10.7967%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (37,316,432 samples, 0.89%)</title><rect x="10.5467%" y="741" width="0.8950%" height="15" fill="rgb(213,25,53)" fg:x="439759672" fg:w="37316432"/><text x="10.7967%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12,268,552 samples, 0.29%)</title><rect x="11.1474%" y="725" width="0.2942%" height="15" fill="rgb(252,105,26)" fg:x="464807552" fg:w="12268552"/><text x="11.3974%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,923,493 samples, 0.09%)</title><rect x="11.3476%" y="709" width="0.0941%" height="15" fill="rgb(220,39,43)" fg:x="473152611" fg:w="3923493"/><text x="11.5976%" y="719.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (16,368,622 samples, 0.39%)</title><rect x="11.4417%" y="773" width="0.3926%" height="15" fill="rgb(229,68,48)" fg:x="477076104" fg:w="16368622"/><text x="11.6917%" y="783.50"></text></g><g><title>core::hash::BuildHasher::hash_one (61,548,227 samples, 1.48%)</title><rect x="10.4524%" y="789" width="1.4761%" height="15" fill="rgb(252,8,32)" fg:x="435826641" fg:w="61548227"/><text x="10.7024%" y="799.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,930,142 samples, 0.09%)</title><rect x="11.8342%" y="773" width="0.0943%" height="15" fill="rgb(223,20,43)" fg:x="493444726" fg:w="3930142"/><text x="12.0842%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (3,930,142 samples, 0.09%)</title><rect x="11.8342%" y="757" width="0.0943%" height="15" fill="rgb(229,81,49)" fg:x="493444726" fg:w="3930142"/><text x="12.0842%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,930,142 samples, 0.09%)</title><rect x="11.8342%" y="741" width="0.0943%" height="15" fill="rgb(236,28,36)" fg:x="493444726" fg:w="3930142"/><text x="12.0842%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,930,142 samples, 0.09%)</title><rect x="11.8342%" y="725" width="0.0943%" height="15" fill="rgb(249,185,26)" fg:x="493444726" fg:w="3930142"/><text x="12.0842%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,930,142 samples, 0.09%)</title><rect x="11.8342%" y="709" width="0.0943%" height="15" fill="rgb(249,174,33)" fg:x="493444726" fg:w="3930142"/><text x="12.0842%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,930,142 samples, 0.09%)</title><rect x="11.8342%" y="693" width="0.0943%" height="15" fill="rgb(233,201,37)" fg:x="493444726" fg:w="3930142"/><text x="12.0842%" y="703.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (4,297,873 samples, 0.10%)</title><rect x="11.9285%" y="789" width="0.1031%" height="15" fill="rgb(221,78,26)" fg:x="497374868" fg:w="4297873"/><text x="12.1785%" y="799.50"></text></g><g><title>core::slice::memchr::memchr_aligned (8,450,844 samples, 0.20%)</title><rect x="12.0316%" y="789" width="0.2027%" height="15" fill="rgb(250,127,30)" fg:x="501672741" fg:w="8450844"/><text x="12.2816%" y="799.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3,976,868 samples, 0.10%)</title><rect x="12.2342%" y="789" width="0.0954%" height="15" fill="rgb(230,49,44)" fg:x="510123585" fg:w="3976868"/><text x="12.4842%" y="799.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (28,335,647 samples, 0.68%)</title><rect x="12.5267%" y="725" width="0.6796%" height="15" fill="rgb(229,67,23)" fg:x="522319130" fg:w="28335647"/><text x="12.7767%" y="735.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (28,335,647 samples, 0.68%)</title><rect x="12.5267%" y="709" width="0.6796%" height="15" fill="rgb(249,83,47)" fg:x="522319130" fg:w="28335647"/><text x="12.7767%" y="719.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (28,335,647 samples, 0.68%)</title><rect x="12.5267%" y="693" width="0.6796%" height="15" fill="rgb(215,43,3)" fg:x="522319130" fg:w="28335647"/><text x="12.7767%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (11,710,177 samples, 0.28%)</title><rect x="12.9255%" y="677" width="0.2808%" height="15" fill="rgb(238,154,13)" fg:x="538944600" fg:w="11710177"/><text x="13.1755%" y="687.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (32,027,071 samples, 0.77%)</title><rect x="12.5267%" y="757" width="0.7681%" height="15" fill="rgb(219,56,2)" fg:x="522319130" fg:w="32027071"/><text x="12.7767%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (32,027,071 samples, 0.77%)</title><rect x="12.5267%" y="741" width="0.7681%" height="15" fill="rgb(233,0,4)" fg:x="522319130" fg:w="32027071"/><text x="12.7767%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,691,424 samples, 0.09%)</title><rect x="13.2063%" y="725" width="0.0885%" height="15" fill="rgb(235,30,7)" fg:x="550654777" fg:w="3691424"/><text x="13.4563%" y="735.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,691,424 samples, 0.09%)</title><rect x="13.2063%" y="709" width="0.0885%" height="15" fill="rgb(250,79,13)" fg:x="550654777" fg:w="3691424"/><text x="13.4563%" y="719.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (3,691,424 samples, 0.09%)</title><rect x="13.2063%" y="693" width="0.0885%" height="15" fill="rgb(211,146,34)" fg:x="550654777" fg:w="3691424"/><text x="13.4563%" y="703.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (3,691,424 samples, 0.09%)</title><rect x="13.2063%" y="677" width="0.0885%" height="15" fill="rgb(228,22,38)" fg:x="550654777" fg:w="3691424"/><text x="13.4563%" y="687.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (4,072,657 samples, 0.10%)</title><rect x="13.3903%" y="677" width="0.0977%" height="15" fill="rgb(235,168,5)" fg:x="558327060" fg:w="4072657"/><text x="13.6403%" y="687.50"></text></g><g><title>onebrc::process_raw_stations::_{{closure}} (4,072,657 samples, 0.10%)</title><rect x="13.3903%" y="661" width="0.0977%" height="15" fill="rgb(221,155,16)" fg:x="558327060" fg:w="4072657"/><text x="13.6403%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,235,188 samples, 0.61%)</title><rect x="15.9624%" y="629" width="0.6052%" height="15" fill="rgb(215,215,53)" fg:x="665575093" fg:w="25235188"/><text x="16.2124%" y="639.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (16,678,658 samples, 0.40%)</title><rect x="16.1676%" y="613" width="0.4000%" height="15" fill="rgb(223,4,10)" fg:x="674131623" fg:w="16678658"/><text x="16.4176%" y="623.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (140,783,385 samples, 3.38%)</title><rect x="13.2948%" y="757" width="3.3764%" height="15" fill="rgb(234,103,6)" fg:x="554346201" fg:w="140783385"/><text x="13.5448%" y="767.50">&lt;co..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (140,783,385 samples, 3.38%)</title><rect x="13.2948%" y="741" width="3.3764%" height="15" fill="rgb(227,97,0)" fg:x="554346201" fg:w="140783385"/><text x="13.5448%" y="751.50">cor..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (136,802,526 samples, 3.28%)</title><rect x="13.3903%" y="725" width="3.2809%" height="15" fill="rgb(234,150,53)" fg:x="558327060" fg:w="136802526"/><text x="13.6403%" y="735.50">&lt;co..</text></g><g><title>core::str::pattern::Searcher::next_match (136,802,526 samples, 3.28%)</title><rect x="13.3903%" y="709" width="3.2809%" height="15" fill="rgb(228,201,54)" fg:x="558327060" fg:w="136802526"/><text x="13.6403%" y="719.50">cor..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (136,802,526 samples, 3.28%)</title><rect x="13.3903%" y="693" width="3.2809%" height="15" fill="rgb(222,22,37)" fg:x="558327060" fg:w="136802526"/><text x="13.6403%" y="703.50">&lt;co..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (132,729,869 samples, 3.18%)</title><rect x="13.4880%" y="677" width="3.1832%" height="15" fill="rgb(237,53,32)" fg:x="562399717" fg:w="132729869"/><text x="13.7380%" y="687.50">&lt;co..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (120,279,667 samples, 2.88%)</title><rect x="13.7866%" y="661" width="2.8847%" height="15" fill="rgb(233,25,53)" fg:x="574849919" fg:w="120279667"/><text x="14.0366%" y="671.50">&lt;c..</text></g><g><title>core::str::validations::next_code_point (120,279,667 samples, 2.88%)</title><rect x="13.7866%" y="645" width="2.8847%" height="15" fill="rgb(210,40,34)" fg:x="574849919" fg:w="120279667"/><text x="14.0366%" y="655.50">co..</text></g><g><title>core::str::validations::utf8_first_byte (4,319,305 samples, 0.10%)</title><rect x="16.5676%" y="629" width="0.1036%" height="15" fill="rgb(241,220,44)" fg:x="690810281" fg:w="4319305"/><text x="16.8176%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28,900,597 samples, 0.69%)</title><rect x="16.6712%" y="629" width="0.6931%" height="15" fill="rgb(235,28,35)" fg:x="695129586" fg:w="28900597"/><text x="16.9212%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28,900,597 samples, 0.69%)</title><rect x="16.6712%" y="613" width="0.6931%" height="15" fill="rgb(210,56,17)" fg:x="695129586" fg:w="28900597"/><text x="16.9212%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (28,900,597 samples, 0.69%)</title><rect x="16.6712%" y="597" width="0.6931%" height="15" fill="rgb(224,130,29)" fg:x="695129586" fg:w="28900597"/><text x="16.9212%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (28,900,597 samples, 0.69%)</title><rect x="16.6712%" y="581" width="0.6931%" height="15" fill="rgb(235,212,8)" fg:x="695129586" fg:w="28900597"/><text x="16.9212%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20,660,963 samples, 0.50%)</title><rect x="16.8688%" y="565" width="0.4955%" height="15" fill="rgb(223,33,50)" fg:x="703369220" fg:w="20660963"/><text x="17.1188%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20,660,963 samples, 0.50%)</title><rect x="16.8688%" y="549" width="0.4955%" height="15" fill="rgb(219,149,13)" fg:x="703369220" fg:w="20660963"/><text x="17.1188%" y="559.50"></text></g><g><title>alloc::alloc::alloc (20,660,963 samples, 0.50%)</title><rect x="16.8688%" y="533" width="0.4955%" height="15" fill="rgb(250,156,29)" fg:x="703369220" fg:w="20660963"/><text x="17.1188%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (49,665,029 samples, 1.19%)</title><rect x="16.6712%" y="709" width="1.1911%" height="15" fill="rgb(216,193,19)" fg:x="695129586" fg:w="49665029"/><text x="16.9212%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (49,665,029 samples, 1.19%)</title><rect x="16.6712%" y="693" width="1.1911%" height="15" fill="rgb(216,135,14)" fg:x="695129586" fg:w="49665029"/><text x="16.9212%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (49,665,029 samples, 1.19%)</title><rect x="16.6712%" y="677" width="1.1911%" height="15" fill="rgb(241,47,5)" fg:x="695129586" fg:w="49665029"/><text x="16.9212%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (49,665,029 samples, 1.19%)</title><rect x="16.6712%" y="661" width="1.1911%" height="15" fill="rgb(233,42,35)" fg:x="695129586" fg:w="49665029"/><text x="16.9212%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (49,665,029 samples, 1.19%)</title><rect x="16.6712%" y="645" width="1.1911%" height="15" fill="rgb(231,13,6)" fg:x="695129586" fg:w="49665029"/><text x="16.9212%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (20,764,432 samples, 0.50%)</title><rect x="17.3644%" y="629" width="0.4980%" height="15" fill="rgb(207,181,40)" fg:x="724030183" fg:w="20764432"/><text x="17.6144%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20,764,432 samples, 0.50%)</title><rect x="17.3644%" y="613" width="0.4980%" height="15" fill="rgb(254,173,49)" fg:x="724030183" fg:w="20764432"/><text x="17.6144%" y="623.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (62,415,474 samples, 1.50%)</title><rect x="16.6712%" y="757" width="1.4969%" height="15" fill="rgb(221,1,38)" fg:x="695129586" fg:w="62415474"/><text x="16.9212%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (62,415,474 samples, 1.50%)</title><rect x="16.6712%" y="741" width="1.4969%" height="15" fill="rgb(206,124,46)" fg:x="695129586" fg:w="62415474"/><text x="16.9212%" y="751.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (62,415,474 samples, 1.50%)</title><rect x="16.6712%" y="725" width="1.4969%" height="15" fill="rgb(249,21,11)" fg:x="695129586" fg:w="62415474"/><text x="16.9212%" y="735.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (12,750,445 samples, 0.31%)</title><rect x="17.8623%" y="709" width="0.3058%" height="15" fill="rgb(222,201,40)" fg:x="744794615" fg:w="12750445"/><text x="18.1123%" y="719.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (8,541,396 samples, 0.20%)</title><rect x="18.1681%" y="757" width="0.2048%" height="15" fill="rgb(235,61,29)" fg:x="757545060" fg:w="8541396"/><text x="18.4181%" y="767.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (4,118,616 samples, 0.10%)</title><rect x="18.3730%" y="757" width="0.0988%" height="15" fill="rgb(219,207,3)" fg:x="766086456" fg:w="4118616"/><text x="18.6230%" y="767.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (4,118,616 samples, 0.10%)</title><rect x="18.3730%" y="741" width="0.0988%" height="15" fill="rgb(222,56,46)" fg:x="766086456" fg:w="4118616"/><text x="18.6230%" y="751.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (4,118,616 samples, 0.10%)</title><rect x="18.3730%" y="725" width="0.0988%" height="15" fill="rgb(239,76,54)" fg:x="766086456" fg:w="4118616"/><text x="18.6230%" y="735.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (4,118,616 samples, 0.10%)</title><rect x="18.3730%" y="709" width="0.0988%" height="15" fill="rgb(231,124,27)" fg:x="766086456" fg:w="4118616"/><text x="18.6230%" y="719.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (4,118,616 samples, 0.10%)</title><rect x="18.3730%" y="693" width="0.0988%" height="15" fill="rgb(249,195,6)" fg:x="766086456" fg:w="4118616"/><text x="18.6230%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (4,118,616 samples, 0.10%)</title><rect x="18.3730%" y="677" width="0.0988%" height="15" fill="rgb(237,174,47)" fg:x="766086456" fg:w="4118616"/><text x="18.6230%" y="687.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (4,118,616 samples, 0.10%)</title><rect x="18.3730%" y="661" width="0.0988%" height="15" fill="rgb(206,201,31)" fg:x="766086456" fg:w="4118616"/><text x="18.6230%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4,118,616 samples, 0.10%)</title><rect x="18.3730%" y="645" width="0.0988%" height="15" fill="rgb(231,57,52)" fg:x="766086456" fg:w="4118616"/><text x="18.6230%" y="655.50"></text></g><g><title>onebrc::Station::add_measurement (4,319,242 samples, 0.10%)</title><rect x="18.4718%" y="757" width="0.1036%" height="15" fill="rgb(248,177,22)" fg:x="770205072" fg:w="4319242"/><text x="18.7218%" y="767.50"></text></g><g><title>[anon] (456,355,030 samples, 10.94%)</title><rect x="7.8127%" y="805" width="10.9447%" height="15" fill="rgb(215,211,37)" fg:x="325761884" fg:w="456355030"/><text x="8.0627%" y="815.50">[anon]</text></g><g><title>onebrc::main (268,016,461 samples, 6.43%)</title><rect x="12.3296%" y="789" width="6.4278%" height="15" fill="rgb(241,128,51)" fg:x="514100453" fg:w="268016461"/><text x="12.5796%" y="799.50">onebrc::..</text></g><g><title>onebrc::process_raw_stations (268,016,461 samples, 6.43%)</title><rect x="12.3296%" y="773" width="6.4278%" height="15" fill="rgb(227,165,31)" fg:x="514100453" fg:w="268016461"/><text x="12.5796%" y="783.50">onebrc::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (7,592,600 samples, 0.18%)</title><rect x="18.5753%" y="757" width="0.1821%" height="15" fill="rgb(228,167,24)" fg:x="774524314" fg:w="7592600"/><text x="18.8253%" y="767.50"></text></g><g><title>std::collections::hash::map::map_entry (4,080,907 samples, 0.10%)</title><rect x="18.6596%" y="741" width="0.0979%" height="15" fill="rgb(228,143,12)" fg:x="778036007" fg:w="4080907"/><text x="18.9096%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4,331,349 samples, 0.10%)</title><rect x="23.2122%" y="789" width="0.1039%" height="15" fill="rgb(249,149,8)" fg:x="967862828" fg:w="4331349"/><text x="23.4622%" y="799.50"></text></g><g><title>[libc.so.6] (194,352,957 samples, 4.66%)</title><rect x="18.7574%" y="805" width="4.6611%" height="15" fill="rgb(243,35,44)" fg:x="782116914" fg:w="194352957"/><text x="19.0074%" y="815.50">[libc..</text></g><g><title>onebrc::main (4,275,694 samples, 0.10%)</title><rect x="23.3160%" y="789" width="0.1025%" height="15" fill="rgb(246,89,9)" fg:x="972194177" fg:w="4275694"/><text x="23.5660%" y="799.50"></text></g><g><title>onebrc::process_raw_stations (4,275,694 samples, 0.10%)</title><rect x="23.3160%" y="773" width="0.1025%" height="15" fill="rgb(233,213,13)" fg:x="972194177" fg:w="4275694"/><text x="23.5660%" y="783.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (4,275,694 samples, 0.10%)</title><rect x="23.3160%" y="757" width="0.1025%" height="15" fill="rgb(233,141,41)" fg:x="972194177" fg:w="4275694"/><text x="23.5660%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,275,694 samples, 0.10%)</title><rect x="23.3160%" y="741" width="0.1025%" height="15" fill="rgb(239,167,4)" fg:x="972194177" fg:w="4275694"/><text x="23.5660%" y="751.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,275,694 samples, 0.10%)</title><rect x="23.3160%" y="725" width="0.1025%" height="15" fill="rgb(209,217,16)" fg:x="972194177" fg:w="4275694"/><text x="23.5660%" y="735.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (4,275,694 samples, 0.10%)</title><rect x="23.3160%" y="709" width="0.1025%" height="15" fill="rgb(219,88,35)" fg:x="972194177" fg:w="4275694"/><text x="23.5660%" y="719.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,275,694 samples, 0.10%)</title><rect x="23.3160%" y="693" width="0.1025%" height="15" fill="rgb(220,193,23)" fg:x="972194177" fg:w="4275694"/><text x="23.5660%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (4,275,694 samples, 0.10%)</title><rect x="23.3160%" y="677" width="0.1025%" height="15" fill="rgb(230,90,52)" fg:x="972194177" fg:w="4275694"/><text x="23.5660%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4,258,458 samples, 0.10%)</title><rect x="23.4186%" y="773" width="0.1021%" height="15" fill="rgb(252,106,19)" fg:x="976469871" fg:w="4258458"/><text x="23.6686%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,258,458 samples, 0.10%)</title><rect x="23.4186%" y="757" width="0.1021%" height="15" fill="rgb(206,74,20)" fg:x="976469871" fg:w="4258458"/><text x="23.6686%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,258,458 samples, 0.10%)</title><rect x="23.4186%" y="741" width="0.1021%" height="15" fill="rgb(230,138,44)" fg:x="976469871" fg:w="4258458"/><text x="23.6686%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,258,458 samples, 0.10%)</title><rect x="23.4186%" y="725" width="0.1021%" height="15" fill="rgb(235,182,43)" fg:x="976469871" fg:w="4258458"/><text x="23.6686%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,258,458 samples, 0.10%)</title><rect x="23.4186%" y="709" width="0.1021%" height="15" fill="rgb(242,16,51)" fg:x="976469871" fg:w="4258458"/><text x="23.6686%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,258,458 samples, 0.10%)</title><rect x="23.4186%" y="693" width="0.1021%" height="15" fill="rgb(248,9,4)" fg:x="976469871" fg:w="4258458"/><text x="23.6686%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (4,258,458 samples, 0.10%)</title><rect x="23.4186%" y="677" width="0.1021%" height="15" fill="rgb(210,31,22)" fg:x="976469871" fg:w="4258458"/><text x="23.6686%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4,134,295 samples, 0.10%)</title><rect x="23.6194%" y="741" width="0.0992%" height="15" fill="rgb(239,54,39)" fg:x="984841891" fg:w="4134295"/><text x="23.8694%" y="751.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4,134,295 samples, 0.10%)</title><rect x="23.6194%" y="725" width="0.0992%" height="15" fill="rgb(230,99,41)" fg:x="984841891" fg:w="4134295"/><text x="23.8694%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (4,002,802 samples, 0.10%)</title><rect x="23.7185%" y="741" width="0.0960%" height="15" fill="rgb(253,106,12)" fg:x="988976186" fg:w="4002802"/><text x="23.9685%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (4,002,802 samples, 0.10%)</title><rect x="23.7185%" y="725" width="0.0960%" height="15" fill="rgb(213,46,41)" fg:x="988976186" fg:w="4002802"/><text x="23.9685%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (4,002,802 samples, 0.10%)</title><rect x="23.7185%" y="709" width="0.0960%" height="15" fill="rgb(215,133,35)" fg:x="988976186" fg:w="4002802"/><text x="23.9685%" y="719.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (4,002,802 samples, 0.10%)</title><rect x="23.7185%" y="693" width="0.0960%" height="15" fill="rgb(213,28,5)" fg:x="988976186" fg:w="4002802"/><text x="23.9685%" y="703.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (4,002,802 samples, 0.10%)</title><rect x="23.7185%" y="677" width="0.0960%" height="15" fill="rgb(215,77,49)" fg:x="988976186" fg:w="4002802"/><text x="23.9685%" y="687.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,002,802 samples, 0.10%)</title><rect x="23.7185%" y="661" width="0.0960%" height="15" fill="rgb(248,100,22)" fg:x="988976186" fg:w="4002802"/><text x="23.9685%" y="671.50"></text></g><g><title>[libgcc_s.so.1] (20,845,413 samples, 0.50%)</title><rect x="23.4186%" y="805" width="0.4999%" height="15" fill="rgb(208,67,9)" fg:x="976469871" fg:w="20845413"/><text x="23.6686%" y="815.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (20,845,413 samples, 0.50%)</title><rect x="23.4186%" y="789" width="0.4999%" height="15" fill="rgb(219,133,21)" fg:x="976469871" fg:w="20845413"/><text x="23.6686%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16,586,955 samples, 0.40%)</title><rect x="23.5207%" y="773" width="0.3978%" height="15" fill="rgb(246,46,29)" fg:x="980728329" fg:w="16586955"/><text x="23.7707%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (16,586,955 samples, 0.40%)</title><rect x="23.5207%" y="757" width="0.3978%" height="15" fill="rgb(246,185,52)" fg:x="980728329" fg:w="16586955"/><text x="23.7707%" y="767.50"></text></g><g><title>hashbrown::raw::h2 (4,336,296 samples, 0.10%)</title><rect x="23.8145%" y="741" width="0.1040%" height="15" fill="rgb(252,136,11)" fg:x="992978988" fg:w="4336296"/><text x="24.0645%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12,283,938 samples, 0.29%)</title><rect x="25.7273%" y="757" width="0.2946%" height="15" fill="rgb(219,138,53)" fg:x="1072733026" fg:w="12283938"/><text x="25.9773%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (42,331,508 samples, 1.02%)</title><rect x="25.3142%" y="773" width="1.0152%" height="15" fill="rgb(211,51,23)" fg:x="1055509670" fg:w="42331508"/><text x="25.5642%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (12,824,214 samples, 0.31%)</title><rect x="26.0219%" y="757" width="0.3076%" height="15" fill="rgb(247,221,28)" fg:x="1085016964" fg:w="12824214"/><text x="26.2719%" y="767.50"></text></g><g><title>core::cmp::min (4,335,675 samples, 0.10%)</title><rect x="26.3294%" y="773" width="0.1040%" height="15" fill="rgb(251,222,45)" fg:x="1097841178" fg:w="4335675"/><text x="26.5794%" y="783.50"></text></g><g><title>core::cmp::Ord::min (4,335,675 samples, 0.10%)</title><rect x="26.3294%" y="757" width="0.1040%" height="15" fill="rgb(217,162,53)" fg:x="1097841178" fg:w="4335675"/><text x="26.5794%" y="767.50"></text></g><g><title>core::cmp::min_by (4,335,675 samples, 0.10%)</title><rect x="26.3294%" y="741" width="0.1040%" height="15" fill="rgb(229,93,14)" fg:x="1097841178" fg:w="4335675"/><text x="26.5794%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8,341,651 samples, 0.20%)</title><rect x="29.0499%" y="757" width="0.2001%" height="15" fill="rgb(209,67,49)" fg:x="1211275853" fg:w="8341651"/><text x="29.2999%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (226,610,293 samples, 5.43%)</title><rect x="23.9185%" y="789" width="5.4348%" height="15" fill="rgb(213,87,29)" fg:x="997315284" fg:w="226610293"/><text x="24.1685%" y="799.50">&lt;core::..</text></g><g><title>core::hash::sip::u8to64_le (121,748,724 samples, 2.92%)</title><rect x="26.4334%" y="773" width="2.9199%" height="15" fill="rgb(205,151,52)" fg:x="1102176853" fg:w="121748724"/><text x="26.6834%" y="783.50">co..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4,308,073 samples, 0.10%)</title><rect x="29.2500%" y="757" width="0.1033%" height="15" fill="rgb(253,215,39)" fg:x="1219617504" fg:w="4308073"/><text x="29.5000%" y="767.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (4,316,532 samples, 0.10%)</title><rect x="29.9731%" y="741" width="0.1035%" height="15" fill="rgb(221,220,41)" fg:x="1249769884" fg:w="4316532"/><text x="30.2231%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,316,532 samples, 0.10%)</title><rect x="29.9731%" y="725" width="0.1035%" height="15" fill="rgb(218,133,21)" fg:x="1249769884" fg:w="4316532"/><text x="30.2231%" y="735.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,316,532 samples, 0.10%)</title><rect x="29.9731%" y="709" width="0.1035%" height="15" fill="rgb(221,193,43)" fg:x="1249769884" fg:w="4316532"/><text x="30.2231%" y="719.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (4,316,532 samples, 0.10%)</title><rect x="29.9731%" y="693" width="0.1035%" height="15" fill="rgb(240,128,52)" fg:x="1249769884" fg:w="4316532"/><text x="30.2231%" y="703.50"></text></g><g><title>[libc.so.6] (38,784,196 samples, 0.93%)</title><rect x="29.3533%" y="789" width="0.9302%" height="15" fill="rgb(253,114,12)" fg:x="1223925577" fg:w="38784196"/><text x="29.6033%" y="799.50"></text></g><g><title>onebrc::main (12,939,889 samples, 0.31%)</title><rect x="29.9731%" y="773" width="0.3103%" height="15" fill="rgb(215,223,47)" fg:x="1249769884" fg:w="12939889"/><text x="30.2231%" y="783.50"></text></g><g><title>onebrc::process_raw_stations (12,939,889 samples, 0.31%)</title><rect x="29.9731%" y="757" width="0.3103%" height="15" fill="rgb(248,225,23)" fg:x="1249769884" fg:w="12939889"/><text x="30.2231%" y="767.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,623,357 samples, 0.21%)</title><rect x="30.0766%" y="741" width="0.2068%" height="15" fill="rgb(250,108,0)" fg:x="1254086416" fg:w="8623357"/><text x="30.3266%" y="751.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (8,623,357 samples, 0.21%)</title><rect x="30.0766%" y="725" width="0.2068%" height="15" fill="rgb(228,208,7)" fg:x="1254086416" fg:w="8623357"/><text x="30.3266%" y="735.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (8,623,357 samples, 0.21%)</title><rect x="30.0766%" y="709" width="0.2068%" height="15" fill="rgb(244,45,10)" fg:x="1254086416" fg:w="8623357"/><text x="30.3266%" y="719.50"></text></g><g><title>core::str::pattern::Searcher::next_match (8,623,357 samples, 0.21%)</title><rect x="30.0766%" y="693" width="0.2068%" height="15" fill="rgb(207,125,25)" fg:x="1254086416" fg:w="8623357"/><text x="30.3266%" y="703.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (8,623,357 samples, 0.21%)</title><rect x="30.0766%" y="677" width="0.2068%" height="15" fill="rgb(210,195,18)" fg:x="1254086416" fg:w="8623357"/><text x="30.3266%" y="687.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (8,623,357 samples, 0.21%)</title><rect x="30.0766%" y="661" width="0.2068%" height="15" fill="rgb(249,80,12)" fg:x="1254086416" fg:w="8623357"/><text x="30.3266%" y="671.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (8,623,357 samples, 0.21%)</title><rect x="30.0766%" y="645" width="0.2068%" height="15" fill="rgb(221,65,9)" fg:x="1254086416" fg:w="8623357"/><text x="30.3266%" y="655.50"></text></g><g><title>core::str::validations::next_code_point (8,623,357 samples, 0.21%)</title><rect x="30.0766%" y="629" width="0.2068%" height="15" fill="rgb(235,49,36)" fg:x="1254086416" fg:w="8623357"/><text x="30.3266%" y="639.50"></text></g><g><title>__rdl_dealloc (3,922,612 samples, 0.09%)</title><rect x="30.2835%" y="789" width="0.0941%" height="15" fill="rgb(225,32,20)" fg:x="1262709773" fg:w="3922612"/><text x="30.5335%" y="799.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,922,612 samples, 0.09%)</title><rect x="30.2835%" y="773" width="0.0941%" height="15" fill="rgb(215,141,46)" fg:x="1262709773" fg:w="3922612"/><text x="30.5335%" y="783.50"></text></g><g><title>cfree (3,824,242 samples, 0.09%)</title><rect x="30.3775%" y="789" width="0.0917%" height="15" fill="rgb(250,160,47)" fg:x="1266632385" fg:w="3824242"/><text x="30.6275%" y="799.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8,234,074 samples, 0.20%)</title><rect x="31.1519%" y="725" width="0.1975%" height="15" fill="rgb(216,222,40)" fg:x="1298921903" fg:w="8234074"/><text x="31.4019%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,275,175 samples, 0.10%)</title><rect x="31.2469%" y="709" width="0.1025%" height="15" fill="rgb(234,217,39)" fg:x="1302880802" fg:w="4275175"/><text x="31.4969%" y="719.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7,937,798 samples, 0.19%)</title><rect x="31.6431%" y="709" width="0.1904%" height="15" fill="rgb(207,178,40)" fg:x="1319402428" fg:w="7937798"/><text x="31.8931%" y="719.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (68,545,392 samples, 1.64%)</title><rect x="30.4692%" y="773" width="1.6439%" height="15" fill="rgb(221,136,13)" fg:x="1270456627" fg:w="68545392"/><text x="30.7192%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (68,545,392 samples, 1.64%)</title><rect x="30.4692%" y="757" width="1.6439%" height="15" fill="rgb(249,199,10)" fg:x="1270456627" fg:w="68545392"/><text x="30.7192%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (68,545,392 samples, 1.64%)</title><rect x="30.4692%" y="741" width="1.6439%" height="15" fill="rgb(249,222,13)" fg:x="1270456627" fg:w="68545392"/><text x="30.7192%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (31,846,042 samples, 0.76%)</title><rect x="31.3494%" y="725" width="0.7638%" height="15" fill="rgb(244,185,38)" fg:x="1307155977" fg:w="31846042"/><text x="31.5994%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (11,661,793 samples, 0.28%)</title><rect x="31.8335%" y="709" width="0.2797%" height="15" fill="rgb(236,202,9)" fg:x="1327340226" fg:w="11661793"/><text x="32.0835%" y="719.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (12,739,294 samples, 0.31%)</title><rect x="32.1132%" y="773" width="0.3055%" height="15" fill="rgb(250,229,37)" fg:x="1339002019" fg:w="12739294"/><text x="32.3632%" y="783.50"></text></g><g><title>core::hash::BuildHasher::hash_one (101,837,691 samples, 2.44%)</title><rect x="30.4692%" y="789" width="2.4424%" height="15" fill="rgb(206,174,23)" fg:x="1270456627" fg:w="101837691"/><text x="30.7192%" y="799.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (20,553,005 samples, 0.49%)</title><rect x="32.4187%" y="773" width="0.4929%" height="15" fill="rgb(211,33,43)" fg:x="1351741313" fg:w="20553005"/><text x="32.6687%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (20,553,005 samples, 0.49%)</title><rect x="32.4187%" y="757" width="0.4929%" height="15" fill="rgb(245,58,50)" fg:x="1351741313" fg:w="20553005"/><text x="32.6687%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (20,553,005 samples, 0.49%)</title><rect x="32.4187%" y="741" width="0.4929%" height="15" fill="rgb(244,68,36)" fg:x="1351741313" fg:w="20553005"/><text x="32.6687%" y="751.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (20,553,005 samples, 0.49%)</title><rect x="32.4187%" y="725" width="0.4929%" height="15" fill="rgb(232,229,15)" fg:x="1351741313" fg:w="20553005"/><text x="32.6687%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (20,553,005 samples, 0.49%)</title><rect x="32.4187%" y="709" width="0.4929%" height="15" fill="rgb(254,30,23)" fg:x="1351741313" fg:w="20553005"/><text x="32.6687%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (20,553,005 samples, 0.49%)</title><rect x="32.4187%" y="693" width="0.4929%" height="15" fill="rgb(235,160,14)" fg:x="1351741313" fg:w="20553005"/><text x="32.6687%" y="703.50"></text></g><g><title>core::hash::Hasher::write_u8 (11,972,003 samples, 0.29%)</title><rect x="32.6245%" y="677" width="0.2871%" height="15" fill="rgb(212,155,44)" fg:x="1360322315" fg:w="11972003"/><text x="32.8745%" y="687.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (3,699,629 samples, 0.09%)</title><rect x="32.9116%" y="789" width="0.0887%" height="15" fill="rgb(226,2,50)" fg:x="1372294318" fg:w="3699629"/><text x="33.1616%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (16,912,245 samples, 0.41%)</title><rect x="33.6109%" y="773" width="0.4056%" height="15" fill="rgb(234,177,6)" fg:x="1401450697" fg:w="16912245"/><text x="33.8609%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (16,912,245 samples, 0.41%)</title><rect x="33.6109%" y="757" width="0.4056%" height="15" fill="rgb(217,24,9)" fg:x="1401450697" fg:w="16912245"/><text x="33.8609%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (16,912,245 samples, 0.41%)</title><rect x="33.6109%" y="741" width="0.4056%" height="15" fill="rgb(220,13,46)" fg:x="1401450697" fg:w="16912245"/><text x="33.8609%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,912,245 samples, 0.41%)</title><rect x="33.6109%" y="725" width="0.4056%" height="15" fill="rgb(239,221,27)" fg:x="1401450697" fg:w="16912245"/><text x="33.8609%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (16,912,245 samples, 0.41%)</title><rect x="33.6109%" y="709" width="0.4056%" height="15" fill="rgb(222,198,25)" fg:x="1401450697" fg:w="16912245"/><text x="33.8609%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16,912,245 samples, 0.41%)</title><rect x="33.6109%" y="693" width="0.4056%" height="15" fill="rgb(211,99,13)" fg:x="1401450697" fg:w="16912245"/><text x="33.8609%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (16,912,245 samples, 0.41%)</title><rect x="33.6109%" y="677" width="0.4056%" height="15" fill="rgb(232,111,31)" fg:x="1401450697" fg:w="16912245"/><text x="33.8609%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8,025,785 samples, 0.19%)</title><rect x="34.0165%" y="741" width="0.1925%" height="15" fill="rgb(245,82,37)" fg:x="1418362942" fg:w="8025785"/><text x="34.2665%" y="751.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8,025,785 samples, 0.19%)</title><rect x="34.0165%" y="725" width="0.1925%" height="15" fill="rgb(227,149,46)" fg:x="1418362942" fg:w="8025785"/><text x="34.2665%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (8,440,427 samples, 0.20%)</title><rect x="34.2090%" y="741" width="0.2024%" height="15" fill="rgb(218,36,50)" fg:x="1426388727" fg:w="8440427"/><text x="34.4590%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (4,330,318 samples, 0.10%)</title><rect x="34.3075%" y="725" width="0.1039%" height="15" fill="rgb(226,80,48)" fg:x="1430498836" fg:w="4330318"/><text x="34.5575%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (4,330,318 samples, 0.10%)</title><rect x="34.3075%" y="709" width="0.1039%" height="15" fill="rgb(238,224,15)" fg:x="1430498836" fg:w="4330318"/><text x="34.5575%" y="719.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (4,330,318 samples, 0.10%)</title><rect x="34.3075%" y="693" width="0.1039%" height="15" fill="rgb(241,136,10)" fg:x="1430498836" fg:w="4330318"/><text x="34.5575%" y="703.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (4,330,318 samples, 0.10%)</title><rect x="34.3075%" y="677" width="0.1039%" height="15" fill="rgb(208,32,45)" fg:x="1430498836" fg:w="4330318"/><text x="34.5575%" y="687.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,330,318 samples, 0.10%)</title><rect x="34.3075%" y="661" width="0.1039%" height="15" fill="rgb(207,135,9)" fg:x="1430498836" fg:w="4330318"/><text x="34.5575%" y="671.50"></text></g><g><title>hashbrown::raw::h2 (4,310,099 samples, 0.10%)</title><rect x="34.4114%" y="741" width="0.1034%" height="15" fill="rgb(206,86,44)" fg:x="1434829154" fg:w="4310099"/><text x="34.6614%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (67,477,363 samples, 1.62%)</title><rect x="33.0003%" y="789" width="1.6183%" height="15" fill="rgb(245,177,15)" fg:x="1375993947" fg:w="67477363"/><text x="33.2503%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (25,108,368 samples, 0.60%)</title><rect x="34.0165%" y="773" width="0.6022%" height="15" fill="rgb(206,64,50)" fg:x="1418362942" fg:w="25108368"/><text x="34.2665%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (25,108,368 samples, 0.60%)</title><rect x="34.0165%" y="757" width="0.6022%" height="15" fill="rgb(234,36,40)" fg:x="1418362942" fg:w="25108368"/><text x="34.2665%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4,332,057 samples, 0.10%)</title><rect x="34.5147%" y="741" width="0.1039%" height="15" fill="rgb(213,64,8)" fg:x="1439139253" fg:w="4332057"/><text x="34.7647%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,332,057 samples, 0.10%)</title><rect x="34.5147%" y="725" width="0.1039%" height="15" fill="rgb(210,75,36)" fg:x="1439139253" fg:w="4332057"/><text x="34.7647%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (20,052,115 samples, 0.48%)</title><rect x="35.0140%" y="677" width="0.4809%" height="15" fill="rgb(229,88,21)" fg:x="1459954283" fg:w="20052115"/><text x="35.2640%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (20,052,115 samples, 0.48%)</title><rect x="35.0140%" y="661" width="0.4809%" height="15" fill="rgb(252,204,47)" fg:x="1459954283" fg:w="20052115"/><text x="35.2640%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (20,052,115 samples, 0.48%)</title><rect x="35.0140%" y="645" width="0.4809%" height="15" fill="rgb(208,77,27)" fg:x="1459954283" fg:w="20052115"/><text x="35.2640%" y="655.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (65,639,719 samples, 1.57%)</title><rect x="34.7098%" y="725" width="1.5742%" height="15" fill="rgb(221,76,26)" fg:x="1447270721" fg:w="65639719"/><text x="34.9598%" y="735.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (65,639,719 samples, 1.57%)</title><rect x="34.7098%" y="709" width="1.5742%" height="15" fill="rgb(225,139,18)" fg:x="1447270721" fg:w="65639719"/><text x="34.9598%" y="719.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (61,349,033 samples, 1.47%)</title><rect x="34.8127%" y="693" width="1.4713%" height="15" fill="rgb(230,137,11)" fg:x="1451561407" fg:w="61349033"/><text x="35.0627%" y="703.50"></text></g><g><title>core::slice::memchr::memchr (32,904,042 samples, 0.79%)</title><rect x="35.4949%" y="677" width="0.7891%" height="15" fill="rgb(212,28,1)" fg:x="1480006398" fg:w="32904042"/><text x="35.7449%" y="687.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (86,557,861 samples, 2.08%)</title><rect x="34.7098%" y="757" width="2.0759%" height="15" fill="rgb(248,164,17)" fg:x="1447270721" fg:w="86557861"/><text x="34.9598%" y="767.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (86,557,861 samples, 2.08%)</title><rect x="34.7098%" y="741" width="2.0759%" height="15" fill="rgb(222,171,42)" fg:x="1447270721" fg:w="86557861"/><text x="34.9598%" y="751.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (20,918,142 samples, 0.50%)</title><rect x="36.2840%" y="725" width="0.5017%" height="15" fill="rgb(243,84,45)" fg:x="1512910440" fg:w="20918142"/><text x="36.5340%" y="735.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (20,918,142 samples, 0.50%)</title><rect x="36.2840%" y="709" width="0.5017%" height="15" fill="rgb(252,49,23)" fg:x="1512910440" fg:w="20918142"/><text x="36.5340%" y="719.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (20,918,142 samples, 0.50%)</title><rect x="36.2840%" y="693" width="0.5017%" height="15" fill="rgb(215,19,7)" fg:x="1512910440" fg:w="20918142"/><text x="36.5340%" y="703.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (20,918,142 samples, 0.50%)</title><rect x="36.2840%" y="677" width="0.5017%" height="15" fill="rgb(238,81,41)" fg:x="1512910440" fg:w="20918142"/><text x="36.5340%" y="687.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (20,918,142 samples, 0.50%)</title><rect x="36.2840%" y="661" width="0.5017%" height="15" fill="rgb(210,199,37)" fg:x="1512910440" fg:w="20918142"/><text x="36.5340%" y="671.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (20,918,142 samples, 0.50%)</title><rect x="36.2840%" y="645" width="0.5017%" height="15" fill="rgb(244,192,49)" fg:x="1512910440" fg:w="20918142"/><text x="36.5340%" y="655.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (20,918,142 samples, 0.50%)</title><rect x="36.2840%" y="629" width="0.5017%" height="15" fill="rgb(226,211,11)" fg:x="1512910440" fg:w="20918142"/><text x="36.5340%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (16,596,894 samples, 0.40%)</title><rect x="36.3876%" y="613" width="0.3980%" height="15" fill="rgb(236,162,54)" fg:x="1517231688" fg:w="16596894"/><text x="36.6376%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (16,596,894 samples, 0.40%)</title><rect x="36.3876%" y="597" width="0.3980%" height="15" fill="rgb(220,229,9)" fg:x="1517231688" fg:w="16596894"/><text x="36.6376%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8,240,955 samples, 0.20%)</title><rect x="36.5880%" y="581" width="0.1976%" height="15" fill="rgb(250,87,22)" fg:x="1525587627" fg:w="8240955"/><text x="36.8380%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (8,240,955 samples, 0.20%)</title><rect x="36.5880%" y="565" width="0.1976%" height="15" fill="rgb(239,43,17)" fg:x="1525587627" fg:w="8240955"/><text x="36.8380%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8,240,955 samples, 0.20%)</title><rect x="36.5880%" y="549" width="0.1976%" height="15" fill="rgb(231,177,25)" fg:x="1525587627" fg:w="8240955"/><text x="36.8380%" y="559.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (24,651,932 samples, 0.59%)</title><rect x="36.7857%" y="677" width="0.5912%" height="15" fill="rgb(219,179,1)" fg:x="1533828582" fg:w="24651932"/><text x="37.0357%" y="687.50"></text></g><g><title>onebrc::process_raw_stations::_{{closure}} (24,651,932 samples, 0.59%)</title><rect x="36.7857%" y="661" width="0.5912%" height="15" fill="rgb(238,219,53)" fg:x="1533828582" fg:w="24651932"/><text x="37.0357%" y="671.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (234,318,309 samples, 5.62%)</title><rect x="36.7857%" y="757" width="5.6196%" height="15" fill="rgb(232,167,36)" fg:x="1533828582" fg:w="234318309"/><text x="37.0357%" y="767.50">&lt;core::..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (234,318,309 samples, 5.62%)</title><rect x="36.7857%" y="741" width="5.6196%" height="15" fill="rgb(244,19,51)" fg:x="1533828582" fg:w="234318309"/><text x="37.0357%" y="751.50">core::s..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (234,318,309 samples, 5.62%)</title><rect x="36.7857%" y="725" width="5.6196%" height="15" fill="rgb(224,6,22)" fg:x="1533828582" fg:w="234318309"/><text x="37.0357%" y="735.50">&lt;core::..</text></g><g><title>core::str::pattern::Searcher::next_match (234,318,309 samples, 5.62%)</title><rect x="36.7857%" y="709" width="5.6196%" height="15" fill="rgb(224,145,5)" fg:x="1533828582" fg:w="234318309"/><text x="37.0357%" y="719.50">core::s..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (234,318,309 samples, 5.62%)</title><rect x="36.7857%" y="693" width="5.6196%" height="15" fill="rgb(234,130,49)" fg:x="1533828582" fg:w="234318309"/><text x="37.0357%" y="703.50">&lt;core::..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (209,666,377 samples, 5.03%)</title><rect x="37.3769%" y="677" width="5.0284%" height="15" fill="rgb(254,6,2)" fg:x="1558480514" fg:w="209666377"/><text x="37.6269%" y="687.50">&lt;core:..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (167,152,156 samples, 4.01%)</title><rect x="38.3965%" y="661" width="4.0088%" height="15" fill="rgb(208,96,46)" fg:x="1600994735" fg:w="167152156"/><text x="38.6465%" y="671.50">&lt;cor..</text></g><g><title>core::str::validations::next_code_point (167,152,156 samples, 4.01%)</title><rect x="38.3965%" y="645" width="4.0088%" height="15" fill="rgb(239,3,39)" fg:x="1600994735" fg:w="167152156"/><text x="38.6465%" y="655.50">core..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16,377,237 samples, 0.39%)</title><rect x="42.0125%" y="629" width="0.3928%" height="15" fill="rgb(233,210,1)" fg:x="1751769654" fg:w="16377237"/><text x="42.2625%" y="639.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (12,445,678 samples, 0.30%)</title><rect x="42.1068%" y="613" width="0.2985%" height="15" fill="rgb(244,137,37)" fg:x="1755701213" fg:w="12445678"/><text x="42.3568%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29,797,607 samples, 0.71%)</title><rect x="42.4053%" y="629" width="0.7146%" height="15" fill="rgb(240,136,2)" fg:x="1768146891" fg:w="29797607"/><text x="42.6553%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (29,797,607 samples, 0.71%)</title><rect x="42.4053%" y="613" width="0.7146%" height="15" fill="rgb(239,18,37)" fg:x="1768146891" fg:w="29797607"/><text x="42.6553%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (29,797,607 samples, 0.71%)</title><rect x="42.4053%" y="597" width="0.7146%" height="15" fill="rgb(218,185,22)" fg:x="1768146891" fg:w="29797607"/><text x="42.6553%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (29,797,607 samples, 0.71%)</title><rect x="42.4053%" y="581" width="0.7146%" height="15" fill="rgb(225,218,4)" fg:x="1768146891" fg:w="29797607"/><text x="42.6553%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25,466,570 samples, 0.61%)</title><rect x="42.5092%" y="565" width="0.6108%" height="15" fill="rgb(230,182,32)" fg:x="1772477928" fg:w="25466570"/><text x="42.7592%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25,466,570 samples, 0.61%)</title><rect x="42.5092%" y="549" width="0.6108%" height="15" fill="rgb(242,56,43)" fg:x="1772477928" fg:w="25466570"/><text x="42.7592%" y="559.50"></text></g><g><title>alloc::alloc::alloc (25,466,570 samples, 0.61%)</title><rect x="42.5092%" y="533" width="0.6108%" height="15" fill="rgb(233,99,24)" fg:x="1772477928" fg:w="25466570"/><text x="42.7592%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (62,450,212 samples, 1.50%)</title><rect x="42.4053%" y="709" width="1.4977%" height="15" fill="rgb(234,209,42)" fg:x="1768146891" fg:w="62450212"/><text x="42.6553%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (62,450,212 samples, 1.50%)</title><rect x="42.4053%" y="693" width="1.4977%" height="15" fill="rgb(227,7,12)" fg:x="1768146891" fg:w="62450212"/><text x="42.6553%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (62,450,212 samples, 1.50%)</title><rect x="42.4053%" y="677" width="1.4977%" height="15" fill="rgb(245,203,43)" fg:x="1768146891" fg:w="62450212"/><text x="42.6553%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (62,450,212 samples, 1.50%)</title><rect x="42.4053%" y="661" width="1.4977%" height="15" fill="rgb(238,205,33)" fg:x="1768146891" fg:w="62450212"/><text x="42.6553%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (62,450,212 samples, 1.50%)</title><rect x="42.4053%" y="645" width="1.4977%" height="15" fill="rgb(231,56,7)" fg:x="1768146891" fg:w="62450212"/><text x="42.6553%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (32,652,605 samples, 0.78%)</title><rect x="43.1199%" y="629" width="0.7831%" height="15" fill="rgb(244,186,29)" fg:x="1797944498" fg:w="32652605"/><text x="43.3699%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32,652,605 samples, 0.78%)</title><rect x="43.1199%" y="613" width="0.7831%" height="15" fill="rgb(234,111,31)" fg:x="1797944498" fg:w="32652605"/><text x="43.3699%" y="623.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (70,653,793 samples, 1.69%)</title><rect x="42.4053%" y="757" width="1.6945%" height="15" fill="rgb(241,149,10)" fg:x="1768146891" fg:w="70653793"/><text x="42.6553%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (70,653,793 samples, 1.69%)</title><rect x="42.4053%" y="741" width="1.6945%" height="15" fill="rgb(249,206,44)" fg:x="1768146891" fg:w="70653793"/><text x="42.6553%" y="751.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (70,653,793 samples, 1.69%)</title><rect x="42.4053%" y="725" width="1.6945%" height="15" fill="rgb(251,153,30)" fg:x="1768146891" fg:w="70653793"/><text x="42.6553%" y="735.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (8,203,581 samples, 0.20%)</title><rect x="43.9030%" y="709" width="0.1967%" height="15" fill="rgb(239,152,38)" fg:x="1830597103" fg:w="8203581"/><text x="44.1530%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (4,330,452 samples, 0.10%)</title><rect x="44.0998%" y="757" width="0.1039%" height="15" fill="rgb(249,139,47)" fg:x="1838800684" fg:w="4330452"/><text x="44.3498%" y="767.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (8,488,473 samples, 0.20%)</title><rect x="44.2036%" y="757" width="0.2036%" height="15" fill="rgb(244,64,35)" fg:x="1843131136" fg:w="8488473"/><text x="44.4536%" y="767.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (20,844,611 samples, 0.50%)</title><rect x="44.4072%" y="757" width="0.4999%" height="15" fill="rgb(216,46,15)" fg:x="1851619609" fg:w="20844611"/><text x="44.6572%" y="767.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (20,844,611 samples, 0.50%)</title><rect x="44.4072%" y="741" width="0.4999%" height="15" fill="rgb(250,74,19)" fg:x="1851619609" fg:w="20844611"/><text x="44.6572%" y="751.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (20,844,611 samples, 0.50%)</title><rect x="44.4072%" y="725" width="0.4999%" height="15" fill="rgb(249,42,33)" fg:x="1851619609" fg:w="20844611"/><text x="44.6572%" y="735.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (20,844,611 samples, 0.50%)</title><rect x="44.4072%" y="709" width="0.4999%" height="15" fill="rgb(242,149,17)" fg:x="1851619609" fg:w="20844611"/><text x="44.6572%" y="719.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (20,844,611 samples, 0.50%)</title><rect x="44.4072%" y="693" width="0.4999%" height="15" fill="rgb(244,29,21)" fg:x="1851619609" fg:w="20844611"/><text x="44.6572%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (20,844,611 samples, 0.50%)</title><rect x="44.4072%" y="677" width="0.4999%" height="15" fill="rgb(220,130,37)" fg:x="1851619609" fg:w="20844611"/><text x="44.6572%" y="687.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (20,844,611 samples, 0.50%)</title><rect x="44.4072%" y="661" width="0.4999%" height="15" fill="rgb(211,67,2)" fg:x="1851619609" fg:w="20844611"/><text x="44.6572%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (20,844,611 samples, 0.50%)</title><rect x="44.4072%" y="645" width="0.4999%" height="15" fill="rgb(235,68,52)" fg:x="1851619609" fg:w="20844611"/><text x="44.6572%" y="655.50"></text></g><g><title>onebrc::Station::add_measurement (15,966,672 samples, 0.38%)</title><rect x="44.9071%" y="757" width="0.3829%" height="15" fill="rgb(246,142,3)" fg:x="1872464220" fg:w="15966672"/><text x="45.1571%" y="767.50"></text></g><g><title>[unknown] (895,200,180 samples, 21.47%)</title><rect x="23.9185%" y="805" width="21.4695%" height="15" fill="rgb(241,25,7)" fg:x="997315284" fg:w="895200180"/><text x="24.1685%" y="815.50">[unknown]</text></g><g><title>onebrc::main (449,044,154 samples, 10.77%)</title><rect x="34.6186%" y="789" width="10.7694%" height="15" fill="rgb(242,119,39)" fg:x="1443471310" fg:w="449044154"/><text x="34.8686%" y="799.50">onebrc::main</text></g><g><title>onebrc::process_raw_stations (449,044,154 samples, 10.77%)</title><rect x="34.6186%" y="773" width="10.7694%" height="15" fill="rgb(241,98,45)" fg:x="1443471310" fg:w="449044154"/><text x="34.8686%" y="783.50">onebrc::process_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (4,084,572 samples, 0.10%)</title><rect x="45.2901%" y="757" width="0.0980%" height="15" fill="rgb(254,28,30)" fg:x="1888430892" fg:w="4084572"/><text x="45.5401%" y="767.50"></text></g><g><title>std::collections::hash::map::map_entry (4,084,572 samples, 0.10%)</title><rect x="45.2901%" y="741" width="0.0980%" height="15" fill="rgb(241,142,54)" fg:x="1888430892" fg:w="4084572"/><text x="45.5401%" y="751.50"></text></g><g><title>__rdl_alloc (4,331,503 samples, 0.10%)</title><rect x="45.3880%" y="805" width="0.1039%" height="15" fill="rgb(222,85,15)" fg:x="1892515464" fg:w="4331503"/><text x="45.6380%" y="815.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4,331,503 samples, 0.10%)</title><rect x="45.3880%" y="789" width="0.1039%" height="15" fill="rgb(210,85,47)" fg:x="1892515464" fg:w="4331503"/><text x="45.6380%" y="799.50"></text></g><g><title>__rdl_dealloc (4,030,967 samples, 0.10%)</title><rect x="45.4919%" y="805" width="0.0967%" height="15" fill="rgb(224,206,25)" fg:x="1896846967" fg:w="4030967"/><text x="45.7419%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="533" width="0.1038%" height="15" fill="rgb(243,201,19)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="517" width="0.1038%" height="15" fill="rgb(236,59,4)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="501" width="0.1038%" height="15" fill="rgb(254,179,45)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="485" width="0.1038%" height="15" fill="rgb(226,14,10)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="469" width="0.1038%" height="15" fill="rgb(244,27,41)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="453" width="0.1038%" height="15" fill="rgb(235,35,32)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="437" width="0.1038%" height="15" fill="rgb(218,68,31)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="447.50"></text></g><g><title>cfree (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="421" width="0.1038%" height="15" fill="rgb(207,120,37)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="431.50"></text></g><g><title>__munmap (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="405" width="0.1038%" height="15" fill="rgb(227,98,0)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="415.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="389" width="0.1038%" height="15" fill="rgb(207,7,3)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="399.50"></text></g><g><title>do_syscall_64 (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="373" width="0.1038%" height="15" fill="rgb(206,98,19)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="383.50"></text></g><g><title>__x64_sys_munmap (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="357" width="0.1038%" height="15" fill="rgb(217,5,26)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="367.50"></text></g><g><title>__vm_munmap (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="341" width="0.1038%" height="15" fill="rgb(235,190,38)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="351.50"></text></g><g><title>do_vmi_munmap (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="325" width="0.1038%" height="15" fill="rgb(247,86,24)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="335.50"></text></g><g><title>do_vmi_align_munmap (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="309" width="0.1038%" height="15" fill="rgb(205,101,16)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="319.50"></text></g><g><title>vms_complete_munmap_vmas (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="293" width="0.1038%" height="15" fill="rgb(246,168,33)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="303.50"></text></g><g><title>vms_clear_ptes (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="277" width="0.1038%" height="15" fill="rgb(231,114,1)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="287.50"></text></g><g><title>lru_add_drain (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="261" width="0.1038%" height="15" fill="rgb(207,184,53)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="271.50"></text></g><g><title>lru_add_drain_cpu (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="245" width="0.1038%" height="15" fill="rgb(224,95,51)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="255.50"></text></g><g><title>folio_batch_move_lru (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="229" width="0.1038%" height="15" fill="rgb(212,188,45)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="239.50"></text></g><g><title>lru_add (4,328,873 samples, 0.10%)</title><rect x="45.5886%" y="213" width="0.1038%" height="15" fill="rgb(223,154,38)" fg:x="1900877934" fg:w="4328873"/><text x="45.8386%" y="223.50"></text></g><g><title>[libc.so.6] (29,425,227 samples, 0.71%)</title><rect x="46.8648%" y="421" width="0.7057%" height="15" fill="rgb(251,22,52)" fg:x="1954089840" fg:w="29425227"/><text x="47.1148%" y="431.50"></text></g><g><title>cfree (8,151,257 samples, 0.20%)</title><rect x="47.5705%" y="421" width="0.1955%" height="15" fill="rgb(229,209,22)" fg:x="1983515067" fg:w="8151257"/><text x="47.8205%" y="431.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::pow10_fast_path (8,483,888 samples, 0.20%)</title><rect x="48.8654%" y="373" width="0.2035%" height="15" fill="rgb(234,138,34)" fg:x="2037510661" fg:w="8483888"/><text x="49.1154%" y="383.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (58,650,669 samples, 1.41%)</title><rect x="47.7660%" y="421" width="1.4066%" height="15" fill="rgb(212,95,11)" fg:x="1991666324" fg:w="58650669"/><text x="48.0160%" y="431.50"></text></g><g><title>core::num::dec2flt::dec2flt (50,294,229 samples, 1.21%)</title><rect x="47.9664%" y="405" width="1.2062%" height="15" fill="rgb(240,179,47)" fg:x="2000022764" fg:w="50294229"/><text x="48.2164%" y="415.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (21,412,934 samples, 0.51%)</title><rect x="48.6590%" y="389" width="0.5135%" height="15" fill="rgb(240,163,11)" fg:x="2028904059" fg:w="21412934"/><text x="48.9090%" y="399.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (4,322,444 samples, 0.10%)</title><rect x="49.0689%" y="373" width="0.1037%" height="15" fill="rgb(236,37,12)" fg:x="2045994549" fg:w="4322444"/><text x="49.3189%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (8,220,487 samples, 0.20%)</title><rect x="49.9913%" y="357" width="0.1972%" height="15" fill="rgb(232,164,16)" fg:x="2084456807" fg:w="8220487"/><text x="50.2413%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (4,328,954 samples, 0.10%)</title><rect x="50.1885%" y="357" width="0.1038%" height="15" fill="rgb(244,205,15)" fg:x="2092677294" fg:w="4328954"/><text x="50.4385%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (54,923,647 samples, 1.32%)</title><rect x="49.1726%" y="421" width="1.3172%" height="15" fill="rgb(223,117,47)" fg:x="2050316993" fg:w="54923647"/><text x="49.4226%" y="431.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (46,275,133 samples, 1.11%)</title><rect x="49.3800%" y="405" width="1.1098%" height="15" fill="rgb(244,107,35)" fg:x="2058965507" fg:w="46275133"/><text x="49.6300%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (42,030,317 samples, 1.01%)</title><rect x="49.4818%" y="389" width="1.0080%" height="15" fill="rgb(205,140,8)" fg:x="2063210323" fg:w="42030317"/><text x="49.7318%" y="399.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (37,883,248 samples, 0.91%)</title><rect x="49.5812%" y="373" width="0.9086%" height="15" fill="rgb(228,84,46)" fg:x="2067357392" fg:w="37883248"/><text x="49.8312%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (8,234,392 samples, 0.20%)</title><rect x="50.2923%" y="357" width="0.1975%" height="15" fill="rgb(254,188,9)" fg:x="2097006248" fg:w="8234392"/><text x="50.5423%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_aligned (69,430,703 samples, 1.67%)</title><rect x="50.4898%" y="421" width="1.6652%" height="15" fill="rgb(206,112,54)" fg:x="2105240640" fg:w="69430703"/><text x="50.7398%" y="431.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (60,991,288 samples, 1.46%)</title><rect x="50.6922%" y="405" width="1.4627%" height="15" fill="rgb(216,84,49)" fg:x="2113680055" fg:w="60991288"/><text x="50.9422%" y="415.50"></text></g><g><title>core::slice::memchr::memchr_naive (32,719,781 samples, 0.78%)</title><rect x="51.3702%" y="389" width="0.7847%" height="15" fill="rgb(214,194,35)" fg:x="2141951562" fg:w="32719781"/><text x="51.6202%" y="399.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (297,935,092 samples, 7.15%)</title><rect x="45.9920%" y="485" width="7.1454%" height="15" fill="rgb(249,28,3)" fg:x="1917700063" fg:w="297935092"/><text x="46.2420%" y="495.50">&lt;core::str..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (297,935,092 samples, 7.15%)</title><rect x="45.9920%" y="469" width="7.1454%" height="15" fill="rgb(222,56,52)" fg:x="1917700063" fg:w="297935092"/><text x="46.2420%" y="479.50">core::str:..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (297,935,092 samples, 7.15%)</title><rect x="45.9920%" y="453" width="7.1454%" height="15" fill="rgb(245,217,50)" fg:x="1917700063" fg:w="297935092"/><text x="46.2420%" y="463.50">&lt;core::str..</text></g><g><title>core::slice::memchr::memchr (289,697,778 samples, 6.95%)</title><rect x="46.1896%" y="437" width="6.9478%" height="15" fill="rgb(213,201,24)" fg:x="1925937377" fg:w="289697778"/><text x="46.4396%" y="447.50">core::sli..</text></g><g><title>malloc (40,963,812 samples, 0.98%)</title><rect x="52.1549%" y="421" width="0.9824%" height="15" fill="rgb(248,116,28)" fg:x="2174671343" fg:w="40963812"/><text x="52.4049%" y="431.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (310,692,480 samples, 7.45%)</title><rect x="45.9920%" y="517" width="7.4513%" height="15" fill="rgb(219,72,43)" fg:x="1917700063" fg:w="310692480"/><text x="46.2420%" y="527.50">&lt;core::str..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (310,692,480 samples, 7.45%)</title><rect x="45.9920%" y="501" width="7.4513%" height="15" fill="rgb(209,138,14)" fg:x="1917700063" fg:w="310692480"/><text x="46.2420%" y="511.50">&lt;core::ite..</text></g><g><title>core::option::Option&lt;T&gt;::map (12,757,388 samples, 0.31%)</title><rect x="53.1374%" y="485" width="0.3060%" height="15" fill="rgb(222,18,33)" fg:x="2215635155" fg:w="12757388"/><text x="53.3874%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (12,757,388 samples, 0.31%)</title><rect x="53.1374%" y="469" width="0.3060%" height="15" fill="rgb(213,199,7)" fg:x="2215635155" fg:w="12757388"/><text x="53.3874%" y="479.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (12,757,388 samples, 0.31%)</title><rect x="53.1374%" y="453" width="0.3060%" height="15" fill="rgb(250,110,10)" fg:x="2215635155" fg:w="12757388"/><text x="53.3874%" y="463.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (12,757,388 samples, 0.31%)</title><rect x="53.1374%" y="437" width="0.3060%" height="15" fill="rgb(248,123,6)" fg:x="2215635155" fg:w="12757388"/><text x="53.3874%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (12,757,388 samples, 0.31%)</title><rect x="53.1374%" y="421" width="0.3060%" height="15" fill="rgb(206,91,31)" fg:x="2215635155" fg:w="12757388"/><text x="53.3874%" y="431.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (12,757,388 samples, 0.31%)</title><rect x="53.1374%" y="405" width="0.3060%" height="15" fill="rgb(211,154,13)" fg:x="2215635155" fg:w="12757388"/><text x="53.3874%" y="415.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (12,757,388 samples, 0.31%)</title><rect x="53.1374%" y="389" width="0.3060%" height="15" fill="rgb(225,148,7)" fg:x="2215635155" fg:w="12757388"/><text x="53.3874%" y="399.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (8,580,482 samples, 0.21%)</title><rect x="53.2376%" y="373" width="0.2058%" height="15" fill="rgb(220,160,43)" fg:x="2219812061" fg:w="8580482"/><text x="53.4876%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (8,580,482 samples, 0.21%)</title><rect x="53.2376%" y="357" width="0.2058%" height="15" fill="rgb(213,52,39)" fg:x="2219812061" fg:w="8580482"/><text x="53.4876%" y="367.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (19,791,156 samples, 0.47%)</title><rect x="53.5436%" y="437" width="0.4746%" height="15" fill="rgb(243,137,7)" fg:x="2232572215" fg:w="19791156"/><text x="53.7936%" y="447.50"></text></g><g><title>onebrc::process_raw_stations::_{{closure}} (19,791,156 samples, 0.47%)</title><rect x="53.5436%" y="421" width="0.4746%" height="15" fill="rgb(230,79,13)" fg:x="2232572215" fg:w="19791156"/><text x="53.7936%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,038,859 samples, 0.60%)</title><rect x="56.2040%" y="389" width="0.6005%" height="15" fill="rgb(247,105,23)" fg:x="2343502546" fg:w="25038859"/><text x="56.4540%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (16,647,644 samples, 0.40%)</title><rect x="56.4053%" y="373" width="0.3993%" height="15" fill="rgb(223,179,41)" fg:x="2351893761" fg:w="16647644"/><text x="56.6553%" y="383.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (3,747,195 samples, 0.09%)</title><rect x="56.8045%" y="389" width="0.0899%" height="15" fill="rgb(218,9,34)" fg:x="2368541405" fg:w="3747195"/><text x="57.0545%" y="399.50"></text></g><g><title>sysvec_apic_timer_interrupt (3,747,195 samples, 0.09%)</title><rect x="56.8045%" y="373" width="0.0899%" height="15" fill="rgb(222,106,8)" fg:x="2368541405" fg:w="3747195"/><text x="57.0545%" y="383.50"></text></g><g><title>__sysvec_apic_timer_interrupt (3,747,195 samples, 0.09%)</title><rect x="56.8045%" y="357" width="0.0899%" height="15" fill="rgb(211,220,0)" fg:x="2368541405" fg:w="3747195"/><text x="57.0545%" y="367.50"></text></g><g><title>hrtimer_interrupt (3,747,195 samples, 0.09%)</title><rect x="56.8045%" y="341" width="0.0899%" height="15" fill="rgb(229,52,16)" fg:x="2368541405" fg:w="3747195"/><text x="57.0545%" y="351.50"></text></g><g><title>__hrtimer_run_queues (3,747,195 samples, 0.09%)</title><rect x="56.8045%" y="325" width="0.0899%" height="15" fill="rgb(212,155,18)" fg:x="2368541405" fg:w="3747195"/><text x="57.0545%" y="335.50"></text></g><g><title>tick_nohz_handler (3,747,195 samples, 0.09%)</title><rect x="56.8045%" y="309" width="0.0899%" height="15" fill="rgb(242,21,14)" fg:x="2368541405" fg:w="3747195"/><text x="57.0545%" y="319.50"></text></g><g><title>update_wall_time (3,747,195 samples, 0.09%)</title><rect x="56.8045%" y="293" width="0.0899%" height="15" fill="rgb(222,19,48)" fg:x="2368541405" fg:w="3747195"/><text x="57.0545%" y="303.50"></text></g><g><title>timekeeping_advance (3,747,195 samples, 0.09%)</title><rect x="56.8045%" y="277" width="0.0899%" height="15" fill="rgb(232,45,27)" fg:x="2368541405" fg:w="3747195"/><text x="57.0545%" y="287.50"></text></g><g><title>timekeeping_update (3,747,195 samples, 0.09%)</title><rect x="56.8045%" y="261" width="0.0899%" height="15" fill="rgb(249,103,42)" fg:x="2368541405" fg:w="3747195"/><text x="57.0545%" y="271.50"></text></g><g><title>notifier_call_chain (3,747,195 samples, 0.09%)</title><rect x="56.8045%" y="245" width="0.0899%" height="15" fill="rgb(246,81,33)" fg:x="2368541405" fg:w="3747195"/><text x="57.0545%" y="255.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (147,811,696 samples, 3.54%)</title><rect x="53.4433%" y="517" width="3.5450%" height="15" fill="rgb(252,33,42)" fg:x="2228392543" fg:w="147811696"/><text x="53.6933%" y="527.50">&lt;cor..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (147,811,696 samples, 3.54%)</title><rect x="53.4433%" y="501" width="3.5450%" height="15" fill="rgb(209,212,41)" fg:x="2228392543" fg:w="147811696"/><text x="53.6933%" y="511.50">core..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (143,632,024 samples, 3.44%)</title><rect x="53.5436%" y="485" width="3.4447%" height="15" fill="rgb(207,154,6)" fg:x="2232572215" fg:w="143632024"/><text x="53.7936%" y="495.50">&lt;co..</text></g><g><title>core::str::pattern::Searcher::next_match (143,632,024 samples, 3.44%)</title><rect x="53.5436%" y="469" width="3.4447%" height="15" fill="rgb(223,64,47)" fg:x="2232572215" fg:w="143632024"/><text x="53.7936%" y="479.50">cor..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (143,632,024 samples, 3.44%)</title><rect x="53.5436%" y="453" width="3.4447%" height="15" fill="rgb(211,161,38)" fg:x="2232572215" fg:w="143632024"/><text x="53.7936%" y="463.50">&lt;co..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (123,840,868 samples, 2.97%)</title><rect x="54.0182%" y="437" width="2.9701%" height="15" fill="rgb(219,138,40)" fg:x="2252363371" fg:w="123840868"/><text x="54.2682%" y="447.50">&lt;co..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (107,206,837 samples, 2.57%)</title><rect x="54.4172%" y="421" width="2.5711%" height="15" fill="rgb(241,228,46)" fg:x="2268997402" fg:w="107206837"/><text x="54.6672%" y="431.50">&lt;c..</text></g><g><title>core::str::validations::next_code_point (107,206,837 samples, 2.57%)</title><rect x="54.4172%" y="405" width="2.5711%" height="15" fill="rgb(223,209,38)" fg:x="2268997402" fg:w="107206837"/><text x="54.6672%" y="415.50">co..</text></g><g><title>core::str::validations::utf8_first_byte (3,915,639 samples, 0.09%)</title><rect x="56.8944%" y="389" width="0.0939%" height="15" fill="rgb(236,164,45)" fg:x="2372288600" fg:w="3915639"/><text x="57.1444%" y="399.50"></text></g><g><title>[libc.so.6] (3,941,468 samples, 0.09%)</title><rect x="57.7874%" y="277" width="0.0945%" height="15" fill="rgb(231,15,5)" fg:x="2409524345" fg:w="3941468"/><text x="58.0374%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (41,593,804 samples, 1.00%)</title><rect x="56.9883%" y="389" width="0.9975%" height="15" fill="rgb(252,35,15)" fg:x="2376204239" fg:w="41593804"/><text x="57.2383%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (41,593,804 samples, 1.00%)</title><rect x="56.9883%" y="373" width="0.9975%" height="15" fill="rgb(248,181,18)" fg:x="2376204239" fg:w="41593804"/><text x="57.2383%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (41,593,804 samples, 1.00%)</title><rect x="56.9883%" y="357" width="0.9975%" height="15" fill="rgb(233,39,42)" fg:x="2376204239" fg:w="41593804"/><text x="57.2383%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (41,593,804 samples, 1.00%)</title><rect x="56.9883%" y="341" width="0.9975%" height="15" fill="rgb(238,110,33)" fg:x="2376204239" fg:w="41593804"/><text x="57.2383%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28,779,343 samples, 0.69%)</title><rect x="57.2956%" y="325" width="0.6902%" height="15" fill="rgb(233,195,10)" fg:x="2389018700" fg:w="28779343"/><text x="57.5456%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28,779,343 samples, 0.69%)</title><rect x="57.2956%" y="309" width="0.6902%" height="15" fill="rgb(254,105,3)" fg:x="2389018700" fg:w="28779343"/><text x="57.5456%" y="319.50"></text></g><g><title>alloc::alloc::alloc (28,779,343 samples, 0.69%)</title><rect x="57.2956%" y="293" width="0.6902%" height="15" fill="rgb(221,225,9)" fg:x="2389018700" fg:w="28779343"/><text x="57.5456%" y="303.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (4,332,230 samples, 0.10%)</title><rect x="57.8819%" y="277" width="0.1039%" height="15" fill="rgb(224,227,45)" fg:x="2413465813" fg:w="4332230"/><text x="58.1319%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (4,332,230 samples, 0.10%)</title><rect x="57.8819%" y="261" width="0.1039%" height="15" fill="rgb(229,198,43)" fg:x="2413465813" fg:w="4332230"/><text x="58.1319%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (4,332,230 samples, 0.10%)</title><rect x="57.8819%" y="245" width="0.1039%" height="15" fill="rgb(206,209,35)" fg:x="2413465813" fg:w="4332230"/><text x="58.1319%" y="255.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (4,332,230 samples, 0.10%)</title><rect x="57.8819%" y="229" width="0.1039%" height="15" fill="rgb(245,195,53)" fg:x="2413465813" fg:w="4332230"/><text x="58.1319%" y="239.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (4,332,230 samples, 0.10%)</title><rect x="57.8819%" y="213" width="0.1039%" height="15" fill="rgb(240,92,26)" fg:x="2413465813" fg:w="4332230"/><text x="58.1319%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (79,302,856 samples, 1.90%)</title><rect x="56.9883%" y="469" width="1.9019%" height="15" fill="rgb(207,40,23)" fg:x="2376204239" fg:w="79302856"/><text x="57.2383%" y="479.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (79,302,856 samples, 1.90%)</title><rect x="56.9883%" y="453" width="1.9019%" height="15" fill="rgb(223,111,35)" fg:x="2376204239" fg:w="79302856"/><text x="57.2383%" y="463.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (79,302,856 samples, 1.90%)</title><rect x="56.9883%" y="437" width="1.9019%" height="15" fill="rgb(229,147,28)" fg:x="2376204239" fg:w="79302856"/><text x="57.2383%" y="447.50">a..</text></g><g><title>alloc::slice::hack::to_vec (79,302,856 samples, 1.90%)</title><rect x="56.9883%" y="421" width="1.9019%" height="15" fill="rgb(211,29,28)" fg:x="2376204239" fg:w="79302856"/><text x="57.2383%" y="431.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (79,302,856 samples, 1.90%)</title><rect x="56.9883%" y="405" width="1.9019%" height="15" fill="rgb(228,72,33)" fg:x="2376204239" fg:w="79302856"/><text x="57.2383%" y="415.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (37,709,052 samples, 0.90%)</title><rect x="57.9858%" y="389" width="0.9044%" height="15" fill="rgb(205,214,31)" fg:x="2417798043" fg:w="37709052"/><text x="58.2358%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37,709,052 samples, 0.90%)</title><rect x="57.9858%" y="373" width="0.9044%" height="15" fill="rgb(224,111,15)" fg:x="2417798043" fg:w="37709052"/><text x="58.2358%" y="383.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (83,517,933 samples, 2.00%)</title><rect x="56.9883%" y="517" width="2.0030%" height="15" fill="rgb(253,21,26)" fg:x="2376204239" fg:w="83517933"/><text x="57.2383%" y="527.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (83,517,933 samples, 2.00%)</title><rect x="56.9883%" y="501" width="2.0030%" height="15" fill="rgb(245,139,43)" fg:x="2376204239" fg:w="83517933"/><text x="57.2383%" y="511.50">&lt;..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (83,517,933 samples, 2.00%)</title><rect x="56.9883%" y="485" width="2.0030%" height="15" fill="rgb(252,170,7)" fg:x="2376204239" fg:w="83517933"/><text x="57.2383%" y="495.50">a..</text></g><g><title>alloc::string::String::from_utf8_unchecked (4,215,077 samples, 0.10%)</title><rect x="58.8902%" y="469" width="0.1011%" height="15" fill="rgb(231,118,14)" fg:x="2455507095" fg:w="4215077"/><text x="59.1402%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (8,397,895 samples, 0.20%)</title><rect x="58.9913%" y="517" width="0.2014%" height="15" fill="rgb(238,83,0)" fg:x="2459722172" fg:w="8397895"/><text x="59.2413%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,313,016 samples, 0.10%)</title><rect x="60.5153%" y="421" width="0.1034%" height="15" fill="rgb(221,39,39)" fg:x="2523269023" fg:w="4313016"/><text x="60.7653%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,313,016 samples, 0.10%)</title><rect x="60.5153%" y="405" width="0.1034%" height="15" fill="rgb(222,119,46)" fg:x="2523269023" fg:w="4313016"/><text x="60.7653%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (16,272,090 samples, 0.39%)</title><rect x="60.6188%" y="405" width="0.3903%" height="15" fill="rgb(222,165,49)" fg:x="2527582039" fg:w="16272090"/><text x="60.8688%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (37,553,484 samples, 0.90%)</title><rect x="60.3159%" y="469" width="0.9006%" height="15" fill="rgb(219,113,52)" fg:x="2514952016" fg:w="37553484"/><text x="60.5659%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (37,553,484 samples, 0.90%)</title><rect x="60.3159%" y="453" width="0.9006%" height="15" fill="rgb(214,7,15)" fg:x="2514952016" fg:w="37553484"/><text x="60.5659%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (37,553,484 samples, 0.90%)</title><rect x="60.3159%" y="437" width="0.9006%" height="15" fill="rgb(235,32,4)" fg:x="2514952016" fg:w="37553484"/><text x="60.5659%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (24,923,461 samples, 0.60%)</title><rect x="60.6188%" y="421" width="0.5977%" height="15" fill="rgb(238,90,54)" fg:x="2527582039" fg:w="24923461"/><text x="60.8688%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8,651,371 samples, 0.21%)</title><rect x="61.0090%" y="405" width="0.2075%" height="15" fill="rgb(213,208,19)" fg:x="2543854129" fg:w="8651371"/><text x="61.2590%" y="415.50"></text></g><g><title>[libc.so.6] (62,882,342 samples, 1.51%)</title><rect x="59.9099%" y="501" width="1.5081%" height="15" fill="rgb(233,156,4)" fg:x="2498025370" fg:w="62882342"/><text x="60.1599%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (45,955,696 samples, 1.10%)</title><rect x="60.3159%" y="485" width="1.1022%" height="15" fill="rgb(207,194,5)" fg:x="2514952016" fg:w="45955696"/><text x="60.5659%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8,402,212 samples, 0.20%)</title><rect x="61.2165%" y="469" width="0.2015%" height="15" fill="rgb(206,111,30)" fg:x="2552505500" fg:w="8402212"/><text x="61.4665%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (4,072,611 samples, 0.10%)</title><rect x="61.3203%" y="453" width="0.0977%" height="15" fill="rgb(243,70,54)" fg:x="2556835101" fg:w="4072611"/><text x="61.5703%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4,072,611 samples, 0.10%)</title><rect x="61.3203%" y="437" width="0.0977%" height="15" fill="rgb(242,28,8)" fg:x="2556835101" fg:w="4072611"/><text x="61.5703%" y="447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (4,072,611 samples, 0.10%)</title><rect x="61.3203%" y="421" width="0.0977%" height="15" fill="rgb(219,106,18)" fg:x="2556835101" fg:w="4072611"/><text x="61.5703%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4,072,611 samples, 0.10%)</title><rect x="61.3203%" y="405" width="0.0977%" height="15" fill="rgb(244,222,10)" fg:x="2556835101" fg:w="4072611"/><text x="61.5703%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4,072,611 samples, 0.10%)</title><rect x="61.3203%" y="389" width="0.0977%" height="15" fill="rgb(236,179,52)" fg:x="2556835101" fg:w="4072611"/><text x="61.5703%" y="399.50"></text></g><g><title>core::hash::Hasher::write_u8 (4,072,611 samples, 0.10%)</title><rect x="61.3203%" y="373" width="0.0977%" height="15" fill="rgb(213,23,39)" fg:x="2556835101" fg:w="4072611"/><text x="61.5703%" y="383.50"></text></g><g><title>cfree (3,449,178 samples, 0.08%)</title><rect x="61.4180%" y="501" width="0.0827%" height="15" fill="rgb(238,48,10)" fg:x="2560907712" fg:w="3449178"/><text x="61.6680%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,331,305 samples, 0.10%)</title><rect x="62.8850%" y="389" width="0.1039%" height="15" fill="rgb(251,196,23)" fg:x="2622074208" fg:w="4331305"/><text x="63.1350%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,331,305 samples, 0.10%)</title><rect x="62.8850%" y="373" width="0.1039%" height="15" fill="rgb(250,152,24)" fg:x="2622074208" fg:w="4331305"/><text x="63.1350%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (21,485,208 samples, 0.52%)</title><rect x="62.7810%" y="437" width="0.5153%" height="15" fill="rgb(209,150,17)" fg:x="2617739922" fg:w="21485208"/><text x="63.0310%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (21,485,208 samples, 0.52%)</title><rect x="62.7810%" y="421" width="0.5153%" height="15" fill="rgb(234,202,34)" fg:x="2617739922" fg:w="21485208"/><text x="63.0310%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (21,485,208 samples, 0.52%)</title><rect x="62.7810%" y="405" width="0.5153%" height="15" fill="rgb(253,148,53)" fg:x="2617739922" fg:w="21485208"/><text x="63.0310%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12,819,617 samples, 0.31%)</title><rect x="62.9888%" y="389" width="0.3075%" height="15" fill="rgb(218,129,16)" fg:x="2626405513" fg:w="12819617"/><text x="63.2388%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8,488,076 samples, 0.20%)</title><rect x="63.0927%" y="373" width="0.2036%" height="15" fill="rgb(216,85,19)" fg:x="2630737054" fg:w="8488076"/><text x="63.3427%" y="383.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4,296,658 samples, 0.10%)</title><rect x="63.2963%" y="437" width="0.1030%" height="15" fill="rgb(235,228,7)" fg:x="2639225130" fg:w="4296658"/><text x="63.5463%" y="447.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4,296,658 samples, 0.10%)</title><rect x="63.2963%" y="421" width="0.1030%" height="15" fill="rgb(245,175,0)" fg:x="2639225130" fg:w="4296658"/><text x="63.5463%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4,296,658 samples, 0.10%)</title><rect x="63.2963%" y="405" width="0.1030%" height="15" fill="rgb(208,168,36)" fg:x="2639225130" fg:w="4296658"/><text x="63.5463%" y="415.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4,296,658 samples, 0.10%)</title><rect x="63.2963%" y="389" width="0.1030%" height="15" fill="rgb(246,171,24)" fg:x="2639225130" fg:w="4296658"/><text x="63.5463%" y="399.50"></text></g><g><title>[libc.so.6] (58,810,706 samples, 1.41%)</title><rect x="62.0894%" y="469" width="1.4105%" height="15" fill="rgb(215,142,24)" fg:x="2588903748" fg:w="58810706"/><text x="62.3394%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (29,974,532 samples, 0.72%)</title><rect x="62.7810%" y="453" width="0.7189%" height="15" fill="rgb(250,187,7)" fg:x="2617739922" fg:w="29974532"/><text x="63.0310%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4,192,666 samples, 0.10%)</title><rect x="63.3993%" y="437" width="0.1006%" height="15" fill="rgb(228,66,33)" fg:x="2643521788" fg:w="4192666"/><text x="63.6493%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (4,192,666 samples, 0.10%)</title><rect x="63.3993%" y="421" width="0.1006%" height="15" fill="rgb(234,215,21)" fg:x="2643521788" fg:w="4192666"/><text x="63.6493%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4,192,666 samples, 0.10%)</title><rect x="63.3993%" y="405" width="0.1006%" height="15" fill="rgb(222,191,20)" fg:x="2643521788" fg:w="4192666"/><text x="63.6493%" y="415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (4,192,666 samples, 0.10%)</title><rect x="63.3993%" y="389" width="0.1006%" height="15" fill="rgb(245,79,54)" fg:x="2643521788" fg:w="4192666"/><text x="63.6493%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4,192,666 samples, 0.10%)</title><rect x="63.3993%" y="373" width="0.1006%" height="15" fill="rgb(240,10,37)" fg:x="2643521788" fg:w="4192666"/><text x="63.6493%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4,192,666 samples, 0.10%)</title><rect x="63.3993%" y="357" width="0.1006%" height="15" fill="rgb(214,192,32)" fg:x="2643521788" fg:w="4192666"/><text x="63.6493%" y="367.50"></text></g><g><title>cfree (12,159,617 samples, 0.29%)</title><rect x="63.4999%" y="469" width="0.2916%" height="15" fill="rgb(209,36,54)" fg:x="2647714454" fg:w="12159617"/><text x="63.7499%" y="479.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (21,592,485 samples, 0.52%)</title><rect x="63.7915%" y="469" width="0.5179%" height="15" fill="rgb(220,10,11)" fg:x="2659874071" fg:w="21592485"/><text x="64.0415%" y="479.50"></text></g><g><title>core::num::dec2flt::dec2flt (17,268,578 samples, 0.41%)</title><rect x="63.8952%" y="453" width="0.4142%" height="15" fill="rgb(221,106,17)" fg:x="2664197978" fg:w="17268578"/><text x="64.1452%" y="463.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (4,284,675 samples, 0.10%)</title><rect x="64.2066%" y="437" width="0.1028%" height="15" fill="rgb(251,142,44)" fg:x="2677181881" fg:w="4284675"/><text x="64.4566%" y="447.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (4,284,675 samples, 0.10%)</title><rect x="64.2066%" y="421" width="0.1028%" height="15" fill="rgb(238,13,15)" fg:x="2677181881" fg:w="4284675"/><text x="64.4566%" y="431.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (3,998,356 samples, 0.10%)</title><rect x="64.3094%" y="469" width="0.0959%" height="15" fill="rgb(208,107,27)" fg:x="2681466556" fg:w="3998356"/><text x="64.5594%" y="479.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (3,998,356 samples, 0.10%)</title><rect x="64.3094%" y="453" width="0.0959%" height="15" fill="rgb(205,136,37)" fg:x="2681466556" fg:w="3998356"/><text x="64.5594%" y="463.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (8,073,978 samples, 0.19%)</title><rect x="65.3518%" y="405" width="0.1936%" height="15" fill="rgb(250,205,27)" fg:x="2724933882" fg:w="8073978"/><text x="65.6018%" y="415.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (56,190,956 samples, 1.35%)</title><rect x="64.4053%" y="469" width="1.3476%" height="15" fill="rgb(210,80,43)" fg:x="2685464912" fg:w="56190956"/><text x="64.6553%" y="479.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (40,863,121 samples, 0.98%)</title><rect x="64.7729%" y="453" width="0.9800%" height="15" fill="rgb(247,160,36)" fg:x="2700792747" fg:w="40863121"/><text x="65.0229%" y="463.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (28,806,912 samples, 0.69%)</title><rect x="65.0620%" y="437" width="0.6909%" height="15" fill="rgb(234,13,49)" fg:x="2712848956" fg:w="28806912"/><text x="65.3120%" y="447.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (16,721,986 samples, 0.40%)</title><rect x="65.3518%" y="421" width="0.4010%" height="15" fill="rgb(234,122,0)" fg:x="2724933882" fg:w="16721986"/><text x="65.6018%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (8,648,008 samples, 0.21%)</title><rect x="65.5455%" y="405" width="0.2074%" height="15" fill="rgb(207,146,38)" fg:x="2733007860" fg:w="8648008"/><text x="65.7955%" y="415.50"></text></g><g><title>core::cmp::Ord::min (3,960,297 samples, 0.09%)</title><rect x="66.0402%" y="437" width="0.0950%" height="15" fill="rgb(207,177,25)" fg:x="2753637040" fg:w="3960297"/><text x="66.2902%" y="447.50"></text></g><g><title>core::cmp::min_by (3,960,297 samples, 0.09%)</title><rect x="66.0402%" y="421" width="0.0950%" height="15" fill="rgb(211,178,42)" fg:x="2753637040" fg:w="3960297"/><text x="66.2902%" y="431.50"></text></g><g><title>core::slice::memchr::memchr_aligned (32,634,217 samples, 0.78%)</title><rect x="65.7529%" y="469" width="0.7827%" height="15" fill="rgb(230,69,54)" fg:x="2741655868" fg:w="32634217"/><text x="66.0029%" y="479.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (24,819,271 samples, 0.60%)</title><rect x="65.9403%" y="453" width="0.5952%" height="15" fill="rgb(214,135,41)" fg:x="2749470814" fg:w="24819271"/><text x="66.1903%" y="463.50"></text></g><g><title>core::slice::memchr::memchr_naive (16,692,748 samples, 0.40%)</title><rect x="66.1352%" y="437" width="0.4003%" height="15" fill="rgb(237,67,25)" fg:x="2757597337" fg:w="16692748"/><text x="66.3852%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (218,560,223 samples, 5.24%)</title><rect x="61.5007%" y="501" width="5.2417%" height="15" fill="rgb(222,189,50)" fg:x="2564356890" fg:w="218560223"/><text x="61.7507%" y="511.50">core::..</text></g><g><title>core::num::dec2flt::dec2flt (206,224,540 samples, 4.95%)</title><rect x="61.7966%" y="485" width="4.9459%" height="15" fill="rgb(245,148,34)" fg:x="2576692573" fg:w="206224540"/><text x="62.0466%" y="495.50">core::..</text></g><g><title>malloc (8,627,028 samples, 0.21%)</title><rect x="66.5356%" y="469" width="0.2069%" height="15" fill="rgb(222,29,6)" fg:x="2774290085" fg:w="8627028"/><text x="66.7856%" y="479.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (4,327,048 samples, 0.10%)</title><rect x="67.1375%" y="437" width="0.1038%" height="15" fill="rgb(221,189,43)" fg:x="2799388678" fg:w="4327048"/><text x="67.3875%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,327,048 samples, 0.10%)</title><rect x="67.1375%" y="421" width="0.1038%" height="15" fill="rgb(207,36,27)" fg:x="2799388678" fg:w="4327048"/><text x="67.3875%" y="431.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (33,440,102 samples, 0.80%)</title><rect x="66.7425%" y="501" width="0.8020%" height="15" fill="rgb(217,90,24)" fg:x="2782917113" fg:w="33440102"/><text x="66.9925%" y="511.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (29,235,854 samples, 0.70%)</title><rect x="66.8433%" y="485" width="0.7012%" height="15" fill="rgb(224,66,35)" fg:x="2787121361" fg:w="29235854"/><text x="67.0933%" y="495.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (20,788,309 samples, 0.50%)</title><rect x="67.0459%" y="469" width="0.4986%" height="15" fill="rgb(221,13,50)" fg:x="2795568906" fg:w="20788309"/><text x="67.2959%" y="479.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (20,788,309 samples, 0.50%)</title><rect x="67.0459%" y="453" width="0.4986%" height="15" fill="rgb(236,68,49)" fg:x="2795568906" fg:w="20788309"/><text x="67.2959%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (12,641,489 samples, 0.30%)</title><rect x="67.2413%" y="437" width="0.3032%" height="15" fill="rgb(229,146,28)" fg:x="2803715726" fg:w="12641489"/><text x="67.4913%" y="447.50"></text></g><g><title>core::slice::memchr::memchr_aligned (42,609,387 samples, 1.02%)</title><rect x="67.5444%" y="501" width="1.0219%" height="15" fill="rgb(225,31,38)" fg:x="2816357215" fg:w="42609387"/><text x="67.7944%" y="511.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (29,964,211 samples, 0.72%)</title><rect x="67.8477%" y="485" width="0.7186%" height="15" fill="rgb(250,208,3)" fg:x="2829002391" fg:w="29964211"/><text x="68.0977%" y="495.50"></text></g><g><title>core::slice::memchr::memchr_naive (21,414,166 samples, 0.51%)</title><rect x="68.0528%" y="469" width="0.5136%" height="15" fill="rgb(246,54,23)" fg:x="2837552436" fg:w="21414166"/><text x="68.3028%" y="479.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (395,158,703 samples, 9.48%)</title><rect x="59.1927%" y="517" width="9.4771%" height="15" fill="rgb(243,76,11)" fg:x="2468120067" fg:w="395158703"/><text x="59.4427%" y="527.50">core::str::&lt;im..</text></g><g><title>malloc (4,312,168 samples, 0.10%)</title><rect x="68.5663%" y="501" width="0.1034%" height="15" fill="rgb(245,21,50)" fg:x="2858966602" fg:w="4312168"/><text x="68.8163%" y="511.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (8,014,014 samples, 0.19%)</title><rect x="68.6698%" y="517" width="0.1922%" height="15" fill="rgb(228,9,43)" fg:x="2863278770" fg:w="8014014"/><text x="68.9198%" y="527.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (8,014,014 samples, 0.19%)</title><rect x="68.6698%" y="501" width="0.1922%" height="15" fill="rgb(208,100,47)" fg:x="2863278770" fg:w="8014014"/><text x="68.9198%" y="511.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (8,014,014 samples, 0.19%)</title><rect x="68.6698%" y="485" width="0.1922%" height="15" fill="rgb(232,26,8)" fg:x="2863278770" fg:w="8014014"/><text x="68.9198%" y="495.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (8,014,014 samples, 0.19%)</title><rect x="68.6698%" y="469" width="0.1922%" height="15" fill="rgb(216,166,38)" fg:x="2863278770" fg:w="8014014"/><text x="68.9198%" y="479.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (8,014,014 samples, 0.19%)</title><rect x="68.6698%" y="453" width="0.1922%" height="15" fill="rgb(251,202,51)" fg:x="2863278770" fg:w="8014014"/><text x="68.9198%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (8,014,014 samples, 0.19%)</title><rect x="68.6698%" y="437" width="0.1922%" height="15" fill="rgb(254,216,34)" fg:x="2863278770" fg:w="8014014"/><text x="68.9198%" y="447.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (8,014,014 samples, 0.19%)</title><rect x="68.6698%" y="421" width="0.1922%" height="15" fill="rgb(251,32,27)" fg:x="2863278770" fg:w="8014014"/><text x="68.9198%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (8,014,014 samples, 0.19%)</title><rect x="68.6698%" y="405" width="0.1922%" height="15" fill="rgb(208,127,28)" fg:x="2863278770" fg:w="8014014"/><text x="68.9198%" y="415.50"></text></g><g><title>onebrc::Station::add_measurement (8,558,371 samples, 0.21%)</title><rect x="68.8620%" y="517" width="0.2053%" height="15" fill="rgb(224,137,22)" fg:x="2871292784" fg:w="8558371"/><text x="69.1120%" y="527.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (4,221,054 samples, 0.10%)</title><rect x="69.4713%" y="357" width="0.1012%" height="15" fill="rgb(254,70,32)" fg:x="2896699524" fg:w="4221054"/><text x="69.7213%" y="367.50"></text></g><g><title>cfree (8,543,239 samples, 0.20%)</title><rect x="69.4713%" y="373" width="0.2049%" height="15" fill="rgb(229,75,37)" fg:x="2896699524" fg:w="8543239"/><text x="69.7213%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_aligned (4,322,185 samples, 0.10%)</title><rect x="69.5725%" y="357" width="0.1037%" height="15" fill="rgb(252,64,23)" fg:x="2900920578" fg:w="4322185"/><text x="69.8225%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (4,322,185 samples, 0.10%)</title><rect x="69.5725%" y="341" width="0.1037%" height="15" fill="rgb(232,162,48)" fg:x="2900920578" fg:w="4322185"/><text x="69.8225%" y="351.50"></text></g><g><title>core::slice::memchr::memchr_naive (4,322,185 samples, 0.10%)</title><rect x="69.5725%" y="325" width="0.1037%" height="15" fill="rgb(246,160,12)" fg:x="2900920578" fg:w="4322185"/><text x="69.8225%" y="335.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (3,932,190 samples, 0.09%)</title><rect x="69.6762%" y="373" width="0.0943%" height="15" fill="rgb(247,166,0)" fg:x="2905242763" fg:w="3932190"/><text x="69.9262%" y="383.50"></text></g><g><title>core::num::dec2flt::dec2flt (3,932,190 samples, 0.09%)</title><rect x="69.6762%" y="357" width="0.0943%" height="15" fill="rgb(249,219,21)" fg:x="2905242763" fg:w="3932190"/><text x="69.9262%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (29,159,917 samples, 0.70%)</title><rect x="69.2729%" y="485" width="0.6993%" height="15" fill="rgb(205,209,3)" fg:x="2888427876" fg:w="29159917"/><text x="69.5229%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (29,159,917 samples, 0.70%)</title><rect x="69.2729%" y="469" width="0.6993%" height="15" fill="rgb(243,44,1)" fg:x="2888427876" fg:w="29159917"/><text x="69.5229%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (29,159,917 samples, 0.70%)</title><rect x="69.2729%" y="453" width="0.6993%" height="15" fill="rgb(206,159,16)" fg:x="2888427876" fg:w="29159917"/><text x="69.5229%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29,159,917 samples, 0.70%)</title><rect x="69.2729%" y="437" width="0.6993%" height="15" fill="rgb(244,77,30)" fg:x="2888427876" fg:w="29159917"/><text x="69.5229%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (29,159,917 samples, 0.70%)</title><rect x="69.2729%" y="421" width="0.6993%" height="15" fill="rgb(218,69,12)" fg:x="2888427876" fg:w="29159917"/><text x="69.5229%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29,159,917 samples, 0.70%)</title><rect x="69.2729%" y="405" width="0.6993%" height="15" fill="rgb(212,87,7)" fg:x="2888427876" fg:w="29159917"/><text x="69.5229%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (29,159,917 samples, 0.70%)</title><rect x="69.2729%" y="389" width="0.6993%" height="15" fill="rgb(245,114,25)" fg:x="2888427876" fg:w="29159917"/><text x="69.5229%" y="399.50"></text></g><g><title>core::slice::memchr::memchr_aligned (8,412,840 samples, 0.20%)</title><rect x="69.7705%" y="373" width="0.2018%" height="15" fill="rgb(210,61,42)" fg:x="2909174953" fg:w="8412840"/><text x="70.0205%" y="383.50"></text></g><g><title>core::slice::memchr::memchr_aligned::runtime (8,412,840 samples, 0.20%)</title><rect x="69.7705%" y="357" width="0.2018%" height="15" fill="rgb(211,52,33)" fg:x="2909174953" fg:w="8412840"/><text x="70.0205%" y="367.50"></text></g><g><title>core::slice::memchr::memchr_naive (8,412,840 samples, 0.20%)</title><rect x="69.7705%" y="341" width="0.2018%" height="15" fill="rgb(234,58,33)" fg:x="2909174953" fg:w="8412840"/><text x="70.0205%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8,447,460 samples, 0.20%)</title><rect x="70.0758%" y="405" width="0.2026%" height="15" fill="rgb(220,115,36)" fg:x="2921907355" fg:w="8447460"/><text x="70.3258%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,231,052 samples, 0.10%)</title><rect x="70.1770%" y="389" width="0.1015%" height="15" fill="rgb(243,153,54)" fg:x="2926123763" fg:w="4231052"/><text x="70.4270%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (17,085,824 samples, 0.41%)</title><rect x="69.9722%" y="453" width="0.4098%" height="15" fill="rgb(251,47,18)" fg:x="2917587793" fg:w="17085824"/><text x="70.2222%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (17,085,824 samples, 0.41%)</title><rect x="69.9722%" y="437" width="0.4098%" height="15" fill="rgb(242,102,42)" fg:x="2917587793" fg:w="17085824"/><text x="70.2222%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (17,085,824 samples, 0.41%)</title><rect x="69.9722%" y="421" width="0.4098%" height="15" fill="rgb(234,31,38)" fg:x="2917587793" fg:w="17085824"/><text x="70.2222%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4,318,802 samples, 0.10%)</title><rect x="70.2784%" y="405" width="0.1036%" height="15" fill="rgb(221,117,51)" fg:x="2930354815" fg:w="4318802"/><text x="70.5284%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,273,999 samples, 0.10%)</title><rect x="70.3820%" y="341" width="0.1025%" height="15" fill="rgb(212,20,18)" fg:x="2934673617" fg:w="4273999"/><text x="70.6320%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12,496,849 samples, 0.30%)</title><rect x="70.3820%" y="357" width="0.2997%" height="15" fill="rgb(245,133,36)" fg:x="2934673617" fg:w="12496849"/><text x="70.6320%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (8,222,850 samples, 0.20%)</title><rect x="70.4845%" y="341" width="0.1972%" height="15" fill="rgb(212,6,19)" fg:x="2938947616" fg:w="8222850"/><text x="70.7345%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (46,268,619 samples, 1.11%)</title><rect x="69.9722%" y="485" width="1.1097%" height="15" fill="rgb(218,1,36)" fg:x="2917587793" fg:w="46268619"/><text x="70.2222%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (46,268,619 samples, 1.11%)</title><rect x="69.9722%" y="469" width="1.1097%" height="15" fill="rgb(246,84,54)" fg:x="2917587793" fg:w="46268619"/><text x="70.2222%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (29,182,795 samples, 0.70%)</title><rect x="70.3820%" y="453" width="0.6999%" height="15" fill="rgb(242,110,6)" fg:x="2934673617" fg:w="29182795"/><text x="70.6320%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (29,182,795 samples, 0.70%)</title><rect x="70.3820%" y="437" width="0.6999%" height="15" fill="rgb(214,47,5)" fg:x="2934673617" fg:w="29182795"/><text x="70.6320%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (29,182,795 samples, 0.70%)</title><rect x="70.3820%" y="421" width="0.6999%" height="15" fill="rgb(218,159,25)" fg:x="2934673617" fg:w="29182795"/><text x="70.6320%" y="431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (29,182,795 samples, 0.70%)</title><rect x="70.3820%" y="405" width="0.6999%" height="15" fill="rgb(215,211,28)" fg:x="2934673617" fg:w="29182795"/><text x="70.6320%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (29,182,795 samples, 0.70%)</title><rect x="70.3820%" y="389" width="0.6999%" height="15" fill="rgb(238,59,32)" fg:x="2934673617" fg:w="29182795"/><text x="70.6320%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (29,182,795 samples, 0.70%)</title><rect x="70.3820%" y="373" width="0.6999%" height="15" fill="rgb(226,82,3)" fg:x="2934673617" fg:w="29182795"/><text x="70.6320%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u8 (16,685,946 samples, 0.40%)</title><rect x="70.6817%" y="357" width="0.4002%" height="15" fill="rgb(240,164,32)" fg:x="2947170466" fg:w="16685946"/><text x="70.9317%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16,685,946 samples, 0.40%)</title><rect x="70.6817%" y="341" width="0.4002%" height="15" fill="rgb(232,46,7)" fg:x="2947170466" fg:w="16685946"/><text x="70.9317%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (12,360,659 samples, 0.30%)</title><rect x="70.7855%" y="325" width="0.2964%" height="15" fill="rgb(229,129,53)" fg:x="2951495753" fg:w="12360659"/><text x="71.0355%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4,330,585 samples, 0.10%)</title><rect x="71.0819%" y="453" width="0.1039%" height="15" fill="rgb(234,188,29)" fg:x="2963856412" fg:w="4330585"/><text x="71.3319%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4,330,585 samples, 0.10%)</title><rect x="71.0819%" y="437" width="0.1039%" height="15" fill="rgb(246,141,4)" fg:x="2963856412" fg:w="4330585"/><text x="71.3319%" y="447.50"></text></g><g><title>[libc.so.6] (4,195,323 samples, 0.10%)</title><rect x="71.2887%" y="357" width="0.1006%" height="15" fill="rgb(229,23,39)" fg:x="2972480471" fg:w="4195323"/><text x="71.5387%" y="367.50"></text></g><g><title>onebrc::process_raw_stations (1,075,216,730 samples, 25.79%)</title><rect x="45.6924%" y="533" width="25.7868%" height="15" fill="rgb(206,12,3)" fg:x="1905206807" fg:w="1075216730"/><text x="45.9424%" y="543.50">onebrc::process_raw_stations</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (100,572,382 samples, 2.41%)</title><rect x="69.0672%" y="517" width="2.4120%" height="15" fill="rgb(252,226,20)" fg:x="2879851155" fg:w="100572382"/><text x="69.3172%" y="527.50">st..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (96,317,299 samples, 2.31%)</title><rect x="69.1693%" y="501" width="2.3100%" height="15" fill="rgb(216,123,35)" fg:x="2884106238" fg:w="96317299"/><text x="69.4193%" y="511.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16,567,125 samples, 0.40%)</title><rect x="71.0819%" y="485" width="0.3973%" height="15" fill="rgb(212,68,40)" fg:x="2963856412" fg:w="16567125"/><text x="71.3319%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (16,567,125 samples, 0.40%)</title><rect x="71.0819%" y="469" width="0.3973%" height="15" fill="rgb(254,125,32)" fg:x="2963856412" fg:w="16567125"/><text x="71.3319%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (12,236,540 samples, 0.29%)</title><rect x="71.1858%" y="453" width="0.2935%" height="15" fill="rgb(253,97,22)" fg:x="2968186997" fg:w="12236540"/><text x="71.4358%" y="463.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (12,236,540 samples, 0.29%)</title><rect x="71.1858%" y="437" width="0.2935%" height="15" fill="rgb(241,101,14)" fg:x="2968186997" fg:w="12236540"/><text x="71.4358%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (12,236,540 samples, 0.29%)</title><rect x="71.1858%" y="421" width="0.2935%" height="15" fill="rgb(238,103,29)" fg:x="2968186997" fg:w="12236540"/><text x="71.4358%" y="431.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (12,236,540 samples, 0.29%)</title><rect x="71.1858%" y="405" width="0.2935%" height="15" fill="rgb(233,195,47)" fg:x="2968186997" fg:w="12236540"/><text x="71.4358%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (12,236,540 samples, 0.29%)</title><rect x="71.1858%" y="389" width="0.2935%" height="15" fill="rgb(246,218,30)" fg:x="2968186997" fg:w="12236540"/><text x="71.4358%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12,236,540 samples, 0.29%)</title><rect x="71.1858%" y="373" width="0.2935%" height="15" fill="rgb(219,145,47)" fg:x="2968186997" fg:w="12236540"/><text x="71.4358%" y="383.50"></text></g><g><title>__rust_alloc (3,747,743 samples, 0.09%)</title><rect x="71.3893%" y="357" width="0.0899%" height="15" fill="rgb(243,12,26)" fg:x="2976675794" fg:w="3747743"/><text x="71.6393%" y="367.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (3,781,269 samples, 0.09%)</title><rect x="72.7192%" y="437" width="0.0907%" height="15" fill="rgb(214,87,16)" fg:x="3032124970" fg:w="3781269"/><text x="72.9692%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (3,781,269 samples, 0.09%)</title><rect x="72.7192%" y="421" width="0.0907%" height="15" fill="rgb(208,99,42)" fg:x="3032124970" fg:w="3781269"/><text x="72.9692%" y="431.50"></text></g><g><title>__sysvec_apic_timer_interrupt (3,781,269 samples, 0.09%)</title><rect x="72.7192%" y="405" width="0.0907%" height="15" fill="rgb(253,99,2)" fg:x="3032124970" fg:w="3781269"/><text x="72.9692%" y="415.50"></text></g><g><title>hrtimer_interrupt (3,781,269 samples, 0.09%)</title><rect x="72.7192%" y="389" width="0.0907%" height="15" fill="rgb(220,168,23)" fg:x="3032124970" fg:w="3781269"/><text x="72.9692%" y="399.50"></text></g><g><title>__hrtimer_run_queues (3,781,269 samples, 0.09%)</title><rect x="72.7192%" y="373" width="0.0907%" height="15" fill="rgb(242,38,24)" fg:x="3032124970" fg:w="3781269"/><text x="72.9692%" y="383.50"></text></g><g><title>tick_nohz_handler (3,781,269 samples, 0.09%)</title><rect x="72.7192%" y="357" width="0.0907%" height="15" fill="rgb(225,182,9)" fg:x="3032124970" fg:w="3781269"/><text x="72.9692%" y="367.50"></text></g><g><title>update_process_times (3,781,269 samples, 0.09%)</title><rect x="72.7192%" y="341" width="0.0907%" height="15" fill="rgb(243,178,37)" fg:x="3032124970" fg:w="3781269"/><text x="72.9692%" y="351.50"></text></g><g><title>sched_tick (3,781,269 samples, 0.09%)</title><rect x="72.7192%" y="325" width="0.0907%" height="15" fill="rgb(232,139,19)" fg:x="3032124970" fg:w="3781269"/><text x="72.9692%" y="335.50"></text></g><g><title>psi_account_irqtime (3,781,269 samples, 0.09%)</title><rect x="72.7192%" y="309" width="0.0907%" height="15" fill="rgb(225,201,24)" fg:x="3032124970" fg:w="3781269"/><text x="72.9692%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (59,580,384 samples, 1.43%)</title><rect x="71.4792%" y="469" width="1.4289%" height="15" fill="rgb(221,47,46)" fg:x="2980423537" fg:w="59580384"/><text x="71.7292%" y="479.50"></text></g><g><title>core::str::validations::run_utf8_validation (59,580,384 samples, 1.43%)</title><rect x="71.4792%" y="453" width="1.4289%" height="15" fill="rgb(249,23,13)" fg:x="2980423537" fg:w="59580384"/><text x="71.7292%" y="463.50"></text></g><g><title>core::str::validations::utf8_char_width (4,097,682 samples, 0.10%)</title><rect x="72.8099%" y="437" width="0.0983%" height="15" fill="rgb(219,9,5)" fg:x="3035906239" fg:w="4097682"/><text x="73.0599%" y="447.50"></text></g><g><title>folio_zero_user (11,046,279 samples, 0.26%)</title><rect x="74.6197%" y="133" width="0.2649%" height="15" fill="rgb(254,171,16)" fg:x="3111371472" fg:w="11046279"/><text x="74.8697%" y="143.50"></text></g><g><title>clear_page_rep (11,046,279 samples, 0.26%)</title><rect x="74.6197%" y="117" width="0.2649%" height="15" fill="rgb(230,171,20)" fg:x="3111371472" fg:w="11046279"/><text x="74.8697%" y="127.50"></text></g><g><title>__rmqueue_pcplist (4,192,001 samples, 0.10%)</title><rect x="74.8847%" y="53" width="0.1005%" height="15" fill="rgb(210,71,41)" fg:x="3122417751" fg:w="4192001"/><text x="75.1347%" y="63.50"></text></g><g><title>do_huge_pmd_anonymous_page (38,108,207 samples, 0.91%)</title><rect x="74.6197%" y="149" width="0.9139%" height="15" fill="rgb(206,173,20)" fg:x="3111371472" fg:w="38108207"/><text x="74.8697%" y="159.50"></text></g><g><title>vma_alloc_folio_noprof (27,061,928 samples, 0.65%)</title><rect x="74.8847%" y="133" width="0.6490%" height="15" fill="rgb(233,88,34)" fg:x="3122417751" fg:w="27061928"/><text x="75.1347%" y="143.50"></text></g><g><title>folio_alloc_mpol_noprof (27,061,928 samples, 0.65%)</title><rect x="74.8847%" y="117" width="0.6490%" height="15" fill="rgb(223,209,46)" fg:x="3122417751" fg:w="27061928"/><text x="75.1347%" y="127.50"></text></g><g><title>alloc_pages_mpol_noprof (27,061,928 samples, 0.65%)</title><rect x="74.8847%" y="101" width="0.6490%" height="15" fill="rgb(250,43,18)" fg:x="3122417751" fg:w="27061928"/><text x="75.1347%" y="111.50"></text></g><g><title>__alloc_pages_noprof (27,061,928 samples, 0.65%)</title><rect x="74.8847%" y="85" width="0.6490%" height="15" fill="rgb(208,13,10)" fg:x="3122417751" fg:w="27061928"/><text x="75.1347%" y="95.50"></text></g><g><title>get_page_from_freelist (27,061,928 samples, 0.65%)</title><rect x="74.8847%" y="69" width="0.6490%" height="15" fill="rgb(212,200,36)" fg:x="3122417751" fg:w="27061928"/><text x="75.1347%" y="79.50"></text></g><g><title>prep_new_page (22,869,927 samples, 0.55%)</title><rect x="74.9852%" y="53" width="0.5485%" height="15" fill="rgb(225,90,30)" fg:x="3126609752" fg:w="22869927"/><text x="75.2352%" y="63.50"></text></g><g><title>clear_page_rep (22,869,927 samples, 0.55%)</title><rect x="74.9852%" y="37" width="0.5485%" height="15" fill="rgb(236,182,39)" fg:x="3126609752" fg:w="22869927"/><text x="75.2352%" y="47.50"></text></g><g><title>copy_page_to_iter (109,495,632 samples, 2.63%)</title><rect x="72.9081%" y="277" width="2.6260%" height="15" fill="rgb(212,144,35)" fg:x="3040004118" fg:w="109495632"/><text x="73.1581%" y="287.50">co..</text></g><g><title>_copy_to_iter (109,495,632 samples, 2.63%)</title><rect x="72.9081%" y="261" width="2.6260%" height="15" fill="rgb(228,63,44)" fg:x="3040004118" fg:w="109495632"/><text x="73.1581%" y="271.50">_c..</text></g><g><title>rep_movs_alternative (105,526,860 samples, 2.53%)</title><rect x="73.0033%" y="245" width="2.5308%" height="15" fill="rgb(228,109,6)" fg:x="3043972890" fg:w="105526860"/><text x="73.2533%" y="255.50">re..</text></g><g><title>asm_exc_page_fault (38,352,105 samples, 0.92%)</title><rect x="74.6144%" y="229" width="0.9198%" height="15" fill="rgb(238,117,24)" fg:x="3111147645" fg:w="38352105"/><text x="74.8644%" y="239.50"></text></g><g><title>exc_page_fault (38,352,105 samples, 0.92%)</title><rect x="74.6144%" y="213" width="0.9198%" height="15" fill="rgb(242,26,26)" fg:x="3111147645" fg:w="38352105"/><text x="74.8644%" y="223.50"></text></g><g><title>do_user_addr_fault (38,352,105 samples, 0.92%)</title><rect x="74.6144%" y="197" width="0.9198%" height="15" fill="rgb(221,92,48)" fg:x="3111147645" fg:w="38352105"/><text x="74.8644%" y="207.50"></text></g><g><title>handle_mm_fault (38,352,105 samples, 0.92%)</title><rect x="74.6144%" y="181" width="0.9198%" height="15" fill="rgb(209,209,32)" fg:x="3111147645" fg:w="38352105"/><text x="74.8644%" y="191.50"></text></g><g><title>__handle_mm_fault (38,352,105 samples, 0.92%)</title><rect x="74.6144%" y="165" width="0.9198%" height="15" fill="rgb(221,70,22)" fg:x="3111147645" fg:w="38352105"/><text x="74.8644%" y="175.50"></text></g><g><title>_start (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="805" width="30.2692%" height="15" fill="rgb(248,145,5)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="815.50">_start</text></g><g><title>__libc_start_main (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="789" width="30.2692%" height="15" fill="rgb(226,116,26)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="799.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="773" width="30.2692%" height="15" fill="rgb(244,5,17)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="783.50">[libc.so.6]</text></g><g><title>main (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="757" width="30.2692%" height="15" fill="rgb(252,159,33)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="741" width="30.2692%" height="15" fill="rgb(206,71,0)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="751.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="725" width="30.2692%" height="15" fill="rgb(233,118,54)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="709" width="30.2692%" height="15" fill="rgb(234,83,48)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="693" width="30.2692%" height="15" fill="rgb(228,3,54)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="703.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="677" width="30.2692%" height="15" fill="rgb(226,155,13)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="687.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="661" width="30.2692%" height="15" fill="rgb(241,28,37)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="645" width="30.2692%" height="15" fill="rgb(233,93,10)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="629" width="30.2692%" height="15" fill="rgb(225,113,19)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="639.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="613" width="30.2692%" height="15" fill="rgb(241,2,18)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="623.50">core::ops::function::impls::&lt;impl core::ops::func..</text></g><g><title>std::rt::lang_start::_{{closure}} (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="597" width="30.2692%" height="15" fill="rgb(228,207,21)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="607.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="581" width="30.2692%" height="15" fill="rgb(213,211,35)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="591.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="565" width="30.2692%" height="15" fill="rgb(209,83,10)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="575.50">core::ops::function::FnOnce::call_once</text></g><g><title>onebrc::main (1,262,113,509 samples, 30.27%)</title><rect x="45.5886%" y="549" width="30.2692%" height="15" fill="rgb(209,164,1)" fg:x="1900877934" fg:w="1262113509"/><text x="45.8386%" y="559.50">onebrc::main</text></g><g><title>std::fs::read_to_string (182,567,906 samples, 4.38%)</title><rect x="71.4792%" y="533" width="4.3785%" height="15" fill="rgb(213,184,43)" fg:x="2980423537" fg:w="182567906"/><text x="71.7292%" y="543.50">std::..</text></g><g><title>std::fs::read_to_string::inner (182,567,906 samples, 4.38%)</title><rect x="71.4792%" y="517" width="4.3785%" height="15" fill="rgb(231,61,34)" fg:x="2980423537" fg:w="182567906"/><text x="71.7292%" y="527.50">std::..</text></g><g><title>std::io::default_read_to_string (182,567,906 samples, 4.38%)</title><rect x="71.4792%" y="501" width="4.3785%" height="15" fill="rgb(235,75,3)" fg:x="2980423537" fg:w="182567906"/><text x="71.7292%" y="511.50">std::..</text></g><g><title>std::io::append_to_string (182,567,906 samples, 4.38%)</title><rect x="71.4792%" y="485" width="4.3785%" height="15" fill="rgb(220,106,47)" fg:x="2980423537" fg:w="182567906"/><text x="71.7292%" y="495.50">std::..</text></g><g><title>std::io::default_read_to_string::_{{closure}} (122,987,522 samples, 2.95%)</title><rect x="72.9081%" y="469" width="2.9496%" height="15" fill="rgb(210,196,33)" fg:x="3040003921" fg:w="122987522"/><text x="73.1581%" y="479.50">st..</text></g><g><title>std::io::default_read_to_end (122,987,522 samples, 2.95%)</title><rect x="72.9081%" y="453" width="2.9496%" height="15" fill="rgb(229,154,42)" fg:x="3040003921" fg:w="122987522"/><text x="73.1581%" y="463.50">st..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (122,987,522 samples, 2.95%)</title><rect x="72.9081%" y="437" width="2.9496%" height="15" fill="rgb(228,114,26)" fg:x="3040003921" fg:w="122987522"/><text x="73.1581%" y="447.50">&lt;s..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (122,987,522 samples, 2.95%)</title><rect x="72.9081%" y="421" width="2.9496%" height="15" fill="rgb(208,144,1)" fg:x="3040003921" fg:w="122987522"/><text x="73.1581%" y="431.50">&lt;&amp;..</text></g><g><title>std::sys::pal::unix::fs::File::read_buf (122,987,522 samples, 2.95%)</title><rect x="72.9081%" y="405" width="2.9496%" height="15" fill="rgb(239,112,37)" fg:x="3040003921" fg:w="122987522"/><text x="73.1581%" y="415.50">st..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (122,987,522 samples, 2.95%)</title><rect x="72.9081%" y="389" width="2.9496%" height="15" fill="rgb(210,96,50)" fg:x="3040003921" fg:w="122987522"/><text x="73.1581%" y="399.50">st..</text></g><g><title>read (122,987,522 samples, 2.95%)</title><rect x="72.9081%" y="373" width="2.9496%" height="15" fill="rgb(222,178,2)" fg:x="3040003921" fg:w="122987522"/><text x="73.1581%" y="383.50">re..</text></g><g><title>entry_SYSCALL_64_after_hwframe (122,987,522 samples, 2.95%)</title><rect x="72.9081%" y="357" width="2.9496%" height="15" fill="rgb(226,74,18)" fg:x="3040003921" fg:w="122987522"/><text x="73.1581%" y="367.50">en..</text></g><g><title>do_syscall_64 (122,987,522 samples, 2.95%)</title><rect x="72.9081%" y="341" width="2.9496%" height="15" fill="rgb(225,67,54)" fg:x="3040003921" fg:w="122987522"/><text x="73.1581%" y="351.50">do..</text></g><g><title>ksys_read (122,987,522 samples, 2.95%)</title><rect x="72.9081%" y="325" width="2.9496%" height="15" fill="rgb(251,92,32)" fg:x="3040003921" fg:w="122987522"/><text x="73.1581%" y="335.50">ks..</text></g><g><title>vfs_read (122,987,522 samples, 2.95%)</title><rect x="72.9081%" y="309" width="2.9496%" height="15" fill="rgb(228,149,22)" fg:x="3040003921" fg:w="122987522"/><text x="73.1581%" y="319.50">vf..</text></g><g><title>filemap_read (122,987,522 samples, 2.95%)</title><rect x="72.9081%" y="293" width="2.9496%" height="15" fill="rgb(243,54,13)" fg:x="3040003921" fg:w="122987522"/><text x="73.1581%" y="303.50">fi..</text></g><g><title>filemap_get_pages (13,491,693 samples, 0.32%)</title><rect x="75.5342%" y="277" width="0.3236%" height="15" fill="rgb(243,180,28)" fg:x="3149499750" fg:w="13491693"/><text x="75.7842%" y="287.50"></text></g><g><title>filemap_get_read_batch (13,491,693 samples, 0.32%)</title><rect x="75.5342%" y="261" width="0.3236%" height="15" fill="rgb(208,167,24)" fg:x="3149499750" fg:w="13491693"/><text x="75.7842%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8,635,740 samples, 0.21%)</title><rect x="76.9657%" y="773" width="0.2071%" height="15" fill="rgb(245,73,45)" fg:x="3209189804" fg:w="8635740"/><text x="77.2157%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8,635,740 samples, 0.21%)</title><rect x="76.9657%" y="757" width="0.2071%" height="15" fill="rgb(237,203,48)" fg:x="3209189804" fg:w="8635740"/><text x="77.2157%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4,321,037 samples, 0.10%)</title><rect x="77.0692%" y="741" width="0.1036%" height="15" fill="rgb(211,197,16)" fg:x="3213504507" fg:w="4321037"/><text x="77.3192%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,321,037 samples, 0.10%)</title><rect x="77.0692%" y="725" width="0.1036%" height="15" fill="rgb(243,99,51)" fg:x="3213504507" fg:w="4321037"/><text x="77.3192%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,321,037 samples, 0.10%)</title><rect x="77.0692%" y="709" width="0.1036%" height="15" fill="rgb(215,123,29)" fg:x="3213504507" fg:w="4321037"/><text x="77.3192%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,321,037 samples, 0.10%)</title><rect x="77.0692%" y="693" width="0.1036%" height="15" fill="rgb(239,186,37)" fg:x="3213504507" fg:w="4321037"/><text x="77.3192%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (4,321,037 samples, 0.10%)</title><rect x="77.0692%" y="677" width="0.1036%" height="15" fill="rgb(252,136,39)" fg:x="3213504507" fg:w="4321037"/><text x="77.3192%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (12,364,090 samples, 0.30%)</title><rect x="77.1728%" y="773" width="0.2965%" height="15" fill="rgb(223,213,32)" fg:x="3217825544" fg:w="12364090"/><text x="77.4228%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (16,736,995 samples, 0.40%)</title><rect x="77.4693%" y="741" width="0.4014%" height="15" fill="rgb(233,115,5)" fg:x="3230189634" fg:w="16736995"/><text x="77.7193%" y="751.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (16,736,995 samples, 0.40%)</title><rect x="77.4693%" y="725" width="0.4014%" height="15" fill="rgb(207,226,44)" fg:x="3230189634" fg:w="16736995"/><text x="77.7193%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (12,903,703 samples, 0.31%)</title><rect x="77.8708%" y="741" width="0.3095%" height="15" fill="rgb(208,126,0)" fg:x="3246926629" fg:w="12903703"/><text x="78.1208%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (12,903,703 samples, 0.31%)</title><rect x="77.8708%" y="725" width="0.3095%" height="15" fill="rgb(244,66,21)" fg:x="3246926629" fg:w="12903703"/><text x="78.1208%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (12,903,703 samples, 0.31%)</title><rect x="77.8708%" y="709" width="0.3095%" height="15" fill="rgb(222,97,12)" fg:x="3246926629" fg:w="12903703"/><text x="78.1208%" y="719.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (12,903,703 samples, 0.31%)</title><rect x="77.8708%" y="693" width="0.3095%" height="15" fill="rgb(219,213,19)" fg:x="3246926629" fg:w="12903703"/><text x="78.1208%" y="703.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (12,903,703 samples, 0.31%)</title><rect x="77.8708%" y="677" width="0.3095%" height="15" fill="rgb(252,169,30)" fg:x="3246926629" fg:w="12903703"/><text x="78.1208%" y="687.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12,903,703 samples, 0.31%)</title><rect x="77.8708%" y="661" width="0.3095%" height="15" fill="rgb(206,32,51)" fg:x="3246926629" fg:w="12903703"/><text x="78.1208%" y="671.50"></text></g><g><title>hashbrown::raw::h2 (8,197,043 samples, 0.20%)</title><rect x="78.1802%" y="741" width="0.1966%" height="15" fill="rgb(250,172,42)" fg:x="3259830332" fg:w="8197043"/><text x="78.4302%" y="751.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (71,622,286 samples, 1.72%)</title><rect x="76.7623%" y="789" width="1.7177%" height="15" fill="rgb(209,34,43)" fg:x="3200708253" fg:w="71622286"/><text x="77.0123%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (42,140,905 samples, 1.01%)</title><rect x="77.4693%" y="773" width="1.0107%" height="15" fill="rgb(223,11,35)" fg:x="3230189634" fg:w="42140905"/><text x="77.7193%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (42,140,905 samples, 1.01%)</title><rect x="77.4693%" y="757" width="1.0107%" height="15" fill="rgb(251,219,26)" fg:x="3230189634" fg:w="42140905"/><text x="77.7193%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4,303,164 samples, 0.10%)</title><rect x="78.3768%" y="741" width="0.1032%" height="15" fill="rgb(231,119,3)" fg:x="3268027375" fg:w="4303164"/><text x="78.6268%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,303,164 samples, 0.10%)</title><rect x="78.3768%" y="725" width="0.1032%" height="15" fill="rgb(216,97,11)" fg:x="3268027375" fg:w="4303164"/><text x="78.6268%" y="735.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (4,068,620 samples, 0.10%)</title><rect x="78.4800%" y="757" width="0.0976%" height="15" fill="rgb(223,59,9)" fg:x="3272330539" fg:w="4068620"/><text x="78.7300%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,068,620 samples, 0.10%)</title><rect x="78.4800%" y="741" width="0.0976%" height="15" fill="rgb(233,93,31)" fg:x="3272330539" fg:w="4068620"/><text x="78.7300%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4,068,620 samples, 0.10%)</title><rect x="78.4800%" y="725" width="0.0976%" height="15" fill="rgb(239,81,33)" fg:x="3272330539" fg:w="4068620"/><text x="78.7300%" y="735.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,068,620 samples, 0.10%)</title><rect x="78.4800%" y="709" width="0.0976%" height="15" fill="rgb(213,120,34)" fg:x="3272330539" fg:w="4068620"/><text x="78.7300%" y="719.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (4,068,620 samples, 0.10%)</title><rect x="78.4800%" y="693" width="0.0976%" height="15" fill="rgb(243,49,53)" fg:x="3272330539" fg:w="4068620"/><text x="78.7300%" y="703.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (4,068,620 samples, 0.10%)</title><rect x="78.4800%" y="677" width="0.0976%" height="15" fill="rgb(247,216,33)" fg:x="3272330539" fg:w="4068620"/><text x="78.7300%" y="687.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (4,068,620 samples, 0.10%)</title><rect x="78.4800%" y="661" width="0.0976%" height="15" fill="rgb(226,26,14)" fg:x="3272330539" fg:w="4068620"/><text x="78.7300%" y="671.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (4,068,620 samples, 0.10%)</title><rect x="78.4800%" y="645" width="0.0976%" height="15" fill="rgb(215,49,53)" fg:x="3272330539" fg:w="4068620"/><text x="78.7300%" y="655.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (4,068,620 samples, 0.10%)</title><rect x="78.4800%" y="629" width="0.0976%" height="15" fill="rgb(245,162,40)" fg:x="3272330539" fg:w="4068620"/><text x="78.7300%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (4,068,620 samples, 0.10%)</title><rect x="78.4800%" y="613" width="0.0976%" height="15" fill="rgb(229,68,17)" fg:x="3272330539" fg:w="4068620"/><text x="78.7300%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (4,068,620 samples, 0.10%)</title><rect x="78.4800%" y="597" width="0.0976%" height="15" fill="rgb(213,182,10)" fg:x="3272330539" fg:w="4068620"/><text x="78.7300%" y="607.50"></text></g><g><title>cfree (117,567,013 samples, 2.82%)</title><rect x="75.8577%" y="805" width="2.8196%" height="15" fill="rgb(245,125,30)" fg:x="3162991443" fg:w="117567013"/><text x="76.1077%" y="815.50">cf..</text></g><g><title>onebrc::main (8,227,917 samples, 0.20%)</title><rect x="78.4800%" y="789" width="0.1973%" height="15" fill="rgb(232,202,2)" fg:x="3272330539" fg:w="8227917"/><text x="78.7300%" y="799.50"></text></g><g><title>onebrc::process_raw_stations (8,227,917 samples, 0.20%)</title><rect x="78.4800%" y="773" width="0.1973%" height="15" fill="rgb(237,140,51)" fg:x="3272330539" fg:w="8227917"/><text x="78.7300%" y="783.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (4,159,297 samples, 0.10%)</title><rect x="78.5776%" y="757" width="0.0998%" height="15" fill="rgb(236,157,25)" fg:x="3276399159" fg:w="4159297"/><text x="78.8276%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (4,159,297 samples, 0.10%)</title><rect x="78.5776%" y="741" width="0.0998%" height="15" fill="rgb(219,209,0)" fg:x="3276399159" fg:w="4159297"/><text x="78.8276%" y="751.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4,159,297 samples, 0.10%)</title><rect x="78.5776%" y="725" width="0.0998%" height="15" fill="rgb(240,116,54)" fg:x="3276399159" fg:w="4159297"/><text x="78.8276%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4,159,297 samples, 0.10%)</title><rect x="78.5776%" y="709" width="0.0998%" height="15" fill="rgb(216,10,36)" fg:x="3276399159" fg:w="4159297"/><text x="78.8276%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4,159,297 samples, 0.10%)</title><rect x="78.5776%" y="693" width="0.0998%" height="15" fill="rgb(222,72,44)" fg:x="3276399159" fg:w="4159297"/><text x="78.8276%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4,159,297 samples, 0.10%)</title><rect x="78.5776%" y="677" width="0.0998%" height="15" fill="rgb(232,159,9)" fg:x="3276399159" fg:w="4159297"/><text x="78.8276%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (4,159,297 samples, 0.10%)</title><rect x="78.5776%" y="661" width="0.0998%" height="15" fill="rgb(210,39,32)" fg:x="3276399159" fg:w="4159297"/><text x="78.8276%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4,159,297 samples, 0.10%)</title><rect x="78.5776%" y="645" width="0.0998%" height="15" fill="rgb(216,194,45)" fg:x="3276399159" fg:w="4159297"/><text x="78.8276%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4,159,297 samples, 0.10%)</title><rect x="78.5776%" y="629" width="0.0998%" height="15" fill="rgb(218,18,35)" fg:x="3276399159" fg:w="4159297"/><text x="78.8276%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,159,297 samples, 0.10%)</title><rect x="78.5776%" y="613" width="0.0998%" height="15" fill="rgb(207,83,51)" fg:x="3276399159" fg:w="4159297"/><text x="78.8276%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,821,406 samples, 0.09%)</title><rect x="78.6773%" y="741" width="0.0916%" height="15" fill="rgb(225,63,43)" fg:x="3280558456" fg:w="3821406"/><text x="78.9273%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,821,406 samples, 0.09%)</title><rect x="78.6773%" y="725" width="0.0916%" height="15" fill="rgb(207,57,36)" fg:x="3280558456" fg:w="3821406"/><text x="78.9273%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,977,786 samples, 0.10%)</title><rect x="78.7690%" y="725" width="0.0954%" height="15" fill="rgb(216,99,33)" fg:x="3284379862" fg:w="3977786"/><text x="79.0190%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11,148,326 samples, 0.27%)</title><rect x="78.6773%" y="805" width="0.2674%" height="15" fill="rgb(225,42,16)" fg:x="3280558456" fg:w="11148326"/><text x="78.9273%" y="815.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11,148,326 samples, 0.27%)</title><rect x="78.6773%" y="789" width="0.2674%" height="15" fill="rgb(220,201,45)" fg:x="3280558456" fg:w="11148326"/><text x="78.9273%" y="799.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11,148,326 samples, 0.27%)</title><rect x="78.6773%" y="773" width="0.2674%" height="15" fill="rgb(225,33,4)" fg:x="3280558456" fg:w="11148326"/><text x="78.9273%" y="783.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11,148,326 samples, 0.27%)</title><rect x="78.6773%" y="757" width="0.2674%" height="15" fill="rgb(224,33,50)" fg:x="3280558456" fg:w="11148326"/><text x="78.9273%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7,326,920 samples, 0.18%)</title><rect x="78.7690%" y="741" width="0.1757%" height="15" fill="rgb(246,198,51)" fg:x="3284379862" fg:w="7326920"/><text x="79.0190%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,349,134 samples, 0.08%)</title><rect x="78.8644%" y="725" width="0.0803%" height="15" fill="rgb(205,22,4)" fg:x="3288357648" fg:w="3349134"/><text x="79.1144%" y="735.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (4,277,280 samples, 0.10%)</title><rect x="80.8084%" y="757" width="0.1026%" height="15" fill="rgb(206,3,8)" fg:x="3369416302" fg:w="4277280"/><text x="81.0584%" y="767.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::pow10_fast_path (12,541,063 samples, 0.30%)</title><rect x="80.9110%" y="757" width="0.3008%" height="15" fill="rgb(251,23,15)" fg:x="3373693582" fg:w="12541063"/><text x="81.1610%" y="767.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (4,010,380 samples, 0.10%)</title><rect x="81.2118%" y="757" width="0.0962%" height="15" fill="rgb(252,88,28)" fg:x="3386234645" fg:w="4010380"/><text x="81.4618%" y="767.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (37,175,082 samples, 0.89%)</title><rect x="80.6098%" y="773" width="0.8916%" height="15" fill="rgb(212,127,14)" fg:x="3361136728" fg:w="37175082"/><text x="80.8598%" y="783.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (8,066,785 samples, 0.19%)</title><rect x="81.3079%" y="757" width="0.1935%" height="15" fill="rgb(247,145,37)" fg:x="3390245025" fg:w="8066785"/><text x="81.5579%" y="767.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (110,697,245 samples, 2.65%)</title><rect x="78.9447%" y="805" width="2.6548%" height="15" fill="rgb(209,117,53)" fg:x="3291706782" fg:w="110697245"/><text x="79.1947%" y="815.50">co..</text></g><g><title>core::num::dec2flt::dec2flt (86,339,630 samples, 2.07%)</title><rect x="79.5289%" y="789" width="2.0707%" height="15" fill="rgb(212,90,42)" fg:x="3316064397" fg:w="86339630"/><text x="79.7789%" y="799.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::first (4,092,217 samples, 0.10%)</title><rect x="81.5014%" y="773" width="0.0981%" height="15" fill="rgb(218,164,37)" fg:x="3398311810" fg:w="4092217"/><text x="81.7514%" y="783.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (3,945,147 samples, 0.09%)</title><rect x="84.8004%" y="741" width="0.0946%" height="15" fill="rgb(246,65,34)" fg:x="3535866998" fg:w="3945147"/><text x="85.0504%" y="751.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (12,430,045 samples, 0.30%)</title><rect x="84.8950%" y="741" width="0.2981%" height="15" fill="rgb(231,100,33)" fg:x="3539812145" fg:w="12430045"/><text x="85.1450%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8,099,185 samples, 0.19%)</title><rect x="84.9989%" y="725" width="0.1942%" height="15" fill="rgb(228,126,14)" fg:x="3544143005" fg:w="8099185"/><text x="85.2489%" y="735.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (74,817,346 samples, 1.79%)</title><rect x="84.2929%" y="773" width="1.7943%" height="15" fill="rgb(215,173,21)" fg:x="3514707322" fg:w="74817346"/><text x="84.5429%" y="783.50">c..</text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (62,282,028 samples, 1.49%)</title><rect x="84.5935%" y="757" width="1.4937%" height="15" fill="rgb(210,6,40)" fg:x="3527242640" fg:w="62282028"/><text x="84.8435%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (37,282,478 samples, 0.89%)</title><rect x="85.1931%" y="741" width="0.8941%" height="15" fill="rgb(212,48,18)" fg:x="3552242190" fg:w="37282478"/><text x="85.4431%" y="751.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (199,708,378 samples, 4.79%)</title><rect x="81.5996%" y="805" width="4.7896%" height="15" fill="rgb(230,214,11)" fg:x="3402404027" fg:w="199708378"/><text x="81.8496%" y="815.50">core::..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (153,192,936 samples, 3.67%)</title><rect x="82.7151%" y="789" width="3.6740%" height="15" fill="rgb(254,105,39)" fg:x="3448919469" fg:w="153192936"/><text x="82.9651%" y="799.50">core..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (12,587,737 samples, 0.30%)</title><rect x="86.0872%" y="773" width="0.3019%" height="15" fill="rgb(245,158,5)" fg:x="3589524668" fg:w="12587737"/><text x="86.3372%" y="783.50"></text></g><g><title>core::cmp::Ord::min (4,192,239 samples, 0.10%)</title><rect x="90.1851%" y="773" width="0.1005%" height="15" fill="rgb(249,208,11)" fg:x="3760391059" fg:w="4192239"/><text x="90.4351%" y="783.50"></text></g><g><title>core::cmp::min_by (4,192,239 samples, 0.10%)</title><rect x="90.1851%" y="757" width="0.1005%" height="15" fill="rgb(210,39,28)" fg:x="3760391059" fg:w="4192239"/><text x="90.4351%" y="767.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (4,328,103 samples, 0.10%)</title><rect x="90.2857%" y="773" width="0.1038%" height="15" fill="rgb(211,56,53)" fg:x="3764583298" fg:w="4328103"/><text x="90.5357%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (8,659,355 samples, 0.21%)</title><rect x="90.3895%" y="773" width="0.2077%" height="15" fill="rgb(226,201,30)" fg:x="3768911401" fg:w="8659355"/><text x="90.6395%" y="783.50"></text></g><g><title>core::ptr::align_offset (8,659,355 samples, 0.21%)</title><rect x="90.3895%" y="757" width="0.2077%" height="15" fill="rgb(239,101,34)" fg:x="3768911401" fg:w="8659355"/><text x="90.6395%" y="767.50"></text></g><g><title>core::slice::memchr::memchr_aligned (378,539,225 samples, 9.08%)</title><rect x="86.3891%" y="805" width="9.0785%" height="15" fill="rgb(226,209,5)" fg:x="3602112405" fg:w="378539225"/><text x="86.6391%" y="815.50">core::slice::..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (295,077,569 samples, 7.08%)</title><rect x="88.3908%" y="789" width="7.0768%" height="15" fill="rgb(250,105,47)" fg:x="3685574061" fg:w="295077569"/><text x="88.6408%" y="799.50">core::sli..</text></g><g><title>core::slice::memchr::memchr_naive (203,080,874 samples, 4.87%)</title><rect x="90.5971%" y="773" width="4.8705%" height="15" fill="rgb(230,72,3)" fg:x="3777570756" fg:w="203080874"/><text x="90.8471%" y="783.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8,273,837 samples, 0.20%)</title><rect x="95.7809%" y="789" width="0.1984%" height="15" fill="rgb(232,218,39)" fg:x="3993715000" fg:w="8273837"/><text x="96.0309%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8,273,837 samples, 0.20%)</title><rect x="95.7809%" y="773" width="0.1984%" height="15" fill="rgb(248,166,6)" fg:x="3993715000" fg:w="8273837"/><text x="96.0309%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8,273,837 samples, 0.20%)</title><rect x="95.7809%" y="757" width="0.1984%" height="15" fill="rgb(247,89,20)" fg:x="3993715000" fg:w="8273837"/><text x="96.0309%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,273,837 samples, 0.20%)</title><rect x="95.7809%" y="741" width="0.1984%" height="15" fill="rgb(248,130,54)" fg:x="3993715000" fg:w="8273837"/><text x="96.0309%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,273,837 samples, 0.20%)</title><rect x="95.7809%" y="725" width="0.1984%" height="15" fill="rgb(234,196,4)" fg:x="3993715000" fg:w="8273837"/><text x="96.0309%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,273,837 samples, 0.20%)</title><rect x="95.7809%" y="709" width="0.1984%" height="15" fill="rgb(250,143,31)" fg:x="3993715000" fg:w="8273837"/><text x="96.0309%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (8,273,837 samples, 0.20%)</title><rect x="95.7809%" y="693" width="0.1984%" height="15" fill="rgb(211,110,34)" fg:x="3993715000" fg:w="8273837"/><text x="96.0309%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4,254,437 samples, 0.10%)</title><rect x="95.9793%" y="757" width="0.1020%" height="15" fill="rgb(215,124,48)" fg:x="4001988837" fg:w="4254437"/><text x="96.2293%" y="767.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4,254,437 samples, 0.10%)</title><rect x="95.9793%" y="741" width="0.1020%" height="15" fill="rgb(216,46,13)" fg:x="4001988837" fg:w="4254437"/><text x="96.2293%" y="751.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (4,254,437 samples, 0.10%)</title><rect x="95.9793%" y="725" width="0.1020%" height="15" fill="rgb(205,184,25)" fg:x="4001988837" fg:w="4254437"/><text x="96.2293%" y="735.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (4,254,437 samples, 0.10%)</title><rect x="95.9793%" y="709" width="0.1020%" height="15" fill="rgb(228,1,10)" fg:x="4001988837" fg:w="4254437"/><text x="96.2293%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (8,451,354 samples, 0.20%)</title><rect x="96.0814%" y="757" width="0.2027%" height="15" fill="rgb(213,116,27)" fg:x="4006243274" fg:w="8451354"/><text x="96.3314%" y="767.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (8,451,354 samples, 0.20%)</title><rect x="96.0814%" y="741" width="0.2027%" height="15" fill="rgb(241,95,50)" fg:x="4006243274" fg:w="8451354"/><text x="96.3314%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (8,451,354 samples, 0.20%)</title><rect x="96.0814%" y="725" width="0.2027%" height="15" fill="rgb(238,48,32)" fg:x="4006243274" fg:w="8451354"/><text x="96.3314%" y="735.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (8,451,354 samples, 0.20%)</title><rect x="96.0814%" y="709" width="0.2027%" height="15" fill="rgb(235,113,49)" fg:x="4006243274" fg:w="8451354"/><text x="96.3314%" y="719.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (8,451,354 samples, 0.20%)</title><rect x="96.0814%" y="693" width="0.2027%" height="15" fill="rgb(205,127,43)" fg:x="4006243274" fg:w="8451354"/><text x="96.3314%" y="703.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8,451,354 samples, 0.20%)</title><rect x="96.0814%" y="677" width="0.2027%" height="15" fill="rgb(250,162,2)" fg:x="4006243274" fg:w="8451354"/><text x="96.3314%" y="687.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (37,972,057 samples, 0.91%)</title><rect x="95.4762%" y="805" width="0.9107%" height="15" fill="rgb(220,13,41)" fg:x="3981009505" fg:w="37972057"/><text x="95.7262%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16,992,725 samples, 0.41%)</title><rect x="95.9793%" y="789" width="0.4075%" height="15" fill="rgb(249,221,25)" fg:x="4001988837" fg:w="16992725"/><text x="96.2293%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (16,992,725 samples, 0.41%)</title><rect x="95.9793%" y="773" width="0.4075%" height="15" fill="rgb(215,208,19)" fg:x="4001988837" fg:w="16992725"/><text x="96.2293%" y="783.50"></text></g><g><title>hashbrown::raw::h2 (4,286,934 samples, 0.10%)</title><rect x="96.2841%" y="757" width="0.1028%" height="15" fill="rgb(236,175,2)" fg:x="4014694628" fg:w="4286934"/><text x="96.5341%" y="767.50"></text></g><g><title>malloc (48,851,700 samples, 1.17%)</title><rect x="96.3869%" y="805" width="1.1716%" height="15" fill="rgb(241,52,2)" fg:x="4018981562" fg:w="48851700"/><text x="96.6369%" y="815.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,194,860 samples, 0.10%)</title><rect x="97.5585%" y="773" width="0.1006%" height="15" fill="rgb(248,140,14)" fg:x="4067833262" fg:w="4194860"/><text x="97.8085%" y="783.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (4,194,860 samples, 0.10%)</title><rect x="97.5585%" y="757" width="0.1006%" height="15" fill="rgb(253,22,42)" fg:x="4067833262" fg:w="4194860"/><text x="97.8085%" y="767.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (4,194,860 samples, 0.10%)</title><rect x="97.5585%" y="741" width="0.1006%" height="15" fill="rgb(234,61,47)" fg:x="4067833262" fg:w="4194860"/><text x="97.8085%" y="751.50"></text></g><g><title>core::str::pattern::Searcher::next_match (4,194,860 samples, 0.10%)</title><rect x="97.5585%" y="725" width="0.1006%" height="15" fill="rgb(208,226,15)" fg:x="4067833262" fg:w="4194860"/><text x="97.8085%" y="735.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (4,194,860 samples, 0.10%)</title><rect x="97.5585%" y="709" width="0.1006%" height="15" fill="rgb(217,221,4)" fg:x="4067833262" fg:w="4194860"/><text x="97.8085%" y="719.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4,194,860 samples, 0.10%)</title><rect x="97.5585%" y="693" width="0.1006%" height="15" fill="rgb(212,174,34)" fg:x="4067833262" fg:w="4194860"/><text x="97.8085%" y="703.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (4,194,860 samples, 0.10%)</title><rect x="97.5585%" y="677" width="0.1006%" height="15" fill="rgb(253,83,4)" fg:x="4067833262" fg:w="4194860"/><text x="97.8085%" y="687.50"></text></g><g><title>core::str::validations::next_code_point (4,194,860 samples, 0.10%)</title><rect x="97.5585%" y="661" width="0.1006%" height="15" fill="rgb(250,195,49)" fg:x="4067833262" fg:w="4194860"/><text x="97.8085%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,980,603 samples, 0.10%)</title><rect x="97.6591%" y="645" width="0.0955%" height="15" fill="rgb(241,192,25)" fg:x="4072028122" fg:w="3980603"/><text x="97.9091%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,980,603 samples, 0.10%)</title><rect x="97.6591%" y="629" width="0.0955%" height="15" fill="rgb(208,124,10)" fg:x="4072028122" fg:w="3980603"/><text x="97.9091%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,980,603 samples, 0.10%)</title><rect x="97.6591%" y="613" width="0.0955%" height="15" fill="rgb(222,33,0)" fg:x="4072028122" fg:w="3980603"/><text x="97.9091%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,980,603 samples, 0.10%)</title><rect x="97.6591%" y="597" width="0.0955%" height="15" fill="rgb(234,209,28)" fg:x="4072028122" fg:w="3980603"/><text x="97.9091%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,980,603 samples, 0.10%)</title><rect x="97.6591%" y="581" width="0.0955%" height="15" fill="rgb(224,11,23)" fg:x="4072028122" fg:w="3980603"/><text x="97.9091%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,980,603 samples, 0.10%)</title><rect x="97.6591%" y="565" width="0.0955%" height="15" fill="rgb(232,99,1)" fg:x="4072028122" fg:w="3980603"/><text x="97.9091%" y="575.50"></text></g><g><title>alloc::alloc::alloc (3,980,603 samples, 0.10%)</title><rect x="97.6591%" y="549" width="0.0955%" height="15" fill="rgb(237,95,45)" fg:x="4072028122" fg:w="3980603"/><text x="97.9091%" y="559.50"></text></g><g><title>onebrc::main (12,436,215 samples, 0.30%)</title><rect x="97.5585%" y="805" width="0.2983%" height="15" fill="rgb(208,109,11)" fg:x="4067833262" fg:w="12436215"/><text x="97.8085%" y="815.50"></text></g><g><title>onebrc::process_raw_stations (12,436,215 samples, 0.30%)</title><rect x="97.5585%" y="789" width="0.2983%" height="15" fill="rgb(216,190,48)" fg:x="4067833262" fg:w="12436215"/><text x="97.8085%" y="799.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (8,241,355 samples, 0.20%)</title><rect x="97.6591%" y="773" width="0.1977%" height="15" fill="rgb(251,171,36)" fg:x="4072028122" fg:w="8241355"/><text x="97.9091%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (8,241,355 samples, 0.20%)</title><rect x="97.6591%" y="757" width="0.1977%" height="15" fill="rgb(230,62,22)" fg:x="4072028122" fg:w="8241355"/><text x="97.9091%" y="767.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (8,241,355 samples, 0.20%)</title><rect x="97.6591%" y="741" width="0.1977%" height="15" fill="rgb(225,114,35)" fg:x="4072028122" fg:w="8241355"/><text x="97.9091%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (8,241,355 samples, 0.20%)</title><rect x="97.6591%" y="725" width="0.1977%" height="15" fill="rgb(215,118,42)" fg:x="4072028122" fg:w="8241355"/><text x="97.9091%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8,241,355 samples, 0.20%)</title><rect x="97.6591%" y="709" width="0.1977%" height="15" fill="rgb(243,119,21)" fg:x="4072028122" fg:w="8241355"/><text x="97.9091%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8,241,355 samples, 0.20%)</title><rect x="97.6591%" y="693" width="0.1977%" height="15" fill="rgb(252,177,53)" fg:x="4072028122" fg:w="8241355"/><text x="97.9091%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (8,241,355 samples, 0.20%)</title><rect x="97.6591%" y="677" width="0.1977%" height="15" fill="rgb(237,209,29)" fg:x="4072028122" fg:w="8241355"/><text x="97.9091%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8,241,355 samples, 0.20%)</title><rect x="97.6591%" y="661" width="0.1977%" height="15" fill="rgb(212,65,23)" fg:x="4072028122" fg:w="8241355"/><text x="97.9091%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4,260,752 samples, 0.10%)</title><rect x="97.7546%" y="645" width="0.1022%" height="15" fill="rgb(230,222,46)" fg:x="4076008725" fg:w="4260752"/><text x="98.0046%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,260,752 samples, 0.10%)</title><rect x="97.7546%" y="629" width="0.1022%" height="15" fill="rgb(215,135,32)" fg:x="4076008725" fg:w="4260752"/><text x="98.0046%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (8,335,044 samples, 0.20%)</title><rect x="97.8567%" y="613" width="0.1999%" height="15" fill="rgb(246,101,22)" fg:x="4080269477" fg:w="8335044"/><text x="98.1067%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (8,335,044 samples, 0.20%)</title><rect x="97.8567%" y="597" width="0.1999%" height="15" fill="rgb(206,107,13)" fg:x="4080269477" fg:w="8335044"/><text x="98.1067%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (8,335,044 samples, 0.20%)</title><rect x="97.8567%" y="581" width="0.1999%" height="15" fill="rgb(250,100,44)" fg:x="4080269477" fg:w="8335044"/><text x="98.1067%" y="591.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (16,690,024 samples, 0.40%)</title><rect x="97.8567%" y="661" width="0.4003%" height="15" fill="rgb(231,147,38)" fg:x="4080269477" fg:w="16690024"/><text x="98.1067%" y="671.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (16,690,024 samples, 0.40%)</title><rect x="97.8567%" y="645" width="0.4003%" height="15" fill="rgb(229,8,40)" fg:x="4080269477" fg:w="16690024"/><text x="98.1067%" y="655.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (16,690,024 samples, 0.40%)</title><rect x="97.8567%" y="629" width="0.4003%" height="15" fill="rgb(221,135,30)" fg:x="4080269477" fg:w="16690024"/><text x="98.1067%" y="639.50"></text></g><g><title>core::slice::memchr::memchr (8,354,980 samples, 0.20%)</title><rect x="98.0566%" y="613" width="0.2004%" height="15" fill="rgb(249,193,18)" fg:x="4088604521" fg:w="8354980"/><text x="98.3066%" y="623.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (20,395,050 samples, 0.49%)</title><rect x="97.8567%" y="693" width="0.4891%" height="15" fill="rgb(209,133,39)" fg:x="4080269477" fg:w="20395050"/><text x="98.1067%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20,395,050 samples, 0.49%)</title><rect x="97.8567%" y="677" width="0.4891%" height="15" fill="rgb(232,100,14)" fg:x="4080269477" fg:w="20395050"/><text x="98.1067%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,705,026 samples, 0.09%)</title><rect x="98.2570%" y="661" width="0.0889%" height="15" fill="rgb(224,185,1)" fg:x="4096959501" fg:w="3705026"/><text x="98.5070%" y="671.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,705,026 samples, 0.09%)</title><rect x="98.2570%" y="645" width="0.0889%" height="15" fill="rgb(223,139,8)" fg:x="4096959501" fg:w="3705026"/><text x="98.5070%" y="655.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (3,705,026 samples, 0.09%)</title><rect x="98.2570%" y="629" width="0.0889%" height="15" fill="rgb(232,213,38)" fg:x="4096959501" fg:w="3705026"/><text x="98.5070%" y="639.50"></text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (3,705,026 samples, 0.09%)</title><rect x="98.2570%" y="613" width="0.0889%" height="15" fill="rgb(207,94,22)" fg:x="4096959501" fg:w="3705026"/><text x="98.5070%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (3,705,026 samples, 0.09%)</title><rect x="98.2570%" y="597" width="0.0889%" height="15" fill="rgb(219,183,54)" fg:x="4096959501" fg:w="3705026"/><text x="98.5070%" y="607.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (3,705,026 samples, 0.09%)</title><rect x="98.2570%" y="581" width="0.0889%" height="15" fill="rgb(216,185,54)" fg:x="4096959501" fg:w="3705026"/><text x="98.5070%" y="591.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (3,705,026 samples, 0.09%)</title><rect x="98.2570%" y="565" width="0.0889%" height="15" fill="rgb(254,217,39)" fg:x="4096959501" fg:w="3705026"/><text x="98.5070%" y="575.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (3,705,026 samples, 0.09%)</title><rect x="98.2570%" y="549" width="0.0889%" height="15" fill="rgb(240,178,23)" fg:x="4096959501" fg:w="3705026"/><text x="98.5070%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (3,705,026 samples, 0.09%)</title><rect x="98.2570%" y="533" width="0.0889%" height="15" fill="rgb(218,11,47)" fg:x="4096959501" fg:w="3705026"/><text x="98.5070%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,705,026 samples, 0.09%)</title><rect x="98.2570%" y="517" width="0.0889%" height="15" fill="rgb(218,51,51)" fg:x="4096959501" fg:w="3705026"/><text x="98.5070%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (3,705,026 samples, 0.09%)</title><rect x="98.2570%" y="501" width="0.0889%" height="15" fill="rgb(238,126,27)" fg:x="4096959501" fg:w="3705026"/><text x="98.5070%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3,705,026 samples, 0.09%)</title><rect x="98.2570%" y="485" width="0.0889%" height="15" fill="rgb(249,202,22)" fg:x="4096959501" fg:w="3705026"/><text x="98.5070%" y="495.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (32,803,661 samples, 0.79%)</title><rect x="98.3459%" y="693" width="0.7867%" height="15" fill="rgb(254,195,49)" fg:x="4100664527" fg:w="32803661"/><text x="98.5959%" y="703.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (32,803,661 samples, 0.79%)</title><rect x="98.3459%" y="677" width="0.7867%" height="15" fill="rgb(208,123,14)" fg:x="4100664527" fg:w="32803661"/><text x="98.5959%" y="687.50"></text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (28,477,154 samples, 0.68%)</title><rect x="98.4496%" y="661" width="0.6830%" height="15" fill="rgb(224,200,8)" fg:x="4104991034" fg:w="28477154"/><text x="98.6996%" y="671.50"></text></g><g><title>core::str::pattern::Searcher::next_match (28,477,154 samples, 0.68%)</title><rect x="98.4496%" y="645" width="0.6830%" height="15" fill="rgb(217,61,36)" fg:x="4104991034" fg:w="28477154"/><text x="98.6996%" y="655.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (28,477,154 samples, 0.68%)</title><rect x="98.4496%" y="629" width="0.6830%" height="15" fill="rgb(206,35,45)" fg:x="4104991034" fg:w="28477154"/><text x="98.6996%" y="639.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (28,477,154 samples, 0.68%)</title><rect x="98.4496%" y="613" width="0.6830%" height="15" fill="rgb(217,65,33)" fg:x="4104991034" fg:w="28477154"/><text x="98.6996%" y="623.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (24,859,984 samples, 0.60%)</title><rect x="98.5364%" y="597" width="0.5962%" height="15" fill="rgb(222,158,48)" fg:x="4108608204" fg:w="24859984"/><text x="98.7864%" y="607.50"></text></g><g><title>core::str::validations::next_code_point (24,859,984 samples, 0.60%)</title><rect x="98.5364%" y="581" width="0.5962%" height="15" fill="rgb(254,2,54)" fg:x="4108608204" fg:w="24859984"/><text x="98.7864%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,462,927 samples, 0.20%)</title><rect x="98.9296%" y="565" width="0.2030%" height="15" fill="rgb(250,143,38)" fg:x="4125005261" fg:w="8462927"/><text x="99.1796%" y="575.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4,127,889 samples, 0.10%)</title><rect x="99.0336%" y="549" width="0.0990%" height="15" fill="rgb(248,25,0)" fg:x="4129340299" fg:w="4127889"/><text x="99.2836%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12,068,533 samples, 0.29%)</title><rect x="99.1326%" y="501" width="0.2894%" height="15" fill="rgb(206,152,27)" fg:x="4133468188" fg:w="12068533"/><text x="99.3826%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12,068,533 samples, 0.29%)</title><rect x="99.1326%" y="485" width="0.2894%" height="15" fill="rgb(240,77,30)" fg:x="4133468188" fg:w="12068533"/><text x="99.3826%" y="495.50"></text></g><g><title>alloc::alloc::alloc (12,068,533 samples, 0.29%)</title><rect x="99.1326%" y="469" width="0.2894%" height="15" fill="rgb(231,5,3)" fg:x="4133468188" fg:w="12068533"/><text x="99.3826%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16,035,156 samples, 0.38%)</title><rect x="99.1326%" y="565" width="0.3846%" height="15" fill="rgb(207,226,32)" fg:x="4133468188" fg:w="16035156"/><text x="99.3826%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16,035,156 samples, 0.38%)</title><rect x="99.1326%" y="549" width="0.3846%" height="15" fill="rgb(222,207,47)" fg:x="4133468188" fg:w="16035156"/><text x="99.3826%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (16,035,156 samples, 0.38%)</title><rect x="99.1326%" y="533" width="0.3846%" height="15" fill="rgb(229,115,45)" fg:x="4133468188" fg:w="16035156"/><text x="99.3826%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (16,035,156 samples, 0.38%)</title><rect x="99.1326%" y="517" width="0.3846%" height="15" fill="rgb(224,191,6)" fg:x="4133468188" fg:w="16035156"/><text x="99.3826%" y="527.50"></text></g><g><title>alloc::raw_vec::layout_array (3,966,623 samples, 0.10%)</title><rect x="99.4220%" y="501" width="0.0951%" height="15" fill="rgb(230,227,24)" fg:x="4145536721" fg:w="3966623"/><text x="99.6720%" y="511.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3,966,623 samples, 0.10%)</title><rect x="99.4220%" y="485" width="0.0951%" height="15" fill="rgb(228,80,19)" fg:x="4145536721" fg:w="3966623"/><text x="99.6720%" y="495.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (3,966,623 samples, 0.10%)</title><rect x="99.4220%" y="469" width="0.0951%" height="15" fill="rgb(247,229,0)" fg:x="4145536721" fg:w="3966623"/><text x="99.6720%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (3,966,623 samples, 0.10%)</title><rect x="99.4220%" y="453" width="0.0951%" height="15" fill="rgb(237,194,15)" fg:x="4145536721" fg:w="3966623"/><text x="99.6720%" y="463.50"></text></g><g><title>core::intrinsics::unlikely (3,966,623 samples, 0.10%)</title><rect x="99.4220%" y="437" width="0.0951%" height="15" fill="rgb(219,203,20)" fg:x="4145536721" fg:w="3966623"/><text x="99.6720%" y="447.50"></text></g><g><title>onebrc (4,169,633,895 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(234,128,8)" fg:x="0" fg:w="4169633895"/><text x="0.2500%" y="831.50">onebrc</text></g><g><title>std::io::default_read_to_end::small_probe_read (89,364,418 samples, 2.14%)</title><rect x="97.8567%" y="805" width="2.1432%" height="15" fill="rgb(248,202,8)" fg:x="4080269477" fg:w="89364418"/><text x="98.1067%" y="815.50">s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (89,364,418 samples, 2.14%)</title><rect x="97.8567%" y="789" width="2.1432%" height="15" fill="rgb(206,104,37)" fg:x="4080269477" fg:w="89364418"/><text x="98.1067%" y="799.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (89,364,418 samples, 2.14%)</title><rect x="97.8567%" y="773" width="2.1432%" height="15" fill="rgb(223,8,27)" fg:x="4080269477" fg:w="89364418"/><text x="98.1067%" y="783.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (89,364,418 samples, 2.14%)</title><rect x="97.8567%" y="757" width="2.1432%" height="15" fill="rgb(216,217,28)" fg:x="4080269477" fg:w="89364418"/><text x="98.1067%" y="767.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (89,364,418 samples, 2.14%)</title><rect x="97.8567%" y="741" width="2.1432%" height="15" fill="rgb(249,199,1)" fg:x="4080269477" fg:w="89364418"/><text x="98.1067%" y="751.50">c..</text></g><g><title>onebrc::main (89,364,418 samples, 2.14%)</title><rect x="97.8567%" y="725" width="2.1432%" height="15" fill="rgb(240,85,17)" fg:x="4080269477" fg:w="89364418"/><text x="98.1067%" y="735.50">o..</text></g><g><title>onebrc::process_raw_stations (89,364,418 samples, 2.14%)</title><rect x="97.8567%" y="709" width="2.1432%" height="15" fill="rgb(206,108,45)" fg:x="4080269477" fg:w="89364418"/><text x="98.1067%" y="719.50">o..</text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (36,165,707 samples, 0.87%)</title><rect x="99.1326%" y="693" width="0.8674%" height="15" fill="rgb(245,210,41)" fg:x="4133468188" fg:w="36165707"/><text x="99.3826%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (36,165,707 samples, 0.87%)</title><rect x="99.1326%" y="677" width="0.8674%" height="15" fill="rgb(206,13,37)" fg:x="4133468188" fg:w="36165707"/><text x="99.3826%" y="687.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (36,165,707 samples, 0.87%)</title><rect x="99.1326%" y="661" width="0.8674%" height="15" fill="rgb(250,61,18)" fg:x="4133468188" fg:w="36165707"/><text x="99.3826%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (36,165,707 samples, 0.87%)</title><rect x="99.1326%" y="645" width="0.8674%" height="15" fill="rgb(235,172,48)" fg:x="4133468188" fg:w="36165707"/><text x="99.3826%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (36,165,707 samples, 0.87%)</title><rect x="99.1326%" y="629" width="0.8674%" height="15" fill="rgb(249,201,17)" fg:x="4133468188" fg:w="36165707"/><text x="99.3826%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (36,165,707 samples, 0.87%)</title><rect x="99.1326%" y="613" width="0.8674%" height="15" fill="rgb(219,208,6)" fg:x="4133468188" fg:w="36165707"/><text x="99.3826%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (36,165,707 samples, 0.87%)</title><rect x="99.1326%" y="597" width="0.8674%" height="15" fill="rgb(248,31,23)" fg:x="4133468188" fg:w="36165707"/><text x="99.3826%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (36,165,707 samples, 0.87%)</title><rect x="99.1326%" y="581" width="0.8674%" height="15" fill="rgb(245,15,42)" fg:x="4133468188" fg:w="36165707"/><text x="99.3826%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (20,130,551 samples, 0.48%)</title><rect x="99.5172%" y="565" width="0.4828%" height="15" fill="rgb(222,217,39)" fg:x="4149503344" fg:w="20130551"/><text x="99.7672%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20,130,551 samples, 0.48%)</title><rect x="99.5172%" y="549" width="0.4828%" height="15" fill="rgb(210,219,27)" fg:x="4149503344" fg:w="20130551"/><text x="99.7672%" y="559.50"></text></g><g><title>all (4,169,635,677 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(252,166,36)" fg:x="0" fg:w="4169635677"/><text x="0.2500%" y="847.50"></text></g></svg></svg>