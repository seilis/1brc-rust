<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="2574209567"><g><title>[ld-linux-x86-64.so.2] (634,177 samples, 0.02%)</title><rect x="0.0000%" y="501" width="0.0246%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="634177"/><text x="0.2500%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (557,207 samples, 0.02%)</title><rect x="0.0030%" y="485" width="0.0216%" height="15" fill="rgb(217,0,24)" fg:x="76970" fg:w="557207"/><text x="0.2530%" y="495.50"></text></g><g><title>_dl_catch_exception (557,207 samples, 0.02%)</title><rect x="0.0030%" y="469" width="0.0216%" height="15" fill="rgb(221,193,54)" fg:x="76970" fg:w="557207"/><text x="0.2530%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (557,207 samples, 0.02%)</title><rect x="0.0030%" y="453" width="0.0216%" height="15" fill="rgb(248,212,6)" fg:x="76970" fg:w="557207"/><text x="0.2530%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (557,207 samples, 0.02%)</title><rect x="0.0030%" y="437" width="0.0216%" height="15" fill="rgb(208,68,35)" fg:x="76970" fg:w="557207"/><text x="0.2530%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (557,207 samples, 0.02%)</title><rect x="0.0030%" y="421" width="0.0216%" height="15" fill="rgb(232,128,0)" fg:x="76970" fg:w="557207"/><text x="0.2530%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (557,207 samples, 0.02%)</title><rect x="0.0030%" y="405" width="0.0216%" height="15" fill="rgb(207,160,47)" fg:x="76970" fg:w="557207"/><text x="0.2530%" y="415.50"></text></g><g><title>[unknown] (557,207 samples, 0.02%)</title><rect x="0.0030%" y="389" width="0.0216%" height="15" fill="rgb(228,23,34)" fg:x="76970" fg:w="557207"/><text x="0.2530%" y="399.50"></text></g><g><title>[unknown] (557,207 samples, 0.02%)</title><rect x="0.0030%" y="373" width="0.0216%" height="15" fill="rgb(218,30,26)" fg:x="76970" fg:w="557207"/><text x="0.2530%" y="383.50"></text></g><g><title>[unknown] (557,207 samples, 0.02%)</title><rect x="0.0030%" y="357" width="0.0216%" height="15" fill="rgb(220,122,19)" fg:x="76970" fg:w="557207"/><text x="0.2530%" y="367.50"></text></g><g><title>[unknown] (557,207 samples, 0.02%)</title><rect x="0.0030%" y="341" width="0.0216%" height="15" fill="rgb(250,228,42)" fg:x="76970" fg:w="557207"/><text x="0.2530%" y="351.50"></text></g><g><title>[unknown] (557,207 samples, 0.02%)</title><rect x="0.0030%" y="325" width="0.0216%" height="15" fill="rgb(240,193,28)" fg:x="76970" fg:w="557207"/><text x="0.2530%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (641,561 samples, 0.02%)</title><rect x="0.0000%" y="517" width="0.0249%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="641561"/><text x="0.2500%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (642,267 samples, 0.02%)</title><rect x="0.0000%" y="533" width="0.0250%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="642267"/><text x="0.2500%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (642,268 samples, 0.02%)</title><rect x="0.0000%" y="549" width="0.0250%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="642268"/><text x="0.2500%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (17,286,560 samples, 0.67%)</title><rect x="3.4577%" y="181" width="0.6715%" height="15" fill="rgb(231,73,38)" fg:x="89009048" fg:w="17286560"/><text x="3.7077%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (17,286,560 samples, 0.67%)</title><rect x="3.4577%" y="165" width="0.6715%" height="15" fill="rgb(225,20,46)" fg:x="89009048" fg:w="17286560"/><text x="3.7077%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (17,286,560 samples, 0.67%)</title><rect x="3.4577%" y="149" width="0.6715%" height="15" fill="rgb(210,31,41)" fg:x="89009048" fg:w="17286560"/><text x="3.7077%" y="159.50"></text></g><g><title>core::cmp::Ord::min (17,295,609 samples, 0.67%)</title><rect x="16.9300%" y="133" width="0.6719%" height="15" fill="rgb(221,200,47)" fg:x="435813311" fg:w="17295609"/><text x="17.1800%" y="143.50"></text></g><g><title>core::cmp::min_by (17,295,609 samples, 0.67%)</title><rect x="16.9300%" y="117" width="0.6719%" height="15" fill="rgb(226,26,5)" fg:x="435813311" fg:w="17295609"/><text x="17.1800%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (4,294,195 samples, 0.17%)</title><rect x="17.6019%" y="133" width="0.1668%" height="15" fill="rgb(249,33,26)" fg:x="453108920" fg:w="4294195"/><text x="17.8519%" y="143.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (590,307,682 samples, 22.93%)</title><rect x="1.2246%" y="229" width="22.9316%" height="15" fill="rgb(235,183,28)" fg:x="31522636" fg:w="590307682"/><text x="1.4746%" y="239.50">&lt;core::str::iter::SplitInclusive&lt;P&gt; ..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (590,307,682 samples, 22.93%)</title><rect x="1.2246%" y="213" width="22.9316%" height="15" fill="rgb(221,5,38)" fg:x="31522636" fg:w="590307682"/><text x="1.4746%" y="223.50">core::str::iter::SplitInternal&lt;P&gt;::n..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (568,669,920 samples, 22.09%)</title><rect x="2.0651%" y="197" width="22.0910%" height="15" fill="rgb(247,18,42)" fg:x="53160398" fg:w="568669920"/><text x="2.3151%" y="207.50">&lt;core::str::pattern::CharSearcher a..</text></g><g><title>core::slice::memchr::memchr (515,534,710 samples, 20.03%)</title><rect x="4.1293%" y="181" width="20.0269%" height="15" fill="rgb(241,131,45)" fg:x="106295608" fg:w="515534710"/><text x="4.3793%" y="191.50">core::slice::memchr::memchr</text></g><g><title>core::slice::memchr::memchr_aligned (511,253,045 samples, 19.86%)</title><rect x="4.2956%" y="165" width="19.8606%" height="15" fill="rgb(249,31,29)" fg:x="110577273" fg:w="511253045"/><text x="4.5456%" y="175.50">core::slice::memchr::memchr_ali..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (303,674,780 samples, 11.80%)</title><rect x="12.3593%" y="149" width="11.7968%" height="15" fill="rgb(225,111,53)" fg:x="318155538" fg:w="303674780"/><text x="12.6093%" y="159.50">core::slice::memc..</text></g><g><title>core::slice::memchr::memchr_naive (164,427,203 samples, 6.39%)</title><rect x="17.7687%" y="133" width="6.3875%" height="15" fill="rgb(238,160,17)" fg:x="457403115" fg:w="164427203"/><text x="18.0187%" y="143.50">core::sl..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (642,144,169 samples, 24.95%)</title><rect x="1.2246%" y="261" width="24.9453%" height="15" fill="rgb(214,148,48)" fg:x="31522636" fg:w="642144169"/><text x="1.4746%" y="271.50">&lt;core::str::iter::Lines as core::iter::t..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (642,144,169 samples, 24.95%)</title><rect x="1.2246%" y="245" width="24.9453%" height="15" fill="rgb(232,36,49)" fg:x="31522636" fg:w="642144169"/><text x="1.4746%" y="255.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as ..</text></g><g><title>core::option::Option&lt;T&gt;::map (51,836,487 samples, 2.01%)</title><rect x="24.1562%" y="229" width="2.0137%" height="15" fill="rgb(209,103,24)" fg:x="621830318" fg:w="51836487"/><text x="24.4062%" y="239.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (51,836,487 samples, 2.01%)</title><rect x="24.1562%" y="213" width="2.0137%" height="15" fill="rgb(229,88,8)" fg:x="621830318" fg:w="51836487"/><text x="24.4062%" y="223.50">c..</text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (51,836,487 samples, 2.01%)</title><rect x="24.1562%" y="197" width="2.0137%" height="15" fill="rgb(213,181,19)" fg:x="621830318" fg:w="51836487"/><text x="24.4062%" y="207.50">&lt;..</text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (51,836,487 samples, 2.01%)</title><rect x="24.1562%" y="181" width="2.0137%" height="15" fill="rgb(254,191,54)" fg:x="621830318" fg:w="51836487"/><text x="24.4062%" y="191.50">&lt;..</text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (17,272,694 samples, 0.67%)</title><rect x="25.4989%" y="165" width="0.6710%" height="15" fill="rgb(241,83,37)" fg:x="656394111" fg:w="17272694"/><text x="25.7489%" y="175.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (17,272,694 samples, 0.67%)</title><rect x="25.4989%" y="149" width="0.6710%" height="15" fill="rgb(233,36,39)" fg:x="656394111" fg:w="17272694"/><text x="25.7489%" y="159.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (17,272,694 samples, 0.67%)</title><rect x="25.4989%" y="133" width="0.6710%" height="15" fill="rgb(226,3,54)" fg:x="656394111" fg:w="17272694"/><text x="25.7489%" y="143.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (17,272,694 samples, 0.67%)</title><rect x="25.4989%" y="117" width="0.6710%" height="15" fill="rgb(245,192,40)" fg:x="656394111" fg:w="17272694"/><text x="25.7489%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (17,272,694 samples, 0.67%)</title><rect x="25.4989%" y="101" width="0.6710%" height="15" fill="rgb(238,167,29)" fg:x="656394111" fg:w="17272694"/><text x="25.7489%" y="111.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (8,654,313 samples, 0.34%)</title><rect x="28.1843%" y="181" width="0.3362%" height="15" fill="rgb(232,182,51)" fg:x="725521924" fg:w="8654313"/><text x="28.4343%" y="191.50"></text></g><g><title>onebrc::process_raw_stations::_{{closure}} (8,654,313 samples, 0.34%)</title><rect x="28.1843%" y="165" width="0.3362%" height="15" fill="rgb(231,60,39)" fg:x="725521924" fg:w="8654313"/><text x="28.4343%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (125,590,945 samples, 4.88%)</title><rect x="42.4993%" y="133" width="4.8788%" height="15" fill="rgb(208,69,12)" fg:x="1094021648" fg:w="125590945"/><text x="42.7493%" y="143.50">&lt;core:..</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (550,268,503 samples, 21.38%)</title><rect x="26.1699%" y="261" width="21.3762%" height="15" fill="rgb(235,93,37)" fg:x="673666805" fg:w="550268503"/><text x="26.4199%" y="271.50">&lt;core::str::iter::Split&lt;P&gt; as core..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (550,268,503 samples, 21.38%)</title><rect x="26.1699%" y="245" width="21.3762%" height="15" fill="rgb(213,116,39)" fg:x="673666805" fg:w="550268503"/><text x="26.4199%" y="255.50">core::str::iter::SplitInternal&lt;P&gt;:..</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (515,728,508 samples, 20.03%)</title><rect x="27.5116%" y="229" width="20.0344%" height="15" fill="rgb(222,207,29)" fg:x="708206800" fg:w="515728508"/><text x="27.7616%" y="239.50">&lt;core::str::pattern::CharPredic..</text></g><g><title>core::str::pattern::Searcher::next_match (515,728,508 samples, 20.03%)</title><rect x="27.5116%" y="213" width="20.0344%" height="15" fill="rgb(206,96,30)" fg:x="708206800" fg:w="515728508"/><text x="27.7616%" y="223.50">core::str::pattern::Searcher::n..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (498,413,384 samples, 19.36%)</title><rect x="28.1843%" y="197" width="19.3618%" height="15" fill="rgb(218,138,4)" fg:x="725521924" fg:w="498413384"/><text x="28.4343%" y="207.50">&lt;core::str::pattern::MultiChar..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (489,759,071 samples, 19.03%)</title><rect x="28.5205%" y="181" width="19.0256%" height="15" fill="rgb(250,191,14)" fg:x="734176237" fg:w="489759071"/><text x="28.7705%" y="191.50">&lt;core::str::iter::CharIndices ..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (489,759,071 samples, 19.03%)</title><rect x="28.5205%" y="165" width="19.0256%" height="15" fill="rgb(239,60,40)" fg:x="734176237" fg:w="489759071"/><text x="28.7705%" y="175.50">&lt;core::str::iter::Chars as cor..</text></g><g><title>core::str::validations::next_code_point (489,759,071 samples, 19.03%)</title><rect x="28.5205%" y="149" width="19.0256%" height="15" fill="rgb(206,27,48)" fg:x="734176237" fg:w="489759071"/><text x="28.7705%" y="159.50">core::str::validations::next_c..</text></g><g><title>core::str::validations::utf8_first_byte (4,322,715 samples, 0.17%)</title><rect x="47.3781%" y="133" width="0.1679%" height="15" fill="rgb(225,35,8)" fg:x="1219612593" fg:w="4322715"/><text x="47.6281%" y="143.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (51,987,268 samples, 2.02%)</title><rect x="61.1095%" y="213" width="2.0195%" height="15" fill="rgb(250,213,24)" fg:x="1573085514" fg:w="51987268"/><text x="61.3595%" y="223.50">c..</text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (43,348,693 samples, 1.68%)</title><rect x="61.4450%" y="197" width="1.6840%" height="15" fill="rgb(247,123,22)" fg:x="1581724089" fg:w="43348693"/><text x="61.6950%" y="207.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (8,715,709 samples, 0.34%)</title><rect x="68.3268%" y="149" width="0.3386%" height="15" fill="rgb(231,138,38)" fg:x="1758875292" fg:w="8715709"/><text x="68.5768%" y="159.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (17,232,843 samples, 0.67%)</title><rect x="68.6654%" y="149" width="0.6694%" height="15" fill="rgb(231,145,46)" fg:x="1767591001" fg:w="17232843"/><text x="68.9154%" y="159.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (112,418,780 samples, 4.37%)</title><rect x="67.6547%" y="181" width="4.3671%" height="15" fill="rgb(251,118,11)" fg:x="1741573779" fg:w="112418780"/><text x="67.9047%" y="191.50">core:..</text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (108,102,776 samples, 4.20%)</title><rect x="67.8224%" y="165" width="4.1995%" height="15" fill="rgb(217,147,25)" fg:x="1745889783" fg:w="108102776"/><text x="68.0724%" y="175.50">&lt;[u8]..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (69,168,715 samples, 2.69%)</title><rect x="69.3348%" y="149" width="2.6870%" height="15" fill="rgb(247,81,37)" fg:x="1784823844" fg:w="69168715"/><text x="69.5848%" y="159.50">co..</text></g><g><title>core::str::&lt;impl str&gt;::parse (634,385,434 samples, 24.64%)</title><rect x="47.5461%" y="261" width="24.6439%" height="15" fill="rgb(209,12,38)" fg:x="1223935308" fg:w="634385434"/><text x="47.7961%" y="271.50">core::str::&lt;impl str&gt;::parse</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (634,385,434 samples, 24.64%)</title><rect x="47.5461%" y="245" width="24.6439%" height="15" fill="rgb(227,1,9)" fg:x="1223935308" fg:w="634385434"/><text x="47.7961%" y="255.50">core::num::dec2flt::&lt;impl core::str::tr..</text></g><g><title>core::num::dec2flt::dec2flt (521,552,423 samples, 20.26%)</title><rect x="51.9293%" y="229" width="20.2607%" height="15" fill="rgb(248,47,43)" fg:x="1336768319" fg:w="521552423"/><text x="52.1793%" y="239.50">core::num::dec2flt::dec2flt</text></g><g><title>core::num::dec2flt::parse::parse_number (233,247,960 samples, 9.06%)</title><rect x="63.1290%" y="213" width="9.0610%" height="15" fill="rgb(221,10,30)" fg:x="1625072782" fg:w="233247960"/><text x="63.3790%" y="223.50">core::num::de..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (151,333,934 samples, 5.88%)</title><rect x="66.3111%" y="197" width="5.8789%" height="15" fill="rgb(210,229,1)" fg:x="1706986808" fg:w="151333934"/><text x="66.5611%" y="207.50">core::n..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (4,328,183 samples, 0.17%)</title><rect x="72.0218%" y="181" width="0.1681%" height="15" fill="rgb(222,148,37)" fg:x="1853992559" fg:w="4328183"/><text x="72.2718%" y="191.50"></text></g><g><title>onebrc::Station::add_measurement (4,308,729 samples, 0.17%)</title><rect x="72.1900%" y="261" width="0.1674%" height="15" fill="rgb(234,67,33)" fg:x="1858320742" fg:w="4308729"/><text x="72.4400%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28,020,963 samples, 1.09%)</title><rect x="77.2300%" y="85" width="1.0885%" height="15" fill="rgb(247,98,35)" fg:x="1988061343" fg:w="28020963"/><text x="77.4800%" y="95.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (8,638,548 samples, 0.34%)</title><rect x="78.3185%" y="69" width="0.3356%" height="15" fill="rgb(247,138,52)" fg:x="2016082306" fg:w="8638548"/><text x="78.5685%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (62,540,098 samples, 2.43%)</title><rect x="76.5575%" y="213" width="2.4295%" height="15" fill="rgb(213,79,30)" fg:x="1970749208" fg:w="62540098"/><text x="76.8075%" y="223.50">ha..</text></g><g><title>core::hash::BuildHasher::hash_one (62,540,098 samples, 2.43%)</title><rect x="76.5575%" y="197" width="2.4295%" height="15" fill="rgb(246,177,23)" fg:x="1970749208" fg:w="62540098"/><text x="76.8075%" y="207.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (62,540,098 samples, 2.43%)</title><rect x="76.5575%" y="181" width="2.4295%" height="15" fill="rgb(230,62,27)" fg:x="1970749208" fg:w="62540098"/><text x="76.8075%" y="191.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (62,540,098 samples, 2.43%)</title><rect x="76.5575%" y="165" width="2.4295%" height="15" fill="rgb(216,154,8)" fg:x="1970749208" fg:w="62540098"/><text x="76.8075%" y="175.50">co..</text></g><g><title>core::hash::Hasher::write_str (62,540,098 samples, 2.43%)</title><rect x="76.5575%" y="149" width="2.4295%" height="15" fill="rgb(244,35,45)" fg:x="1970749208" fg:w="62540098"/><text x="76.8075%" y="159.50">co..</text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (62,540,098 samples, 2.43%)</title><rect x="76.5575%" y="133" width="2.4295%" height="15" fill="rgb(251,115,12)" fg:x="1970749208" fg:w="62540098"/><text x="76.8075%" y="143.50">&lt;f..</text></g><g><title>fxhash::write (62,540,098 samples, 2.43%)</title><rect x="76.5575%" y="117" width="2.4295%" height="15" fill="rgb(240,54,50)" fg:x="1970749208" fg:w="62540098"/><text x="76.8075%" y="127.50">fx..</text></g><g><title>fxhash::write64 (62,540,098 samples, 2.43%)</title><rect x="76.5575%" y="101" width="2.4295%" height="15" fill="rgb(233,84,52)" fg:x="1970749208" fg:w="62540098"/><text x="76.8075%" y="111.50">fx..</text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (17,207,000 samples, 0.67%)</title><rect x="78.3185%" y="85" width="0.6684%" height="15" fill="rgb(207,117,47)" fg:x="2016082306" fg:w="17207000"/><text x="78.5685%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8,568,452 samples, 0.33%)</title><rect x="78.6541%" y="69" width="0.3329%" height="15" fill="rgb(249,43,39)" fg:x="2024720854" fg:w="8568452"/><text x="78.9041%" y="79.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (34,610,525 samples, 1.34%)</title><rect x="79.4899%" y="149" width="1.3445%" height="15" fill="rgb(209,38,44)" fg:x="2046235736" fg:w="34610525"/><text x="79.7399%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (4,332,948 samples, 0.17%)</title><rect x="80.6661%" y="133" width="0.1683%" height="15" fill="rgb(236,212,23)" fg:x="2076513313" fg:w="4332948"/><text x="80.9161%" y="143.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (4,332,948 samples, 0.17%)</title><rect x="80.6661%" y="117" width="0.1683%" height="15" fill="rgb(242,79,21)" fg:x="2076513313" fg:w="4332948"/><text x="80.9161%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (38,936,902 samples, 1.51%)</title><rect x="79.4899%" y="165" width="1.5126%" height="15" fill="rgb(211,96,35)" fg:x="2046235736" fg:w="38936902"/><text x="79.7399%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (4,326,377 samples, 0.17%)</title><rect x="80.8344%" y="149" width="0.1681%" height="15" fill="rgb(253,215,40)" fg:x="2080846261" fg:w="4326377"/><text x="81.0844%" y="159.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (376,401,548 samples, 14.62%)</title><rect x="81.0024%" y="149" width="14.6220%" height="15" fill="rgb(211,81,21)" fg:x="2085172638" fg:w="376401548"/><text x="81.2524%" y="159.50">hashbrown::map::equiva..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (376,401,548 samples, 14.62%)</title><rect x="81.0024%" y="133" width="14.6220%" height="15" fill="rgb(208,190,38)" fg:x="2085172638" fg:w="376401548"/><text x="81.2524%" y="143.50">&lt;Q as hashbrown::Equiv..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (367,744,436 samples, 14.29%)</title><rect x="81.3387%" y="117" width="14.2857%" height="15" fill="rgb(235,213,38)" fg:x="2093829750" fg:w="367744436"/><text x="81.5887%" y="127.50">core::cmp::impls::&lt;imp..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (367,744,436 samples, 14.29%)</title><rect x="81.3387%" y="101" width="14.2857%" height="15" fill="rgb(237,122,38)" fg:x="2093829750" fg:w="367744436"/><text x="81.5887%" y="111.50">core::str::traits::&lt;im..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (367,744,436 samples, 14.29%)</title><rect x="81.3387%" y="85" width="14.2857%" height="15" fill="rgb(244,218,35)" fg:x="2093829750" fg:w="367744436"/><text x="81.5887%" y="95.50">core::cmp::impls::&lt;imp..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (367,744,436 samples, 14.29%)</title><rect x="81.3387%" y="69" width="14.2857%" height="15" fill="rgb(240,68,47)" fg:x="2093829750" fg:w="367744436"/><text x="81.5887%" y="79.50">core::slice::cmp::&lt;imp..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (367,744,436 samples, 14.29%)</title><rect x="81.3387%" y="53" width="14.2857%" height="15" fill="rgb(210,16,53)" fg:x="2093829750" fg:w="367744436"/><text x="81.5887%" y="63.50">&lt;[A] as core::slice::c..</text></g><g><title>[libc.so.6] (207,511,301 samples, 8.06%)</title><rect x="87.5633%" y="37" width="8.0612%" height="15" fill="rgb(235,124,12)" fg:x="2254062885" fg:w="207511301"/><text x="87.8133%" y="47.50">[libc.so.6]</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (4,323,773 samples, 0.17%)</title><rect x="95.6245%" y="149" width="0.1680%" height="15" fill="rgb(224,169,11)" fg:x="2461574186" fg:w="4323773"/><text x="95.8745%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (4,323,773 samples, 0.17%)</title><rect x="95.6245%" y="133" width="0.1680%" height="15" fill="rgb(250,166,2)" fg:x="2461574186" fg:w="4323773"/><text x="95.8745%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4,323,773 samples, 0.17%)</title><rect x="95.6245%" y="117" width="0.1680%" height="15" fill="rgb(242,216,29)" fg:x="2461574186" fg:w="4323773"/><text x="95.8745%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (393,705,507 samples, 15.29%)</title><rect x="81.0024%" y="165" width="15.2942%" height="15" fill="rgb(230,116,27)" fg:x="2085172638" fg:w="393705507"/><text x="81.2524%" y="175.50">hashbrown::raw::RawTabl..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (12,980,186 samples, 0.50%)</title><rect x="95.7924%" y="149" width="0.5042%" height="15" fill="rgb(228,99,48)" fg:x="2465897959" fg:w="12980186"/><text x="96.0424%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (12,980,186 samples, 0.50%)</title><rect x="95.7924%" y="133" width="0.5042%" height="15" fill="rgb(253,11,6)" fg:x="2465897959" fg:w="12980186"/><text x="96.0424%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12,980,186 samples, 0.50%)</title><rect x="95.7924%" y="117" width="0.5042%" height="15" fill="rgb(247,143,39)" fg:x="2465897959" fg:w="12980186"/><text x="96.0424%" y="127.50"></text></g><g><title>hashbrown::raw::h2 (21,594,264 samples, 0.84%)</title><rect x="96.2967%" y="165" width="0.8389%" height="15" fill="rgb(236,97,10)" fg:x="2478878145" fg:w="21594264"/><text x="96.5467%" y="175.50"></text></g><g><title>onebrc::process_raw_stations (2,504,151,031 samples, 97.28%)</title><rect x="0.0250%" y="277" width="97.2784%" height="15" fill="rgb(233,208,19)" fg:x="642268" fg:w="2504151031"/><text x="0.2750%" y="287.50">onebrc::process_raw_stations</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (642,163,828 samples, 24.95%)</title><rect x="72.3573%" y="261" width="24.9461%" height="15" fill="rgb(216,164,2)" fg:x="1862629471" fg:w="642163828"/><text x="72.6073%" y="271.50">std::collections::hash::map::HashMap&lt;K,V..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (642,163,828 samples, 24.95%)</title><rect x="72.3573%" y="245" width="24.9461%" height="15" fill="rgb(220,129,5)" fg:x="1862629471" fg:w="642163828"/><text x="72.6073%" y="255.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (642,163,828 samples, 24.95%)</title><rect x="72.3573%" y="229" width="24.9461%" height="15" fill="rgb(242,17,10)" fg:x="1862629471" fg:w="642163828"/><text x="72.6073%" y="239.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_in..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (471,503,993 samples, 18.32%)</title><rect x="78.9869%" y="213" width="18.3165%" height="15" fill="rgb(242,107,0)" fg:x="2033289306" fg:w="471503993"/><text x="79.2369%" y="223.50">hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (471,503,993 samples, 18.32%)</title><rect x="78.9869%" y="197" width="18.3165%" height="15" fill="rgb(251,28,31)" fg:x="2033289306" fg:w="471503993"/><text x="79.2369%" y="207.50">hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (471,503,993 samples, 18.32%)</title><rect x="78.9869%" y="181" width="18.3165%" height="15" fill="rgb(233,223,10)" fg:x="2033289306" fg:w="471503993"/><text x="79.2369%" y="191.50">hashbrown::raw::RawTableInner..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (4,320,890 samples, 0.17%)</title><rect x="97.1355%" y="165" width="0.1679%" height="15" fill="rgb(215,21,27)" fg:x="2500472409" fg:w="4320890"/><text x="97.3855%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4,320,890 samples, 0.17%)</title><rect x="97.1355%" y="149" width="0.1679%" height="15" fill="rgb(232,23,21)" fg:x="2500472409" fg:w="4320890"/><text x="97.3855%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,320,890 samples, 0.17%)</title><rect x="97.1355%" y="133" width="0.1679%" height="15" fill="rgb(244,5,23)" fg:x="2500472409" fg:w="4320890"/><text x="97.3855%" y="143.50"></text></g><g><title>core::str::converts::from_utf8 (69,416,266 samples, 2.70%)</title><rect x="97.3034%" y="213" width="2.6966%" height="15" fill="rgb(226,81,46)" fg:x="2504793299" fg:w="69416266"/><text x="97.5534%" y="223.50">co..</text></g><g><title>core::str::validations::run_utf8_validation (69,416,256 samples, 2.70%)</title><rect x="97.3034%" y="197" width="2.6966%" height="15" fill="rgb(247,70,30)" fg:x="2504793309" fg:w="69416256"/><text x="97.5534%" y="207.50">co..</text></g><g><title>core::str::validations::utf8_char_width (1,796,196 samples, 0.07%)</title><rect x="99.9302%" y="181" width="0.0698%" height="15" fill="rgb(212,68,19)" fg:x="2572413369" fg:w="1796196"/><text x="100.1802%" y="191.50"></text></g><g><title>all (2,574,209,567 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="2574209567"/><text x="0.2500%" y="591.50"></text></g><g><title>onebrc (2,574,209,567 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="2574209567"/><text x="0.2500%" y="575.50">onebrc</text></g><g><title>_start (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="549" width="99.9750%" height="15" fill="rgb(206,192,2)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="559.50">_start</text></g><g><title>__libc_start_main (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="533" width="99.9750%" height="15" fill="rgb(241,108,4)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="543.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="517" width="99.9750%" height="15" fill="rgb(247,173,49)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="527.50">[libc.so.6]</text></g><g><title>main (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="501" width="99.9750%" height="15" fill="rgb(224,114,35)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="511.50">main</text></g><g><title>std::rt::lang_start_internal (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="485" width="99.9750%" height="15" fill="rgb(245,159,27)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="469" width="99.9750%" height="15" fill="rgb(245,172,44)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="453" width="99.9750%" height="15" fill="rgb(236,23,11)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="437" width="99.9750%" height="15" fill="rgb(205,117,38)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="447.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="421" width="99.9750%" height="15" fill="rgb(237,72,25)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="431.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="405" width="99.9750%" height="15" fill="rgb(244,70,9)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="389" width="99.9750%" height="15" fill="rgb(217,125,39)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="373" width="99.9750%" height="15" fill="rgb(235,36,10)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="383.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="357" width="99.9750%" height="15" fill="rgb(251,123,47)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="367.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="341" width="99.9750%" height="15" fill="rgb(221,13,13)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="351.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="325" width="99.9750%" height="15" fill="rgb(238,131,9)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="309" width="99.9750%" height="15" fill="rgb(211,50,8)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>onebrc::main (2,573,567,299 samples, 99.98%)</title><rect x="0.0250%" y="293" width="99.9750%" height="15" fill="rgb(245,182,24)" fg:x="642268" fg:w="2573567299"/><text x="0.2750%" y="303.50">onebrc::main</text></g><g><title>std::fs::read_to_string (69,416,268 samples, 2.70%)</title><rect x="97.3034%" y="277" width="2.6966%" height="15" fill="rgb(242,14,37)" fg:x="2504793299" fg:w="69416268"/><text x="97.5534%" y="287.50">st..</text></g><g><title>std::fs::read_to_string::inner (69,416,268 samples, 2.70%)</title><rect x="97.3034%" y="261" width="2.6966%" height="15" fill="rgb(246,228,12)" fg:x="2504793299" fg:w="69416268"/><text x="97.5534%" y="271.50">st..</text></g><g><title>std::io::default_read_to_string (69,416,268 samples, 2.70%)</title><rect x="97.3034%" y="245" width="2.6966%" height="15" fill="rgb(213,55,15)" fg:x="2504793299" fg:w="69416268"/><text x="97.5534%" y="255.50">st..</text></g><g><title>std::io::append_to_string (69,416,268 samples, 2.70%)</title><rect x="97.3034%" y="229" width="2.6966%" height="15" fill="rgb(209,9,3)" fg:x="2504793299" fg:w="69416268"/><text x="97.5534%" y="239.50">st..</text></g></svg></svg>