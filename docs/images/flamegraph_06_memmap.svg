<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="2419637998"><g><title>[ld-linux-x86-64.so.2] (492,621 samples, 0.02%)</title><rect x="0.0000%" y="437" width="0.0204%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="492621"/><text x="0.2500%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (423,716 samples, 0.02%)</title><rect x="0.0028%" y="421" width="0.0175%" height="15" fill="rgb(217,0,24)" fg:x="68905" fg:w="423716"/><text x="0.2528%" y="431.50"></text></g><g><title>_dl_catch_exception (423,716 samples, 0.02%)</title><rect x="0.0028%" y="405" width="0.0175%" height="15" fill="rgb(221,193,54)" fg:x="68905" fg:w="423716"/><text x="0.2528%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (423,716 samples, 0.02%)</title><rect x="0.0028%" y="389" width="0.0175%" height="15" fill="rgb(248,212,6)" fg:x="68905" fg:w="423716"/><text x="0.2528%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (423,716 samples, 0.02%)</title><rect x="0.0028%" y="373" width="0.0175%" height="15" fill="rgb(208,68,35)" fg:x="68905" fg:w="423716"/><text x="0.2528%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (423,716 samples, 0.02%)</title><rect x="0.0028%" y="357" width="0.0175%" height="15" fill="rgb(232,128,0)" fg:x="68905" fg:w="423716"/><text x="0.2528%" y="367.50"></text></g><g><title>[unknown] (423,716 samples, 0.02%)</title><rect x="0.0028%" y="341" width="0.0175%" height="15" fill="rgb(207,160,47)" fg:x="68905" fg:w="423716"/><text x="0.2528%" y="351.50"></text></g><g><title>[unknown] (423,716 samples, 0.02%)</title><rect x="0.0028%" y="325" width="0.0175%" height="15" fill="rgb(228,23,34)" fg:x="68905" fg:w="423716"/><text x="0.2528%" y="335.50"></text></g><g><title>[unknown] (423,716 samples, 0.02%)</title><rect x="0.0028%" y="309" width="0.0175%" height="15" fill="rgb(218,30,26)" fg:x="68905" fg:w="423716"/><text x="0.2528%" y="319.50"></text></g><g><title>[unknown] (423,716 samples, 0.02%)</title><rect x="0.0028%" y="293" width="0.0175%" height="15" fill="rgb(220,122,19)" fg:x="68905" fg:w="423716"/><text x="0.2528%" y="303.50"></text></g><g><title>[unknown] (423,716 samples, 0.02%)</title><rect x="0.0028%" y="277" width="0.0175%" height="15" fill="rgb(250,228,42)" fg:x="68905" fg:w="423716"/><text x="0.2528%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (499,452 samples, 0.02%)</title><rect x="0.0000%" y="453" width="0.0206%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="499452"/><text x="0.2500%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (500,112 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0207%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="500112"/><text x="0.2500%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (500,113 samples, 0.02%)</title><rect x="0.0000%" y="485" width="0.0207%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="500113"/><text x="0.2500%" y="495.50"></text></g><g><title>[unknown] (11,233,666 samples, 0.46%)</title><rect x="2.1930%" y="181" width="0.4643%" height="15" fill="rgb(217,207,13)" fg:x="53063689" fg:w="11233666"/><text x="2.4430%" y="191.50"></text></g><g><title>[unknown] (11,233,666 samples, 0.46%)</title><rect x="2.1930%" y="165" width="0.4643%" height="15" fill="rgb(231,73,38)" fg:x="53063689" fg:w="11233666"/><text x="2.4430%" y="175.50"></text></g><g><title>[unknown] (8,432,173 samples, 0.35%)</title><rect x="2.3088%" y="149" width="0.3485%" height="15" fill="rgb(225,20,46)" fg:x="55865182" fg:w="8432173"/><text x="2.5588%" y="159.50"></text></g><g><title>[unknown] (8,432,173 samples, 0.35%)</title><rect x="2.3088%" y="133" width="0.3485%" height="15" fill="rgb(210,31,41)" fg:x="55865182" fg:w="8432173"/><text x="2.5588%" y="143.50"></text></g><g><title>[unknown] (8,432,173 samples, 0.35%)</title><rect x="2.3088%" y="117" width="0.3485%" height="15" fill="rgb(221,200,47)" fg:x="55865182" fg:w="8432173"/><text x="2.5588%" y="127.50"></text></g><g><title>[unknown] (2,854,571 samples, 0.12%)</title><rect x="2.5393%" y="101" width="0.1180%" height="15" fill="rgb(226,26,5)" fg:x="61442784" fg:w="2854571"/><text x="2.7893%" y="111.50"></text></g><g><title>[unknown] (2,854,571 samples, 0.12%)</title><rect x="2.5393%" y="85" width="0.1180%" height="15" fill="rgb(249,33,26)" fg:x="61442784" fg:w="2854571"/><text x="2.7893%" y="95.50"></text></g><g><title>[unknown] (2,854,571 samples, 0.12%)</title><rect x="2.5393%" y="69" width="0.1180%" height="15" fill="rgb(235,183,28)" fg:x="61442784" fg:w="2854571"/><text x="2.7893%" y="79.50"></text></g><g><title>[unknown] (2,854,571 samples, 0.12%)</title><rect x="2.5393%" y="53" width="0.1180%" height="15" fill="rgb(221,5,38)" fg:x="61442784" fg:w="2854571"/><text x="2.7893%" y="63.50"></text></g><g><title>[unknown] (2,854,571 samples, 0.12%)</title><rect x="2.5393%" y="37" width="0.1180%" height="15" fill="rgb(247,18,42)" fg:x="61442784" fg:w="2854571"/><text x="2.7893%" y="47.50"></text></g><g><title>core::str::converts::from_utf8 (67,846,719 samples, 2.80%)</title><rect x="0.0207%" y="213" width="2.8040%" height="15" fill="rgb(241,131,45)" fg:x="500113" fg:w="67846719"/><text x="0.2707%" y="223.50">co..</text></g><g><title>core::str::validations::run_utf8_validation (67,846,719 samples, 2.80%)</title><rect x="0.0207%" y="197" width="2.8040%" height="15" fill="rgb(249,31,29)" fg:x="500113" fg:w="67846719"/><text x="0.2707%" y="207.50">co..</text></g><g><title>core::str::validations::utf8_char_width (4,049,477 samples, 0.17%)</title><rect x="2.6573%" y="181" width="0.1674%" height="15" fill="rgb(225,111,53)" fg:x="64297355" fg:w="4049477"/><text x="2.9073%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (4,272,506 samples, 0.18%)</title><rect x="7.0871%" y="117" width="0.1766%" height="15" fill="rgb(238,160,17)" fg:x="171483249" fg:w="4272506"/><text x="7.3371%" y="127.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (4,272,506 samples, 0.18%)</title><rect x="7.0871%" y="101" width="0.1766%" height="15" fill="rgb(214,148,48)" fg:x="171483249" fg:w="4272506"/><text x="7.3371%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (4,272,506 samples, 0.18%)</title><rect x="7.0871%" y="85" width="0.1766%" height="15" fill="rgb(232,36,49)" fg:x="171483249" fg:w="4272506"/><text x="7.3371%" y="95.50"></text></g><g><title>core::cmp::Ord::min (8,605,173 samples, 0.36%)</title><rect x="17.4498%" y="69" width="0.3556%" height="15" fill="rgb(209,103,24)" fg:x="422221238" fg:w="8605173"/><text x="17.6998%" y="79.50"></text></g><g><title>core::cmp::min_by (8,605,173 samples, 0.36%)</title><rect x="17.4498%" y="53" width="0.3556%" height="15" fill="rgb(229,88,8)" fg:x="422221238" fg:w="8605173"/><text x="17.6998%" y="63.50"></text></g><g><title>&lt;core::str::iter::SplitInclusive&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (473,467,305 samples, 19.57%)</title><rect x="5.8436%" y="165" width="19.5677%" height="15" fill="rgb(213,181,19)" fg:x="141393358" fg:w="473467305"/><text x="6.0936%" y="175.50">&lt;core::str::iter::SplitInclusiv..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (473,467,305 samples, 19.57%)</title><rect x="5.8436%" y="149" width="19.5677%" height="15" fill="rgb(254,191,54)" fg:x="141393358" fg:w="473467305"/><text x="6.0936%" y="159.50">core::str::iter::SplitInternal&lt;..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (473,467,305 samples, 19.57%)</title><rect x="5.8436%" y="133" width="19.5677%" height="15" fill="rgb(241,83,37)" fg:x="141393358" fg:w="473467305"/><text x="6.0936%" y="143.50">&lt;core::str::pattern::CharSearch..</text></g><g><title>core::slice::memchr::memchr (439,104,908 samples, 18.15%)</title><rect x="7.2637%" y="117" width="18.1475%" height="15" fill="rgb(233,36,39)" fg:x="175755755" fg:w="439104908"/><text x="7.5137%" y="127.50">core::slice::memchr::memchr</text></g><g><title>core::slice::memchr::memchr_aligned (439,104,908 samples, 18.15%)</title><rect x="7.2637%" y="101" width="18.1475%" height="15" fill="rgb(226,3,54)" fg:x="175755755" fg:w="439104908"/><text x="7.5137%" y="111.50">core::slice::memchr::memchr_..</text></g><g><title>core::slice::memchr::memchr_aligned::runtime (285,723,245 samples, 11.81%)</title><rect x="13.6028%" y="85" width="11.8085%" height="15" fill="rgb(245,192,40)" fg:x="329137418" fg:w="285723245"/><text x="13.8528%" y="95.50">core::slice::memch..</text></g><g><title>core::slice::memchr::memchr_naive (184,034,252 samples, 7.61%)</title><rect x="17.8054%" y="69" width="7.6059%" height="15" fill="rgb(238,167,29)" fg:x="430826411" fg:w="184034252"/><text x="18.0554%" y="79.50">core::slic..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (542,306,184 samples, 22.41%)</title><rect x="5.8436%" y="197" width="22.4127%" height="15" fill="rgb(232,182,51)" fg:x="141393358" fg:w="542306184"/><text x="6.0936%" y="207.50">&lt;core::str::iter::Lines as core::it..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (542,306,184 samples, 22.41%)</title><rect x="5.8436%" y="181" width="22.4127%" height="15" fill="rgb(231,60,39)" fg:x="141393358" fg:w="542306184"/><text x="6.0936%" y="191.50">&lt;core::iter::adapters::map::Map&lt;I,F..</text></g><g><title>core::option::Option&lt;T&gt;::map (68,838,879 samples, 2.85%)</title><rect x="25.4113%" y="165" width="2.8450%" height="15" fill="rgb(208,69,12)" fg:x="614860663" fg:w="68838879"/><text x="25.6613%" y="175.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (68,838,879 samples, 2.85%)</title><rect x="25.4113%" y="149" width="2.8450%" height="15" fill="rgb(235,93,37)" fg:x="614860663" fg:w="68838879"/><text x="25.6613%" y="159.50">co..</text></g><g><title>&lt;core::str::LinesMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (68,838,879 samples, 2.85%)</title><rect x="25.4113%" y="133" width="2.8450%" height="15" fill="rgb(213,116,39)" fg:x="614860663" fg:w="68838879"/><text x="25.6613%" y="143.50">&lt;c..</text></g><g><title>&lt;core::str::LinesMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (68,838,879 samples, 2.85%)</title><rect x="25.4113%" y="117" width="2.8450%" height="15" fill="rgb(222,207,29)" fg:x="614860663" fg:w="68838879"/><text x="25.6613%" y="127.50">&lt;c..</text></g><g><title>core::str::&lt;impl str&gt;::strip_suffix (21,506,856 samples, 0.89%)</title><rect x="27.3674%" y="101" width="0.8888%" height="15" fill="rgb(206,96,30)" fg:x="662192686" fg:w="21506856"/><text x="27.6174%" y="111.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::strip_suffix_of (21,506,856 samples, 0.89%)</title><rect x="27.3674%" y="85" width="0.8888%" height="15" fill="rgb(218,138,4)" fg:x="662192686" fg:w="21506856"/><text x="27.6174%" y="95.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::strip_suffix_of (21,506,856 samples, 0.89%)</title><rect x="27.3674%" y="69" width="0.8888%" height="15" fill="rgb(250,191,14)" fg:x="662192686" fg:w="21506856"/><text x="27.6174%" y="79.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (21,506,856 samples, 0.89%)</title><rect x="27.3674%" y="53" width="0.8888%" height="15" fill="rgb(239,60,40)" fg:x="662192686" fg:w="21506856"/><text x="27.6174%" y="63.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (21,506,856 samples, 0.89%)</title><rect x="27.3674%" y="37" width="0.8888%" height="15" fill="rgb(206,27,48)" fg:x="662192686" fg:w="21506856"/><text x="27.6174%" y="47.50"></text></g><g><title>&lt;F as core::str::pattern::MultiCharEq&gt;::matches (4,291,229 samples, 0.18%)</title><rect x="31.9714%" y="117" width="0.1774%" height="15" fill="rgb(225,35,8)" fg:x="773593336" fg:w="4291229"/><text x="32.2214%" y="127.50"></text></g><g><title>onebrc::process_raw_stations::_{{closure}} (4,291,229 samples, 0.18%)</title><rect x="31.9714%" y="101" width="0.1774%" height="15" fill="rgb(250,213,24)" fg:x="773593336" fg:w="4291229"/><text x="32.2214%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (146,153,508 samples, 6.04%)</title><rect x="45.2057%" y="69" width="6.0403%" height="15" fill="rgb(247,123,22)" fg:x="1093813746" fg:w="146153508"/><text x="45.4557%" y="79.50">&lt;core::s..</text></g><g><title>core::str::validations::utf8_acc_cont_byte (4,305,151 samples, 0.18%)</title><rect x="51.2460%" y="69" width="0.1779%" height="15" fill="rgb(231,138,38)" fg:x="1239967254" fg:w="4305151"/><text x="51.4960%" y="79.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (577,783,127 samples, 23.88%)</title><rect x="28.2563%" y="197" width="23.8789%" height="15" fill="rgb(231,145,46)" fg:x="683699542" fg:w="577783127"/><text x="28.5063%" y="207.50">&lt;core::str::iter::Split&lt;P&gt; as core::it..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (577,783,127 samples, 23.88%)</title><rect x="28.2563%" y="181" width="23.8789%" height="15" fill="rgb(251,118,11)" fg:x="683699542" fg:w="577783127"/><text x="28.5063%" y="191.50">core::str::iter::SplitInternal&lt;P&gt;::next</text></g><g><title>&lt;core::str::pattern::CharPredicateSearcher&lt;F&gt; as core::str::pattern::Searcher&gt;::next_match (564,877,956 samples, 23.35%)</title><rect x="28.7896%" y="165" width="23.3456%" height="15" fill="rgb(217,147,25)" fg:x="696604713" fg:w="564877956"/><text x="29.0396%" y="175.50">&lt;core::str::pattern::CharPredicateSea..</text></g><g><title>core::str::pattern::Searcher::next_match (564,877,956 samples, 23.35%)</title><rect x="28.7896%" y="149" width="23.3456%" height="15" fill="rgb(247,81,37)" fg:x="696604713" fg:w="564877956"/><text x="29.0396%" y="159.50">core::str::pattern::Searcher::next_ma..</text></g><g><title>&lt;core::str::pattern::MultiCharEqSearcher&lt;C&gt; as core::str::pattern::Searcher&gt;::next (487,889,333 samples, 20.16%)</title><rect x="31.9714%" y="133" width="20.1637%" height="15" fill="rgb(209,12,38)" fg:x="773593336" fg:w="487889333"/><text x="32.2214%" y="143.50">&lt;core::str::pattern::MultiCharEq..</text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (483,598,104 samples, 19.99%)</title><rect x="32.1488%" y="117" width="19.9864%" height="15" fill="rgb(227,1,9)" fg:x="777884565" fg:w="483598104"/><text x="32.3988%" y="127.50">&lt;core::str::iter::CharIndices a..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (483,598,104 samples, 19.99%)</title><rect x="32.1488%" y="101" width="19.9864%" height="15" fill="rgb(248,47,43)" fg:x="777884565" fg:w="483598104"/><text x="32.3988%" y="111.50">&lt;core::str::iter::Chars as core..</text></g><g><title>core::str::validations::next_code_point (483,598,104 samples, 19.99%)</title><rect x="32.1488%" y="85" width="19.9864%" height="15" fill="rgb(221,10,30)" fg:x="777884565" fg:w="483598104"/><text x="32.3988%" y="95.50">core::str::validations::next_co..</text></g><g><title>core::str::validations::utf8_first_byte (17,210,264 samples, 0.71%)</title><rect x="51.4239%" y="69" width="0.7113%" height="15" fill="rgb(210,229,1)" fg:x="1244272405" fg:w="17210264"/><text x="51.6739%" y="79.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (47,305,800 samples, 1.96%)</title><rect x="68.9728%" y="149" width="1.9551%" height="15" fill="rgb(222,148,37)" fg:x="1668891379" fg:w="47305800"/><text x="69.2228%" y="159.50">c..</text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (34,394,959 samples, 1.42%)</title><rect x="69.5064%" y="133" width="1.4215%" height="15" fill="rgb(234,67,33)" fg:x="1681802220" fg:w="34394959"/><text x="69.7564%" y="143.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (29,810,313 samples, 1.23%)</title><rect x="76.6142%" y="85" width="1.2320%" height="15" fill="rgb(247,98,35)" fg:x="1853786111" fg:w="29810313"/><text x="76.8642%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (4,306,629 samples, 0.18%)</title><rect x="77.6682%" y="69" width="0.1780%" height="15" fill="rgb(247,138,52)" fg:x="1879289795" fg:w="4306629"/><text x="77.9182%" y="79.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (150,125,593 samples, 6.20%)</title><rect x="75.3702%" y="117" width="6.2045%" height="15" fill="rgb(213,79,30)" fg:x="1823687071" fg:w="150125593"/><text x="75.6202%" y="127.50">core::nu..</text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (137,223,556 samples, 5.67%)</title><rect x="75.9035%" y="101" width="5.6712%" height="15" fill="rgb(246,177,23)" fg:x="1836589108" fg:w="137223556"/><text x="76.1535%" y="111.50">&lt;[u8] a..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (90,216,240 samples, 3.73%)</title><rect x="77.8462%" y="85" width="3.7285%" height="15" fill="rgb(230,62,27)" fg:x="1883596424" fg:w="90216240"/><text x="78.0962%" y="95.50">core..</text></g><g><title>core::str::&lt;impl str&gt;::parse (716,628,211 samples, 29.62%)</title><rect x="52.1352%" y="197" width="29.6172%" height="15" fill="rgb(216,154,8)" fg:x="1261482669" fg:w="716628211"/><text x="52.3852%" y="207.50">core::str::&lt;impl str&gt;::parse</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (716,628,211 samples, 29.62%)</title><rect x="52.1352%" y="181" width="29.6172%" height="15" fill="rgb(244,35,45)" fg:x="1261482669" fg:w="716628211"/><text x="52.3852%" y="191.50">core::num::dec2flt::&lt;impl core::str::traits::Fro..</text></g><g><title>core::num::dec2flt::dec2flt (592,049,352 samples, 24.47%)</title><rect x="57.2838%" y="165" width="24.4685%" height="15" fill="rgb(251,115,12)" fg:x="1386061528" fg:w="592049352"/><text x="57.5338%" y="175.50">core::num::dec2flt::dec2flt</text></g><g><title>core::num::dec2flt::parse::parse_number (261,913,701 samples, 10.82%)</title><rect x="70.9278%" y="149" width="10.8245%" height="15" fill="rgb(240,54,50)" fg:x="1716197179" fg:w="261913701"/><text x="71.1778%" y="159.50">core::num::dec2f..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (201,709,291 samples, 8.34%)</title><rect x="73.4160%" y="133" width="8.3363%" height="15" fill="rgb(233,84,52)" fg:x="1776401589" fg:w="201709291"/><text x="73.6660%" y="143.50">core::num::d..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (4,298,216 samples, 0.18%)</title><rect x="81.5747%" y="117" width="0.1776%" height="15" fill="rgb(207,117,47)" fg:x="1973812664" fg:w="4298216"/><text x="81.8247%" y="127.50"></text></g><g><title>core::str::&lt;impl str&gt;::split (8,600,656 samples, 0.36%)</title><rect x="81.7523%" y="197" width="0.3555%" height="15" fill="rgb(249,43,39)" fg:x="1978110880" fg:w="8600656"/><text x="82.0023%" y="207.50"></text></g><g><title>&lt;F as core::str::pattern::Pattern&gt;::into_searcher (8,600,656 samples, 0.36%)</title><rect x="81.7523%" y="181" width="0.3555%" height="15" fill="rgb(209,38,44)" fg:x="1978110880" fg:w="8600656"/><text x="82.0023%" y="191.50"></text></g><g><title>&lt;core::str::pattern::MultiCharEqPattern&lt;C&gt; as core::str::pattern::Pattern&gt;::into_searcher (8,600,656 samples, 0.36%)</title><rect x="81.7523%" y="165" width="0.3555%" height="15" fill="rgb(236,212,23)" fg:x="1978110880" fg:w="8600656"/><text x="82.0023%" y="175.50"></text></g><g><title>core::str::&lt;impl str&gt;::char_indices (8,600,656 samples, 0.36%)</title><rect x="81.7523%" y="149" width="0.3555%" height="15" fill="rgb(242,79,21)" fg:x="1978110880" fg:w="8600656"/><text x="82.0023%" y="159.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (8,600,656 samples, 0.36%)</title><rect x="81.7523%" y="133" width="0.3555%" height="15" fill="rgb(211,96,35)" fg:x="1978110880" fg:w="8600656"/><text x="82.0023%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (8,600,656 samples, 0.36%)</title><rect x="81.7523%" y="117" width="0.3555%" height="15" fill="rgb(253,215,40)" fg:x="1978110880" fg:w="8600656"/><text x="82.0023%" y="127.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (8,600,656 samples, 0.36%)</title><rect x="81.7523%" y="101" width="0.3555%" height="15" fill="rgb(211,81,21)" fg:x="1978110880" fg:w="8600656"/><text x="82.0023%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (8,600,656 samples, 0.36%)</title><rect x="81.7523%" y="85" width="0.3555%" height="15" fill="rgb(208,190,38)" fg:x="1978110880" fg:w="8600656"/><text x="82.0023%" y="95.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,602,233 samples, 0.36%)</title><rect x="83.3513%" y="101" width="0.3555%" height="15" fill="rgb(235,213,38)" fg:x="2016800354" fg:w="8602233"/><text x="83.6013%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (4,299,308 samples, 0.18%)</title><rect x="83.5292%" y="85" width="0.1777%" height="15" fill="rgb(237,122,38)" fg:x="2021103279" fg:w="4299308"/><text x="83.7792%" y="95.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (4,299,308 samples, 0.18%)</title><rect x="83.5292%" y="69" width="0.1777%" height="15" fill="rgb(244,218,35)" fg:x="2021103279" fg:w="4299308"/><text x="83.7792%" y="79.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (4,299,308 samples, 0.18%)</title><rect x="83.5292%" y="53" width="0.1777%" height="15" fill="rgb(240,68,47)" fg:x="2021103279" fg:w="4299308"/><text x="83.7792%" y="63.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (42,990,386 samples, 1.78%)</title><rect x="82.1078%" y="149" width="1.7767%" height="15" fill="rgb(210,16,53)" fg:x="1986711536" fg:w="42990386"/><text x="82.3578%" y="159.50">&lt;..</text></g><g><title>fxhash::write (42,990,386 samples, 1.78%)</title><rect x="82.1078%" y="133" width="1.7767%" height="15" fill="rgb(235,124,12)" fg:x="1986711536" fg:w="42990386"/><text x="82.3578%" y="143.50">f..</text></g><g><title>fxhash::write64 (42,990,386 samples, 1.78%)</title><rect x="82.1078%" y="117" width="1.7767%" height="15" fill="rgb(224,169,11)" fg:x="1986711536" fg:w="42990386"/><text x="82.3578%" y="127.50">f..</text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (4,299,335 samples, 0.18%)</title><rect x="83.7068%" y="101" width="0.1777%" height="15" fill="rgb(250,166,2)" fg:x="2025402587" fg:w="4299335"/><text x="83.9568%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (4,299,335 samples, 0.18%)</title><rect x="83.7068%" y="85" width="0.1777%" height="15" fill="rgb(242,216,29)" fg:x="2025402587" fg:w="4299335"/><text x="83.9568%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (4,304,219 samples, 0.18%)</title><rect x="83.8845%" y="117" width="0.1779%" height="15" fill="rgb(230,116,27)" fg:x="2029701922" fg:w="4304219"/><text x="84.1345%" y="127.50"></text></g><g><title>fxhash::hash (51,587,991 samples, 2.13%)</title><rect x="82.1078%" y="197" width="2.1321%" height="15" fill="rgb(228,99,48)" fg:x="1986711536" fg:w="51587991"/><text x="82.3578%" y="207.50">f..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (51,587,991 samples, 2.13%)</title><rect x="82.1078%" y="181" width="2.1321%" height="15" fill="rgb(253,11,6)" fg:x="1986711536" fg:w="51587991"/><text x="82.3578%" y="191.50">c..</text></g><g><title>core::hash::Hasher::write_str (51,587,991 samples, 2.13%)</title><rect x="82.1078%" y="165" width="2.1321%" height="15" fill="rgb(247,143,39)" fg:x="1986711536" fg:w="51587991"/><text x="82.3578%" y="175.50">c..</text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (8,597,605 samples, 0.36%)</title><rect x="83.8845%" y="149" width="0.3553%" height="15" fill="rgb(236,97,10)" fg:x="2029701922" fg:w="8597605"/><text x="84.1345%" y="159.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (8,597,605 samples, 0.36%)</title><rect x="83.8845%" y="133" width="0.3553%" height="15" fill="rgb(233,208,19)" fg:x="2029701922" fg:w="8597605"/><text x="84.1345%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (4,293,386 samples, 0.18%)</title><rect x="84.0624%" y="117" width="0.1774%" height="15" fill="rgb(216,164,2)" fg:x="2034006141" fg:w="4293386"/><text x="84.3124%" y="127.50"></text></g><g><title>onebrc::Station::add_measurement (111,839,010 samples, 4.62%)</title><rect x="84.2399%" y="197" width="4.6221%" height="15" fill="rgb(220,129,5)" fg:x="2038299527" fg:w="111839010"/><text x="84.4899%" y="207.50">onebr..</text></g><g><title>hashbrown::map::make_hash (8,604,368 samples, 0.36%)</title><rect x="89.3946%" y="149" width="0.3556%" height="15" fill="rgb(242,17,10)" fg:x="2163026216" fg:w="8604368"/><text x="89.6446%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,604,368 samples, 0.36%)</title><rect x="89.3946%" y="133" width="0.3556%" height="15" fill="rgb(242,107,0)" fg:x="2163026216" fg:w="8604368"/><text x="89.6446%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8,604,368 samples, 0.36%)</title><rect x="89.3946%" y="117" width="0.3556%" height="15" fill="rgb(251,28,31)" fg:x="2163026216" fg:w="8604368"/><text x="89.6446%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (8,604,368 samples, 0.36%)</title><rect x="89.3946%" y="101" width="0.3556%" height="15" fill="rgb(233,223,10)" fg:x="2163026216" fg:w="8604368"/><text x="89.6446%" y="111.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_usize (8,604,368 samples, 0.36%)</title><rect x="89.3946%" y="85" width="0.3556%" height="15" fill="rgb(215,21,27)" fg:x="2163026216" fg:w="8604368"/><text x="89.6446%" y="95.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (8,604,368 samples, 0.36%)</title><rect x="89.3946%" y="69" width="0.3556%" height="15" fill="rgb(232,23,21)" fg:x="2163026216" fg:w="8604368"/><text x="89.6446%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (8,604,368 samples, 0.36%)</title><rect x="89.3946%" y="53" width="0.3556%" height="15" fill="rgb(244,5,23)" fg:x="2163026216" fg:w="8604368"/><text x="89.6446%" y="63.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (51,090,792 samples, 2.11%)</title><rect x="90.4614%" y="101" width="2.1115%" height="15" fill="rgb(226,81,46)" fg:x="2188838542" fg:w="51090792"/><text x="90.7114%" y="111.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (51,090,792 samples, 2.11%)</title><rect x="90.4614%" y="85" width="2.1115%" height="15" fill="rgb(247,70,30)" fg:x="2188838542" fg:w="51090792"/><text x="90.7114%" y="95.50">h..</text></g><g><title>core::intrinsics::likely (76,684,523 samples, 3.17%)</title><rect x="92.5729%" y="101" width="3.1693%" height="15" fill="rgb(212,68,19)" fg:x="2239929334" fg:w="76684523"/><text x="92.8229%" y="111.50">cor..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (4,302,091 samples, 0.18%)</title><rect x="95.7422%" y="85" width="0.1778%" height="15" fill="rgb(240,187,13)" fg:x="2316613857" fg:w="4302091"/><text x="95.9922%" y="95.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4,302,091 samples, 0.18%)</title><rect x="95.7422%" y="69" width="0.1778%" height="15" fill="rgb(223,113,26)" fg:x="2316613857" fg:w="4302091"/><text x="95.9922%" y="79.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,302,091 samples, 0.18%)</title><rect x="95.7422%" y="53" width="0.1778%" height="15" fill="rgb(206,192,2)" fg:x="2316613857" fg:w="4302091"/><text x="95.9922%" y="63.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (4,302,091 samples, 0.18%)</title><rect x="95.7422%" y="37" width="0.1778%" height="15" fill="rgb(241,108,4)" fg:x="2316613857" fg:w="4302091"/><text x="95.9922%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (25,806,596 samples, 1.07%)</title><rect x="95.7422%" y="101" width="1.0665%" height="15" fill="rgb(247,173,49)" fg:x="2316613857" fg:w="25806596"/><text x="95.9922%" y="111.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (21,504,505 samples, 0.89%)</title><rect x="95.9200%" y="85" width="0.8887%" height="15" fill="rgb(224,114,35)" fg:x="2320915948" fg:w="21504505"/><text x="96.1700%" y="95.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (21,504,505 samples, 0.89%)</title><rect x="95.9200%" y="69" width="0.8887%" height="15" fill="rgb(245,159,27)" fg:x="2320915948" fg:w="21504505"/><text x="96.1700%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (21,504,505 samples, 0.89%)</title><rect x="95.9200%" y="53" width="0.8887%" height="15" fill="rgb(245,172,44)" fg:x="2320915948" fg:w="21504505"/><text x="96.1700%" y="63.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (4,256,266 samples, 0.18%)</title><rect x="96.8087%" y="101" width="0.1759%" height="15" fill="rgb(236,23,11)" fg:x="2342420453" fg:w="4256266"/><text x="97.0587%" y="111.50"></text></g><g><title>hashbrown::raw::h2 (60,210,777 samples, 2.49%)</title><rect x="96.9846%" y="101" width="2.4884%" height="15" fill="rgb(205,117,38)" fg:x="2346676719" fg:w="60210777"/><text x="97.2346%" y="111.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8,606,915 samples, 0.36%)</title><rect x="99.4730%" y="101" width="0.3557%" height="15" fill="rgb(237,72,25)" fg:x="2406887496" fg:w="8606915"/><text x="99.7230%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8,606,915 samples, 0.36%)</title><rect x="99.4730%" y="85" width="0.3557%" height="15" fill="rgb(244,70,9)" fg:x="2406887496" fg:w="8606915"/><text x="99.7230%" y="95.50"></text></g><g><title>all (2,419,637,998 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="2419637998"/><text x="0.2500%" y="527.50"></text></g><g><title>onebrc (2,419,637,998 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="2419637998"/><text x="0.2500%" y="511.50">onebrc</text></g><g><title>_start (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="485" width="99.9793%" height="15" fill="rgb(251,123,47)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="495.50">_start</text></g><g><title>__libc_start_main (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="469" width="99.9793%" height="15" fill="rgb(221,13,13)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="479.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="453" width="99.9793%" height="15" fill="rgb(238,131,9)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="463.50">[libc.so.6]</text></g><g><title>main (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="437" width="99.9793%" height="15" fill="rgb(211,50,8)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="447.50">main</text></g><g><title>std::rt::lang_start_internal (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="421" width="99.9793%" height="15" fill="rgb(245,182,24)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="431.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="405" width="99.9793%" height="15" fill="rgb(242,14,37)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="389" width="99.9793%" height="15" fill="rgb(246,228,12)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="373" width="99.9793%" height="15" fill="rgb(213,55,15)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="383.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="357" width="99.9793%" height="15" fill="rgb(209,9,3)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="367.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="341" width="99.9793%" height="15" fill="rgb(230,59,30)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="351.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="325" width="99.9793%" height="15" fill="rgb(209,121,21)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="335.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="309" width="99.9793%" height="15" fill="rgb(220,109,13)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="319.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="293" width="99.9793%" height="15" fill="rgb(232,18,1)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="303.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="277" width="99.9793%" height="15" fill="rgb(215,41,42)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="287.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="261" width="99.9793%" height="15" fill="rgb(224,123,36)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="271.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="245" width="99.9793%" height="15" fill="rgb(240,125,3)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="255.50">core::ops::function::FnOnce::call_once</text></g><g><title>onebrc::main (2,419,137,885 samples, 99.98%)</title><rect x="0.0207%" y="229" width="99.9793%" height="15" fill="rgb(205,98,50)" fg:x="500113" fg:w="2419137885"/><text x="0.2707%" y="239.50">onebrc::main</text></g><g><title>onebrc::process_raw_stations (2,351,291,166 samples, 97.18%)</title><rect x="2.8247%" y="213" width="97.1753%" height="15" fill="rgb(205,185,37)" fg:x="68346832" fg:w="2351291166"/><text x="3.0747%" y="223.50">onebrc::process_raw_stations</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (269,499,461 samples, 11.14%)</title><rect x="88.8620%" y="197" width="11.1380%" height="15" fill="rgb(238,207,15)" fg:x="2150138537" fg:w="269499461"/><text x="89.1120%" y="207.50">std::collections..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (269,499,461 samples, 11.14%)</title><rect x="88.8620%" y="181" width="11.1380%" height="15" fill="rgb(213,199,42)" fg:x="2150138537" fg:w="269499461"/><text x="89.1120%" y="191.50">hashbrown::map::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (269,499,461 samples, 11.14%)</title><rect x="88.8620%" y="165" width="11.1380%" height="15" fill="rgb(235,201,11)" fg:x="2150138537" fg:w="269499461"/><text x="89.1120%" y="175.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (248,007,414 samples, 10.25%)</title><rect x="89.7502%" y="149" width="10.2498%" height="15" fill="rgb(207,46,11)" fg:x="2171630584" fg:w="248007414"/><text x="90.0002%" y="159.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (248,007,414 samples, 10.25%)</title><rect x="89.7502%" y="133" width="10.2498%" height="15" fill="rgb(241,35,35)" fg:x="2171630584" fg:w="248007414"/><text x="90.0002%" y="143.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (248,007,414 samples, 10.25%)</title><rect x="89.7502%" y="117" width="10.2498%" height="15" fill="rgb(243,32,47)" fg:x="2171630584" fg:w="248007414"/><text x="90.0002%" y="127.50">hashbrown::raw:..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (4,143,587 samples, 0.17%)</title><rect x="99.8288%" y="101" width="0.1712%" height="15" fill="rgb(247,202,23)" fg:x="2415494411" fg:w="4143587"/><text x="100.0788%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4,143,587 samples, 0.17%)</title><rect x="99.8288%" y="85" width="0.1712%" height="15" fill="rgb(219,102,11)" fg:x="2415494411" fg:w="4143587"/><text x="100.0788%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,143,587 samples, 0.17%)</title><rect x="99.8288%" y="69" width="0.1712%" height="15" fill="rgb(243,110,44)" fg:x="2415494411" fg:w="4143587"/><text x="100.0788%" y="79.50"></text></g></svg></svg>